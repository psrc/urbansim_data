<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <description type="string">Bay Area parcel configuration for unit-level price model</description>
    <project_name hidden="True" type="string">bay_area_parcel</project_name>
    <parent type="file">urbansim_parcel/configs/urbansim_parcel.xml</parent>
    <expression_library type="dictionary">
      <variable use="both" source="expression" name="area_permutation.total_population_alt2" type="variable_definition">area_permutation.aggregate(person.age&lt;120*numpy.in1d(person.gq, [0, 1]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.total_population_alt" type="variable_definition">area_permutation.aggregate(building.number_of_agents(person),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.age_lt_04" type="variable_definition">area_permutation.aggregate((person.age&lt;=4)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="primary attribute" name="area_permutation.tpp_id" type="variable_definition">area_permutation.tpp_id</variable>
      <variable use="both" source="primary attribute" name="area_permutation.pda_id" type="variable_definition">area_permutation.pda_id</variable>
      <variable use="both" source="primary attribute" name="area_permutation.county_id" type="variable_definition">area_permutation.county_id</variable>
      <variable use="both" source="primary attribute" name="area_permutation.jurisdiction_id" type="variable_definition">area_permutation.jurisdiction_id</variable>
      <variable use="both" source="primary attribute" name="area_permutation.city_id" type="variable_definition">area_permutation.city_id</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_total_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_urbanized_acres" type="variable_definition">superdistrict.aggregate((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(numpy.logical_or(building.residential_units&gt;0,building.non_residential_sqft&gt;0)))</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_office" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==4),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_light_industrial" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==7),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_heavy_industrial&#10;" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==9), intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_big_box_retail" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_single_family_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units*building.building_type_id&lt;3,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_household_population" type="variable_definition">superdistrict.aggregate(building.aggregate(household.persons),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft, intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_multi_family_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units*building.building_type_id==3,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_households" type="variable_definition">superdistrict.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_employees" type="variable_definition">superdistrict.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="devcalib_geography.devcalib_target_expression" type="variable_definition">devcalib_geography.aggregate((building.residential_units*(building.building_type_id&lt;4)) + (building.non_residential_sqft*(building.building_type_id&gt;3)))</variable>
      <variable use="both" source="expression" name="building_type.building_resunits" type="variable_definition">building_type.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="county.hlcm_calib_target_expression" type="variable_definition">county.aggregate(submarket.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="submarket.county_is_sonoma_calib" type="variable_definition">bayarea.submarket.county_id==49</variable>
      <variable use="both" source="expression" name="submarket.county_is_solano_calib" type="variable_definition">bayarea.submarket.county_id==48</variable>
      <variable use="both" source="expression" name="submarket.county_is_santaclara_calib" type="variable_definition">bayarea.submarket.county_id==43</variable>
      <variable use="both" source="expression" name="submarket.county_is_sanmateo_calib" type="variable_definition">bayarea.submarket.county_id==41</variable>
      <variable use="both" source="expression" name="submarket.county_is_sanfrancisco_calib" type="variable_definition">bayarea.submarket.county_id==38</variable>
      <variable use="both" source="expression" name="submarket.county_is_napa_calib" type="variable_definition">bayarea.submarket.county_id==28</variable>
      <variable use="both" source="expression" name="submarket.county_is_marin_calib" type="variable_definition">bayarea.submarket.county_id==21</variable>
      <variable use="both" source="expression" name="submarket.county_is_contracosta_calib" type="variable_definition">bayarea.submarket.county_id==7</variable>
      <variable use="both" source="expression" name="submarket.county_is_alameda_calib" type="variable_definition">bayarea.submarket.county_id==1</variable>
      <variable use="both" source="expression" name="zone.zone_sqft_per_employee" type="variable_definition">zone.aggregate(building.non_residential_sqft, intermediates=[parcel])/zone.aggregate(establishment.employees, intermediates=[building, parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_warehouse_industrial" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==8),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_strip_mall_retail" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==10),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_school" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==6),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_retail_focused_mixed_use" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==13),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_residential_focused_mixed_use" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==12),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_office" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==4),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_light_industrial" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==7),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_hotel" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==5),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_heavy_industrial" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==9), intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_employment_focused_mixed_use" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==14), intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_big_box_retail" terse_name="all_nonres_sqft_big_box_retail" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==11))</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft" type="variable_definition">zone.aggregate(building.non_residential_sqft, intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="alldata.hhincq1" type="variable_definition">alldata.aggregate_all((household.income)&lt;25000)</variable>
      <variable use="both" source="expression" name="alldata.hhincq2" type="variable_definition">alldata.aggregate_all(((household.income)&gt;24999)*((household.income)&lt;45000))</variable>
      <variable use="both" source="expression" name="alldata.hhincq3" type="variable_definition">alldata.aggregate_all(((household.income)&gt;44999)*((household.income)&lt;75000))</variable>
      <variable use="both" source="expression" name="alldata.hhincq4" type="variable_definition">alldata.aggregate_all((household.income)&gt;74999,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="alldata.persons_with_unmatched_hhid" type="variable_definition">alldata.aggregate_all(person.disaggregate(household.persons)&lt;=0)</variable>
      <variable use="both" source="expression" name="alldata.households_with_unmatched_bldg_id" type="variable_definition">alldata.aggregate_all((household.building_id)&lt;=0)</variable>
      <variable use="both" source="expression" name="alldata.region_commercial_industrial_acres" terse_name="all_comm_ind_acres" type="variable_definition">alldata.aggregate_all(bayarea.parcel.parcel_acre*parcel.aggregate(building.non_residential_sqft&gt;0))</variable>
      <variable use="both" source="expression" name="alldata.region_dwelling_units_mixed_use" terse_name="all_DUs_mxu" type="variable_definition">alldata.aggregate_all(building.residential_units*(building.building_type_id&gt;11))</variable>
      <variable use="both" source="expression" name="alldata.region_dwelling_units_multi_family" terse_name="all_DUs_multi_family" type="variable_definition">alldata.aggregate_all(building.residential_units*(building.building_type_id==3))</variable>
      <variable use="both" source="expression" name="alldata.region_dwelling_units_single_family_attached" terse_name="all_DUs_SF_attached" type="variable_definition">alldata.aggregate_all(building.residential_units*(building.building_type_id==2))</variable>
      <variable use="both" source="expression" name="alldata.region_dwelling_units_single_family_detatched" terse_name="all_DUs_SF_detached" type="variable_definition">alldata.aggregate_all(building.residential_units*(building.building_type_id==1))</variable>
      <variable use="both" source="expression" name="alldata.region_dwelling_units_within_half_mile_transit" terse_name="all_DUs_half_mile_transit" type="variable_definition">alldata.aggregate_all(building.residential_units*building.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel]))</variable>
      <variable use="both" source="expression" name="alldata.region_dwelling_units" terse_name="all_DUs" type="variable_definition">alldata.aggregate_all(building.residential_units)</variable>
      <variable use="both" source="expression" name="alldata.region_employed_residents" terse_name="all_employed_residents" type="variable_definition">alldata.aggregate_all(household.workers)</variable>
      <variable use="both" source="expression" name="alldata.region_employment" terse_name="all_employment" type="variable_definition">alldata.aggregate_all(establishment.employees)</variable>
      <variable use="both" source="expression" name="alldata.region_establishments" terse_name="all_establishments" type="variable_definition">alldata.aggregate_all(establishment.employees&gt;0)</variable>
      <variable use="both" source="expression" name="alldata.region_households" terse_name="all_households" type="variable_definition">alldata.aggregate_all(household.persons&gt;0)</variable>
      <variable use="both" source="expression" name="alldata.region_jobs_within_half_mile_transit" terse_name="all_jobs_half_mile_transit" type="variable_definition">alldata.aggregate_all(establishment.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*(establishment.employees)*(establishment.building_id&gt;0))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_big_box_retail" terse_name="all_nonres_sqft_big_box_retail" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==11))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_employment_focused_mixed_use" terse_name="all_nonres_sqft_emp_focused_mxu" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==14))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_heavy_industrial" terse_name="all_nonres_sqft_heavy_ind" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==9))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_hotel" terse_name="all_nonres_sqft_hotel" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==5))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_light_industrial" terse_name="all_nonres_sqft_light_ind" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==7))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_office" terse_name="all_nonres_sqft_office" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==4))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_residential_focused_mixed_use" terse_name="all_nonres_sqft_res_focused_mxu" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==12))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_retail_focused_mixed_use" terse_name="all_nonres_sqft_ret_focused_mxu" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==13))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_school" terse_name="all_nonres_sqft_school" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==6))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_strip_mall_retail" terse_name="all_nonres_sqft_strpmall_retail" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==10))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft_warehouse_industrial" terse_name="all_nonres_sqft_warehouse_ind" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft*(building.building_type_id==8))</variable>
      <variable use="both" source="expression" name="alldata.region_non_residential_sqft" terse_name="all_nonres_sqft" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft)</variable>
      <variable use="both" source="expression" name="alldata.region_owner_dwelling_units_from_unit_set" terse_name="all_own_DUs_from_unit_set" type="variable_definition">alldata.aggregate_all(residential_unit.disaggregate(building.tenure==2))</variable>
      <variable use="both" source="expression" name="alldata.region_owner_dwelling_units" terse_name="all_own_DUs" type="variable_definition">alldata.aggregate_all(building.residential_units*(building.tenure==2))</variable>
      <variable use="both" source="expression" name="alldata.region_persons_nongq" type="variable_definition">alldata.aggregate_all(person.gq==0)</variable>
      <variable use="both" source="expression" name="alldata.region_persons" terse_name="all_employed_residents" type="variable_definition">alldata.aggregate_all((person.person_id &gt;0)*(person.gq==0))</variable>
      <variable use="both" source="expression" name="alldata.region_population_within_half_mile_transit" terse_name="all_pop_half_mile_transit" type="variable_definition">alldata.aggregate_all((household.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*household.persons))</variable>
      <variable use="both" source="expression" name="alldata.region_population" terse_name="all_persons" type="variable_definition">alldata.aggregate_all(household.persons)</variable>
      <variable use="both" source="expression" name="alldata.region_rental_dwelling_units_from_unit_set" terse_name="all_rent_DUs_from_unit_set" type="variable_definition">alldata.aggregate_all(residential_unit.disaggregate(building.tenure==1))</variable>
      <variable use="both" source="expression" name="alldata.region_rental_dwelling_units" terse_name="all_rent_DUs" type="variable_definition">alldata.aggregate_all(building.residential_units*(building.tenure==1))</variable>
      <variable use="both" source="expression" name="alldata.region_residential_acres" terse_name="all_res_acres" type="variable_definition">alldata.aggregate_all((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(building.residential_units&gt;0))</variable>
      <variable use="both" source="expression" name="alldata.region_single_family_dwelling_units_from_unit_set" terse_name="all_SF_DUs_from_unit_set" type="variable_definition">alldata.aggregate_all(residential_unit.disaggregate(building.building_type_id&lt;3))</variable>
      <variable use="both" source="expression" name="alldata.region_single_family_dwelling_units" terse_name="all_SF_DUs" type="variable_definition">alldata.aggregate_all(building.residential_units*(building.building_type_id&lt;3))</variable>
      <variable use="both" source="expression" name="alldata.region_urbanized_acres" terse_name="all_urbanized_acres" type="variable_definition">alldata.aggregate_all((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(numpy.logical_or(building.residential_units&gt;0,building.non_residential_sqft&gt;0)))</variable>
      <variable use="both" source="expression" name="alldata.ln_median_income" type="variable_definition">ln_bounded(alldata.aggregate_all(household.income, function=median))</variable>
      <variable use="both" source="expression" name="alldata.ln_median_rent_per_unit" type="variable_definition">ln_bounded(alldata.aggregate_all(residential_unit.rent,intermediates=[building],function=median))</variable>
      <variable use="both" source="expression" name="alldata.median_household_size" type="variable_definition">alldata.aggregate_all(household.persons, function=median)</variable>
      <variable use="both" source="expression" name="alldata.ln_avg_rent" type="variable_definition">ln(safe_array_divide(alldata.aggregate_all(residential_unit.rent,intermediates=[building]),alldata.aggregate_all(residential_unit.rent&gt;0,intermediates=[building])))</variable>
      <variable use="both" source="expression" name="alldata.ln_avg_sale_price" type="variable_definition">ln(safe_array_divide(alldata.aggregate_all(residential_unit.sale_price,intermediates=[building]),alldata.aggregate_all(residential_unit.sale_price&gt;0,intermediates=[building])))</variable>
      <variable use="both" source="expression" name="alldata.average_unit_size" type="variable_definition">(alldata.aggregate_all(building.building_sqft - building.non_residential_sqft)*1.0)/alldata.aggregate_all(building.residential_units)</variable>
      <variable use="both" source="expression" name="building.bdlg_in_san_francisco" type="variable_definition">building.disaggregate(parcel.county_id==38)</variable>
      <variable use="both" source="expression" name="building.bdlg_type_big_box" type="variable_definition">building.building_type_id==11</variable>
      <variable use="both" source="expression" name="building.bdlg_type_hotel" type="variable_definition">building.building_type_id==5</variable>
      <variable use="both" source="expression" name="building.bdlg_type_mixed_use" type="variable_definition">(building.building_type_id&gt;11)*(building.building_type_id&lt;15)</variable>
      <variable use="both" source="expression" name="building.bdlg_type_office" type="variable_definition">building.building_type_id==4</variable>
      <variable use="both" source="expression" name="building.bdlg_type_strip_mall" type="variable_definition">building.building_type_id==10</variable>
      <variable use="both" source="expression" name="building.bdlg_type_whse_industrial" type="variable_definition">(building.building_type_id&gt;4)*(building.building_type_id&lt;10)</variable>
      <variable use="both" source="expression" name="building.bldg_average_income_within_500_meters" type="variable_definition">building.disaggregate(bayarea.node.average_income_within_500_meters_from_household_dataset,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="building.bldg_average_stories_within_500_meters" type="variable_definition">building.disaggregate(bayarea.node.average_stories_within_500_meters,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="building.bldg_avg_auto_peak_total_access" type="variable_definition">building.disaggregate(zone_accessibility.autopeaktotal,intermediates=[zone])</variable>
      <variable use="both" source="expression" name="building.bldg_avg_transit_peak_total_access" type="variable_definition">building.disaggregate(zone_accessibility.transitpeaktotal)</variable>
      <variable use="both" source="expression" name="building.bldg_bart_within_half_mile" type="variable_definition">building.disaggregate(bayarea.node.transit_type_1_within_800_meters,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="building.bldg_hotel_x_transit_within_half_mile" type="variable_definition">building.building_type_id==5*numpy.logical_or(building.disaggregate(bayarea.node.transit_type_0_within_800_meters,intermediates=[parcel,building]),building.disaggregate(bayarea.node.transit_type_1_within_800_meters,intermediates=[parcel,building]))</variable>
      <variable use="both" source="expression" name="building.bldg_ln_average_income_within_500_meters" type="variable_definition">ln_bounded(building.disaggregate(bayarea.node.average_income_within_500_meters_from_household_dataset,intermediates=[parcel,building]))</variable>
      <variable use="both" source="expression" name="building.bldg_ln_residential_units_1" type="variable_definition">ln_bounded(building.residential_units)</variable>
      <variable use="both" source="expression" name="building.bldg_ln_sum_non_residential_sqft_within_500_meters" type="variable_definition">ln_bounded(building.disaggregate(bayarea.node.sum_non_residential_sqft_within_500_meters,intermediates=[parcel,building]))</variable>
      <variable use="both" source="expression" name="building.bldg_office_x_transit_within_half_mile" type="variable_definition">building.building_type_id==4*numpy.logical_or(building.disaggregate(bayarea.node.transit_type_0_within_800_meters,intermediates=[parcel,building]),building.disaggregate(bayarea.node.transit_type_1_within_800_meters,intermediates=[parcel,building]))</variable>
      <variable use="both" source="expression" name="building.bldg_transit_within_half_mile" type="variable_definition">numpy.logical_or(building.disaggregate(bayarea.node.transit_type_0_within_800_meters,intermediates=[parcel,building]),building.disaggregate(bayarea.node.transit_type_1_within_800_meters,intermediates=[parcel,building]))</variable>
      <variable use="both" source="expression" name="building.bldg_transit_within_quarter_mile" type="variable_definition">numpy.logical_or(building.disaggregate(bayarea.node.transit_type_0_within_400_meters,intermediates=[parcel,building]),building.disaggregate(bayarea.node.transit_type_1_within_400_meters,intermediates=[parcel,building]))</variable>
      <variable use="both" source="expression" name="county.average_unit_size" type="variable_definition">(county.aggregate(building.building_sqft - building.non_residential_sqft)*1.0)/county.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="county.avg_rent_altmethod" type="variable_definition">county.aggregate(residential_unit.rent,intermediates=[building],function=mean)</variable>
      <variable use="both" source="expression" name="county.avg_rent" type="variable_definition">safe_array_divide(county.aggregate(residential_unit.rent,intermediates=[building]),county.aggregate(residential_unit.rent&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="county.avg_sale_price" type="variable_definition">safe_array_divide(county.aggregate(residential_unit.sale_price,intermediates=[building]),county.aggregate(residential_unit.sale_price&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="county.county_commercial_industrial_acres" type="variable_definition">county.aggregate(bayarea.parcel.parcel_acre*parcel.aggregate(building.non_residential_sqft&gt;0))</variable>
      <variable use="both" source="expression" name="county.county_dwelling_units_mixed_use" type="variable_definition">county.aggregate(building.residential_units*(building.building_type_id&gt;11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_dwelling_units_multi_family" type="variable_definition">county.aggregate(building.residential_units*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_dwelling_units_single_family_attached" type="variable_definition">county.aggregate(building.residential_units*(building.building_type_id==2),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_dwelling_units_single_family_detatched" type="variable_definition">county.aggregate(building.residential_units*(building.building_type_id==1),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_dwelling_units_within_half_mile_transit" type="variable_definition">county.aggregate(building.residential_units * building.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="county.county_employed_residents" type="variable_definition">county.aggregate(household.workers, intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="county.county_employment_finance_professional" type="variable_definition">county.aggregate(establishment.employees*numpy.in1d(establishment.sector_id, [1, 2, 3]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="county.county_employment" type="variable_definition">county.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="county.county_establishments" type="variable_definition">county.aggregate(establishment.employees&gt;0,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="county.county_households" type="variable_definition">county.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_jobs_within_half_mile_transit" type="variable_definition">county.aggregate((establishment.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*establishment.employees),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="county.county_ln_median_income" type="variable_definition">ln_bounded(county.aggregate(household.income,intermediates=[building,parcel],function=median))</variable>
      <variable use="both" source="expression" name="county.county_mixed_use_dwelling_units" type="variable_definition">county.aggregate(building.residential_units*(building.building_type_id&gt;11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_multi_family_dwelling_units" type="variable_definition">county.aggregate(building.residential_units*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_big_box_retail" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_employment_focused_mixed_use" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==14),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_heavy_industrial" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==9),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_hotel" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==5),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_light_industrial" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==7),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_office" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==4),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_residential_focused_mixed_use" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==12),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_retail_focused_mixed_use" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==13),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_school" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==6),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_strip_mall_retail" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==10),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft_warehouse_industrial" type="variable_definition">county.aggregate(building.non_residential_sqft*(building.building_type_id==8),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft" type="variable_definition">county.aggregate(building.non_residential_sqft,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_owner_dwelling_units" type="variable_definition">county.aggregate(building.residential_units*(building.tenure==2),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_population_age_lt_18" type="variable_definition">county.aggregate((person.age&lt;18)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="county.county_population_within_half_mile_transit" type="variable_definition">county.aggregate((household.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*household.persons),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="county.county_population" type="variable_definition">county.aggregate(household.persons, intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="county.county_rental_dwelling_units" type="variable_definition">county.aggregate(building.residential_units*(building.tenure==1),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_residential_acres" type="variable_definition">county.aggregate((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(building.residential_units&gt;0))</variable>
      <variable use="both" source="expression" name="county.county_single_family_dwelling_units" type="variable_definition">county.aggregate(building.residential_units*(building.building_type_id&lt;3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_total_dwelling_units" type="variable_definition">county.aggregate(building.residential_units,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.county_urbanized_acres" type="variable_definition">county.aggregate((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(numpy.logical_or(building.residential_units&gt;0,building.non_residential_sqft&gt;0)))</variable>
      <variable use="both" source="expression" name="county.hlcm_calib_target_expression" type="variable_definition">county.aggregate(submarket.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="county.ln_avg_nonres_rent" type="variable_definition">ln_bounded(safe_array_divide(county.aggregate(building.non_residential_rent),county.aggregate(building.non_residential_rent&gt;0)))</variable>
      <variable use="both" source="expression" name="county.median_rent" type="variable_definition">county.aggregate(residential_unit.rent,intermediates=[building],function=median)</variable>
      <variable use="both" source="expression" name="county.county_population_age_65_plus" type="variable_definition">county.aggregate((person.age&gt;64)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="county.sqft_per_employee" type="variable_definition">safe_array_divide(county.aggregate(bayarea.building.non_residential_sqft, intermediates=[parcel]),county.aggregate(bayarea.establishment.employees, intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="county.office_employment" type="variable_definition">county.aggregate(building.aggregate(bayarea.establishment.employees) * (building.building_type_id==4),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.office_vacancy" type="variable_definition">safe_array_divide(county.aggregate(building.aggregate(establishment.employees) * (building.building_type_id==4) * building.disaggregate(building_sqft_per_employee.building_sqft_per_employee, intermediates=[jurisdiction,parcel]),county.aggregate(bayarea.building.non_residential_sqft * (building.building_type_id==4), intermediates=[parcel])))</variable>
      <variable use="both" source="expression" name="devcalib_geography.devcalib_target_expression" type="variable_definition">devcalib_geography.aggregate((building.residential_units*(building.building_type_id&lt;4)) + (building.non_residential_sqft*(building.building_type_id&gt;3)))</variable>
      <variable use="both" source="expression" name="county.office_employment" type="variable_definition">county.aggregate(building.aggregate(bayarea.establishment.employees) * (building.building_type_id==4),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="county.nonres_occupancy_ratio" type="variable_definition">safe_array_divide(county.aggregate(bayarea.employment_submarket.occupied_non_residential_sqft), county.aggregate(bayarea.employment_submarket.non_residential_sqft))</variable>
      <variable use="both" source="expression" name="county.county_employment_density" type="variable_definition">safe_array_divide(county.aggregate(bayarea.employment_submarket.occupied_non_residential_sqft), county.aggregate(bayarea.employment_submarket.employees))</variable>
      <variable use="both" source="expression" name="employment_submarket.avg_nonres_rent" type="variable_definition">safe_array_divide(employment_submarket.aggregate(building.non_residential_rent),employment_submarket.aggregate(building.non_residential_rent&gt;0))</variable>
      <variable use="both" source="expression" name="employment_submarket.employees" type="variable_definition">employment_submarket.aggregate(establishment.employees)</variable>
      <variable use="both" source="expression" name="employment_submarket.esubmarket_avg_auto_peak_total_access" type="variable_definition">employment_submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean)</variable>
      <variable use="both" source="expression" name="employment_submarket.esubmarket_avg_transit_peak_total_access" type="variable_definition">employment_submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.transitpeaktotal)),function=mean)</variable>
      <variable use="both" source="expression" name="employment_submarket.esubmarket_close_to_transit" type="variable_definition">employment_submarket.within_half_mile_transit==1</variable>
      <variable use="both" source="expression" name="employment_submarket.esubmarket_ln_median_income" type="variable_definition">ln_bounded(employment_submarket.aggregate(household.income,intermediates=[building],function=median))</variable>
      <variable use="both" source="expression" name="employment_submarket.esubmarket_ln_rent" type="variable_definition">employment_submarket.aggregate(building.ln_rent, function=median)</variable>
      <variable use="both" source="expression" name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance" type="variable_definition">ln(employment_submarket.aggregate(building.disaggregate(bayarea.node.sum_residential_units_within_800_meters,intermediates=[parcel]),function=mean))</variable>
      <variable use="both" source="expression" name="employment_submarket.esubmarket_median_stories" type="variable_definition">employment_submarket.aggregate(building.stories, function=median)</variable>
      <variable use="both" source="expression" name="employment_submarket.is_office_esubmarket" type="variable_definition">employment_submarket.building_type_id==4</variable>
      <variable use="both" source="expression" name="employment_submarket.jobs_in_jurisdiction" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_avg_nonres_rent" type="variable_definition">ln_bounded(safe_array_divide(employment_submarket.aggregate(building.non_residential_rent),employment_submarket.aggregate(building.non_residential_rent&gt;0)))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_jobs_in_jurisdiction" type="variable_definition">ln_bounded(employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel])))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_jobs_sector_1" type="variable_definition">ln_bounded(employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==1),intermediates=[building,parcel])))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_jobs_sector_2" type="variable_definition">ln_bounded(employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==2),intermediates=[building,parcel])))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_jobs_sector_3" type="variable_definition">ln_bounded(employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==3),intermediates=[building,parcel])))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_jobs_sector_4" type="variable_definition">ln_bounded(employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==4),intermediates=[building,parcel])))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_jobs_sector_5" type="variable_definition">ln_bounded(employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==5),intermediates=[building,parcel])))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_jobs_sector_6" type="variable_definition">ln_bounded(employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==6),intermediates=[building,parcel])))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_jobs_sector_7" type="variable_definition">ln_bounded(employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==7),intermediates=[building,parcel])))</variable>
      <variable use="both" source="expression" name="employment_submarket.ln_non_residential_sqft_esubmarket" type="variable_definition">ln(employment_submarket.aggregate(building.non_residential_sqft))</variable>
      <variable use="both" source="expression" name="employment_submarket.san_francisco_esubmarket" type="variable_definition">employment_submarket.county_id==38</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_1" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==1),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_10" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==10),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_11" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==11),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_12" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==12),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_13" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==13),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_14" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==14),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_15" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==15),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_16" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==16),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_17" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==17),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_18" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==18),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_19" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==19),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_2" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==2),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_20" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==20),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_21" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==21),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_22" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==22),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_23" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==23),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_24" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==24),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_25" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==25),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_26" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==26),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_27" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==27),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_28" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==28),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_3" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==3),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_4" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==4),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_5" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==5),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_6" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==6),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_7" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==7),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_8" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==8),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="employment_submarket.share_jobs_sector_9" type="variable_definition">employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees*((establishment.sector_id-618312)==9),intermediates=[building,parcel]))/employment_submarket.disaggregate(jurisdiction.aggregate(establishment.employees,intermediates=[building,parcel]))</variable>
      <variable use="both" source="expression" name="establishment_x_employment_submarket.establishment_size_x_esubmarket_close_to_transit" type="variable_definition">establishment.employees*bayarea.employment_submarket.within_half_mile_transit==1</variable>
      <variable use="both" source="expression" name="household_x_submarket.age_of_head_x_nonresidential_sqft_within_500m" type="variable_definition">household.age_of_head*submarket.aggregate(building.disaggregate(bayarea.node.sum_non_residential_sqft_within_500_meters,intermediates=[parcel,building]),function=mean)</variable>
      <variable use="both" source="expression" name="household_x_submarket.hh_cars_x_single_family_detached" type="variable_definition">(household.cars)*(submarket.building_type==1)</variable>
      <variable use="both" source="expression" name="household_x_submarket.hh_income_x_average_unit_size" type="variable_definition">household.income*(submarket.aggregate(building.building_sqft - building.non_residential_sqft)*1.0)/submarket.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="household_x_submarket.young_head_of_hh_x_multifamily" type="variable_definition">(household.age_of_head&lt;35)*(submarket.building_type==3)</variable>
      <variable use="both" source="expression" name="household.hh_head_age" type="variable_definition">household.age_of_head</variable>
      <variable use="both" source="expression" name="household.hh_head65" type="variable_definition">household.age_of_head&gt;65</variable>
      <variable use="both" source="expression" name="household.non_family" type="variable_definition">household.family_type==1</variable>
      <variable use="both" source="expression" name="region.region_owner_dwelling_units" type="variable_definition">region.aggregate_all(building.residential_units*(building.tenure==2),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="region.region_rental_dwelling_units" type="variable_definition">region.aggregate_all(building.residential_units*(building.tenure==1),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="residential_unit.average_income_within_500_meters" type="variable_definition">residential_unit.disaggregate(bayarea.node.average_income_within_500_meters_from_household_dataset,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.average_stories_within_500_meters" type="variable_definition">residential_unit.disaggregate(bayarea.node.average_stories_within_500_meters,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.bart_within_half_mile" type="variable_definition">residential_unit.disaggregate(bayarea.node.transit_type_1_within_800_meters,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.built_pre_1930" type="variable_definition">residential_unit.disaggregate((building.year_built&lt;1931)*(building.year_built&gt;1848))</variable>
      <variable use="both" source="expression" name="residential_unit.in_san_francisco" type="variable_definition">residential_unit.disaggregate(parcel.county_id==38,intermediates=[building])</variable>
      <variable use="both" source="expression" name="residential_unit.in_santa_clara_county" type="variable_definition">residential_unit.disaggregate(parcel.county_id==43,intermediates=[building])</variable>
      <variable use="both" source="expression" name="residential_unit.ln_average_income_within_500_meters" type="variable_definition">ln_bounded(residential_unit.disaggregate(bayarea.node.average_income_within_500_meters_from_household_dataset,intermediates=[parcel,building]))</variable>
      <variable use="both" source="expression" name="residential_unit.ln_lot_sqft" type="variable_definition">ln_bounded(residential_unit.disaggregate(building.disaggregate(parcel.shape_area)))</variable>
      <variable use="both" source="expression" name="residential_unit.ln_sum_non_residential_sqft_within_500_meters" type="variable_definition">ln_bounded(residential_unit.disaggregate(bayarea.node.sum_non_residential_sqft_within_500_meters,intermediates=[parcel,building]))</variable>
      <variable use="both" source="expression" name="residential_unit.ln_unit_sqft_in_san_francisco" type="variable_definition">residential_unit.disaggregate(parcel.county_id==38,intermediates=[building])*ln_bounded(residential_unit.unit_sqft)</variable>
      <variable use="both" source="expression" name="residential_unit.residential_building_type" type="variable_definition">1*(residential_unit.unit_building_type==1) + 2*(residential_unit.unit_building_type==2) + 3*(residential_unit.unit_building_type==3) + 4*(residential_unit.unit_building_type&gt;3)</variable>
      <variable use="both" source="expression" name="residential_unit.residential_units_in_building" type="variable_definition">residential_unit.disaggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="residential_unit.residential_units_per_acre_in_zone" type="variable_definition">residential_unit.disaggregate(zone.aggregate(building.residential_units,intermediates=[parcel])/zone.acres,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.stories_5" type="variable_definition">residential_unit.disaggregate(building.stories)&gt;4</variable>
      <variable use="both" source="expression" name="residential_unit.stories" type="variable_definition">residential_unit.disaggregate(building.stories)</variable>
      <variable use="both" source="expression" name="residential_unit.sum_income_within_100_meters" type="variable_definition">residential_unit.disaggregate(bayarea.node.sum_income_within_100_meters_from_household_dataset,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.sum_non_residential_sqft_within_500_meters" type="variable_definition">residential_unit.disaggregate(bayarea.node.sum_non_residential_sqft_within_500_meters,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.sum_residential_units_within_250_meters" type="variable_definition">residential_unit.disaggregate(bayarea.node.sum_residential_units_within_250_meters,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.sum_workers_within_500_meters" type="variable_definition">residential_unit.disaggregate(bayarea.node.sum_workers_within_500_meters_from_household_dataset,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.transit_peak_total_access" type="variable_definition">residential_unit.disaggregate(zone.disaggregate(zone_accessibility.transitpeaktotal), intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.transit_within_half_mile" type="variable_definition">numpy.logical_or(residential_unit.disaggregate(bayarea.node.transit_type_0_within_800_meters,intermediates=[parcel,building]),residential_unit.disaggregate(bayarea.node.transit_type_1_within_800_meters,intermediates=[parcel,building]))</variable>
      <variable use="both" source="expression" name="residential_unit.transit_within_quarter_mile" type="variable_definition">residential_unit.disaggregate(bayarea.node.transit_type_1_within_400_meters,intermediates=[parcel,building])</variable>
      <variable use="both" source="expression" name="residential_unit.unit_building_type" type="variable_definition">residential_unit.disaggregate(building.building_type_id)</variable>
      <variable use="both" source="expression" name="residential_unit.year_built" type="variable_definition">residential_unit.disaggregate(building.year_built*(building.year_built&gt;1930)*(building.year_built&lt;2012))</variable>
      <variable use="both" source="expression" name="submarket.average_unit_size" type="variable_definition">(submarket.aggregate(building.building_sqft - building.non_residential_sqft)*1.0)/submarket.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="submarket.avg_rent" type="variable_definition">safe_array_divide(submarket.aggregate(residential_unit.rent,intermediates=[building]),submarket.aggregate(residential_unit.rent&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="submarket.avg_sale_price" type="variable_definition">safe_array_divide(submarket.aggregate(residential_unit.sale_price,intermediates=[building]),submarket.aggregate(residential_unit.sale_price&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="submarket.avg_zonal_sale_price" type="variable_definition">submarket.aggregate(building.disaggregate(zone.aggregate(residential_unit.sale_price,intermediates=[building,parcel],function=median),intermediates=[parcel]),function=mean)</variable>
      <variable use="both" source="expression" name="submarket.county_is_alameda_calib" type="variable_definition">bayarea.submarket.county_id==1</variable>
      <variable use="both" source="expression" name="submarket.county_is_contracosta_calib" type="variable_definition">bayarea.submarket.county_id==7</variable>
      <variable use="both" source="expression" name="submarket.county_is_marin_calib" type="variable_definition">bayarea.submarket.county_id==21</variable>
      <variable use="both" source="expression" name="submarket.county_is_napa_calib" type="variable_definition">bayarea.submarket.county_id==28</variable>
      <variable use="both" source="expression" name="submarket.county_is_sanfrancisco_calib" type="variable_definition">bayarea.submarket.county_id==38</variable>
      <variable use="both" source="expression" name="submarket.county_is_sanmateo_calib" type="variable_definition">bayarea.submarket.county_id==41</variable>
      <variable use="both" source="expression" name="submarket.county_is_santaclara_calib" type="variable_definition">bayarea.submarket.county_id==43</variable>
      <variable use="both" source="expression" name="submarket.county_is_solano_calib" type="variable_definition">bayarea.submarket.county_id==48</variable>
      <variable use="both" source="expression" name="submarket.county_is_sonoma_calib" type="variable_definition">bayarea.submarket.county_id==49</variable>
      <variable use="both" source="expression" name="submarket.households" type="variable_definition">submarket.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="submarket.is_not_single_family_submarket" type="variable_definition">submarket.building_type&gt;2</variable>
      <variable use="both" source="expression" name="submarket.is_single_family_detatched_submarket" type="variable_definition">submarket.building_type==1</variable>
      <variable use="both" source="expression" name="submarket.is_single_family_submarket" type="variable_definition">numpy.logical_or(submarket.building_type==1,submarket.building_type==2)</variable>
      <variable use="both" source="expression" name="submarket.ln_avg_rent" type="variable_definition">ln(safe_array_divide(submarket.aggregate(residential_unit.rent,intermediates=[building]),submarket.aggregate(residential_unit.rent&gt;0,intermediates=[building])))</variable>
      <variable use="both" source="expression" name="submarket.ln_avg_sale_price" type="variable_definition">ln(safe_array_divide(submarket.aggregate(residential_unit.sale_price,intermediates=[building]),submarket.aggregate(residential_unit.sale_price&gt;0,intermediates=[building])))</variable>
      <variable use="both" source="expression" name="submarket.ln_median_income" type="variable_definition">ln_bounded(submarket.aggregate(household.income, function=median))</variable>
      <variable use="both" source="expression" name="submarket.ln_median_lot_sqft" type="variable_definition">ln_bounded(submarket.aggregate((building.disaggregate(parcel.shape_area)/building.residential_units),function=median))</variable>
      <variable use="both" source="expression" name="submarket.ln_median_rent_per_unit" type="variable_definition">ln_bounded(submarket.aggregate(residential_unit.rent,intermediates=[building],function=median))</variable>
      <variable use="both" source="expression" name="submarket.ln_median_sqft" type="variable_definition">ln_bounded(submarket.aggregate(residential_unit.unit_sqft,intermediates=[building], function=median))</variable>
      <variable use="both" source="expression" name="submarket.ln_nonresidential_sqft_within_6miles" type="variable_definition">ln(submarket.aggregate(building.disaggregate(bayarea.node.sum_non_residential_sqft_within_10000_meters,intermediates=[parcel]),function=mean))</variable>
      <variable use="both" source="expression" name="submarket.ln_residential_units_within_walking_distance" type="variable_definition">ln(submarket.aggregate(building.disaggregate(bayarea.node.sum_residential_units_within_800_meters,intermediates=[parcel]),function=mean))</variable>
      <variable use="both" source="expression" name="submarket.ln_residential_units" type="variable_definition">ln_bounded(submarket.aggregate(building.residential_units))</variable>
      <variable use="both" source="expression" name="submarket.median_age_of_head" type="variable_definition">submarket.aggregate(household.age_of_head, function=median)</variable>
      <variable use="both" source="expression" name="submarket.median_household_size" type="variable_definition">submarket.aggregate(household.persons, function=median)</variable>
      <variable use="both" source="expression" name="submarket.median_stories" type="variable_definition">submarket.aggregate(building.stories, function=median)</variable>
      <variable use="both" source="expression" name="submarket.median_year_built" type="variable_definition">submarket.aggregate(building.year_built, function=median)</variable>
      <variable use="both" source="expression" name="submarket.non_residential_sqft_within_6_miles" type="variable_definition">(submarket.aggregate(building.disaggregate(bayarea.node.sum_non_residential_sqft_divide_by_1000_within_10000_meters,intermediates=[parcel]),function=mean))</variable>
      <variable use="both" source="expression" name="submarket.num_transit_within_one_mile" type="variable_definition">submarket.aggregate(residential_unit.disaggregate(bayarea.node.transit_within_1500_meters,intermediates=[parcel,building]),intermediates=[building])</variable>
      <variable use="both" source="expression" name="submarket.num_transit_within_quarter_mile" type="variable_definition">submarket.aggregate(residential_unit.disaggregate(bayarea.node.transit_within_400_meters,intermediates=[parcel,building]),intermediates=[building])</variable>
      <variable use="both" source="expression" name="submarket.number_of_households" type="variable_definition">submarket.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="submarket.population" type="variable_definition">submarket.aggregate(household.persons)</variable>
      <variable use="both" source="expression" name="submarket.proportion_hh_where_cars_exceed_persons" type="variable_definition">(safe_array_divide(submarket.aggregate(household.cars&gt;household.persons), submarket.number_of_agents(household)))</variable>
      <variable use="both" source="expression" name="submarket.proportion_hh_where_workers_exceed_cars" type="variable_definition">(safe_array_divide(submarket.aggregate(household.workers&gt;household.cars), submarket.number_of_agents(household)))</variable>
      <variable use="both" source="expression" name="submarket.proportion_single_person_households" type="variable_definition">(safe_array_divide(submarket.aggregate(household.persons==1), submarket.number_of_agents(household)))</variable>
      <variable use="both" source="expression" name="submarket.proportion_units_transit_within_quarter_mile" type="variable_definition">submarket.aggregate(residential_unit.disaggregate(bayarea.node.transit_type_1_within_400_meters,intermediates=[parcel,building]),intermediates=[building])/submarket.residential_units</variable>
      <variable use="both" source="expression" name="submarket.proportion_units_transit_within_third_mile" type="variable_definition">submarket.aggregate(residential_unit.disaggregate(bayarea.node.transit_type_1_within_536_meters,intermediates=[parcel,building]),intermediates=[building])/submarket.residential_units</variable>
      <variable use="both" source="expression" name="submarket.proportion_units_transit_within_two_thirds_mile" type="variable_definition">submarket.aggregate(residential_unit.disaggregate(bayarea.node.transit_type_1_within_1072_meters,intermediates=[parcel,building]),intermediates=[building])/submarket.residential_units</variable>
      <variable use="both" source="expression" name="submarket.ratio_submarket_avg_transit_to_auto_peak_total_access" type="variable_definition">submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.transitpeaktotal)),function=mean)/submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean)</variable>
      <variable use="both" source="expression" name="submarket.residential_units" type="variable_definition">submarket.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="submarket.san_francisco_submarket" type="variable_definition">submarket.county_id==38</variable>
      <variable use="both" source="expression" name="submarket.submarket_avg_auto_peak_total_access_between_1_and_5" type="variable_definition">submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean)*(submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean)&lt;5)*(submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean)&gt;1)</variable>
      <variable use="both" source="expression" name="submarket.submarket_avg_auto_peak_total_access_gt_5" type="variable_definition">(submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean))*(submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean)&gt;5)</variable>
      <variable use="both" source="expression" name="submarket.submarket_avg_auto_peak_total_access_up_to_5" type="variable_definition">submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean)*(submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean)&lt;5)</variable>
      <variable use="both" source="expression" name="submarket.submarket_avg_auto_peak_total_access" type="variable_definition">submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.autopeaktotal)),function=mean)</variable>
      <variable use="both" source="expression" name="submarket.submarket_avg_nonmotorized_retail_access" type="variable_definition">submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.nonmotorizedretail)),function=mean)</variable>
      <variable use="both" source="expression" name="submarket.submarket_avg_transit_peak_total_access" type="variable_definition">submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.transitpeaktotal)),function=mean)</variable>
      <variable use="both" source="expression" name="submarket.submarket_close_to_transit" type="variable_definition">submarket.within_half_mile_transit==1</variable>
      <variable use="both" source="expression" name="submarket.submarket_low_avg_transit_peak_total_access" type="variable_definition">submarket.aggregate(building.disaggregate(zone.disaggregate(zone_accessibility.transitpeaktotal)),function=mean)&lt;1</variable>
      <variable use="both" source="expression" name="submarket.submarket_median_sum_non_residential_sqft_within_500_meters" type="variable_definition">submarket.aggregate(building.disaggregate(bayarea.node.sum_non_residential_sqft_within_500_meters,intermediates=[parcel,building]), function=median)</variable>
      <variable use="both" source="expression" name="submarket.submarket_median_sum_residential_units_within_500_meters" type="variable_definition">submarket.aggregate(building.disaggregate(bayarea.node.sum_residential_units_within_500_meters,intermediates=[parcel,building]), function=median)</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_employees" type="variable_definition">superdistrict.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_households" type="variable_definition">superdistrict.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_multi_family_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units*building.building_type_id==3,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft, intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_average_unit_size" type="variable_definition">(superdistrict.aggregate(building.building_sqft - building.non_residential_sqft)*1.0)/superdistrict.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_avg_rent_altmethod" type="variable_definition">superdistrict.aggregate(residential_unit.rent,intermediates=[building],function=mean)</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_avg_rent" type="variable_definition">safe_array_divide(superdistrict.aggregate(residential_unit.rent,intermediates=[building]),superdistrict.aggregate(residential_unit.rent&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_avg_sale_price" type="variable_definition">safe_array_divide(superdistrict.aggregate(residential_unit.sale_price,intermediates=[building]),superdistrict.aggregate(residential_unit.sale_price&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_commercial_industrial_acres" type="variable_definition">superdistrict.aggregate(bayarea.parcel.parcel_acre*parcel.aggregate(building.non_residential_sqft&gt;0))</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_dwelling_units_mixed_use" type="variable_definition">superdistrict.aggregate(building.residential_units*(building.building_type_id&gt;11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_dwelling_units_multi_family" type="variable_definition">superdistrict.aggregate(building.residential_units*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_dwelling_units_single_family_attached" type="variable_definition">superdistrict.aggregate(building.residential_units*(building.building_type_id==2),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_dwelling_units_single_family_detatched" type="variable_definition">superdistrict.aggregate(building.residential_units*(building.building_type_id==1),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_dwelling_units_within_half_mile_transit" type="variable_definition">superdistrict.aggregate(building.residential_units * building.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_employed_residents" type="variable_definition">superdistrict.aggregate(household.workers, intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_employment_finance_professional" type="variable_definition">superdistrict.aggregate(establishment.employees*numpy.in1d(establishment.sector_id, [1, 2, 3]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_employment" type="variable_definition">superdistrict.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_establishments" type="variable_definition">superdistrict.aggregate(establishment.employees&gt;0,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_households" type="variable_definition">superdistrict.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_jobs_within_half_mile_transit" type="variable_definition">superdistrict.aggregate((establishment.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*establishment.employees),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_ln_median_income" type="variable_definition">ln_bounded(superdistrict.aggregate(household.income,intermediates=[building,parcel],function=median))</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_mixed_use_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units*(building.building_type_id&gt;11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_multi_family_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_big_box_retail" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_employment_focused_mixed_use" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==14),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_heavy_industrial" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==9),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_hotel" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==5),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_light_industrial" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==7),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_office" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==4),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_residential_focused_mixed_use" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==12),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_retail_focused_mixed_use" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==13),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_school" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==6),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_strip_mall_retail" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==10),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft_warehouse_industrial" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft*(building.building_type_id==8),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_non_residential_sqft" type="variable_definition">superdistrict.aggregate(building.non_residential_sqft,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_owner_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units*(building.tenure==2),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_population_age_lt_18" type="variable_definition">superdistrict.aggregate((person.age&lt;18)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_population_within_half_mile_transit" type="variable_definition">superdistrict.aggregate((household.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*household.persons),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_population" type="variable_definition">superdistrict.aggregate(household.persons, intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_rental_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units*(building.tenure==1),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_residential_acres" type="variable_definition">superdistrict.aggregate((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(building.residential_units&gt;0))</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_single_family_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units*(building.building_type_id&lt;3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_total_dwelling_units" type="variable_definition">superdistrict.aggregate(building.residential_units,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_urbanized_acres" type="variable_definition">superdistrict.aggregate((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(numpy.logical_or(building.residential_units&gt;0,building.non_residential_sqft&gt;0)))</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_hlcm_calib_target_expression" type="variable_definition">superdistrict.aggregate(submarket.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_ln_avg_nonres_rent" type="variable_definition">ln_bounded(safe_array_divide(superdistrict.aggregate(building.non_residential_rent),superdistrict.aggregate(building.non_residential_rent&gt;0)))</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_median_rent" type="variable_definition">superdistrict.aggregate(residential_unit.rent,intermediates=[building],function=median)</variable>
      <variable use="both" source="expression" name="superdistrict.superdistrict_population_age_65_plus" type="variable_definition">superdistrict.aggregate((person.age&gt;64)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="zone.avg_auto_peak_total_access" type="variable_definition">zone.disaggregate(zone_accessibility.autopeaktotal)</variable>
      <variable use="both" source="expression" name="zone.zone_commercial_industrial_acres" type="variable_definition">zone.aggregate(bayarea.parcel.parcel_acre*parcel.aggregate(building.non_residential_sqft&gt;0))</variable>
      <variable use="both" source="expression" name="zone.zone_county" type="variable_definition">zone.county_mtc</variable>
      <variable use="both" source="expression" name="zone.zone_employed_residents" type="variable_definition">zone.aggregate(building.aggregate(household.workers),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_employment_agriculture" type="variable_definition">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [4, 5]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_employment_finance_professional" type="variable_definition">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [1, 2, 3]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_employment_health_education" type="variable_definition">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [6, 8, 10, 13, 16, 18, 24, 26, 28]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_employment_manufacturing" type="variable_definition">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [11, 14, 17, 19, 21, 22, 25]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_employment_other" type="variable_definition">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [7, 20, 23, 27]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_employment_retail" type="variable_definition">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [9, 15]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_employment" type="variable_definition">zone.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_household_population" type="variable_definition">zone.aggregate(building.aggregate(household.persons),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_households_income_1" type="variable_definition">zone.aggregate(household.income&lt;30000,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_households_income_2" type="variable_definition">zone.aggregate((household.income&gt;29999)*(household.income&lt;60000),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_households_income_3" type="variable_definition">zone.aggregate((household.income&gt;59999)*(household.income&lt;100000),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_households_income_4" type="variable_definition">zone.aggregate(household.income&gt;100000,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_households" type="variable_definition">zone.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_multi_family_dwelling_units" type="variable_definition">zone.aggregate(building.residential_units*building.building_type_id==3,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_big_box_retail" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_employment_focused_mixed_use" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==14), intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_heavy_industrial" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==9), intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_hotel" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==5),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_light_industrial" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==7),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_office" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==4),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_residential_focused_mixed_use" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==12),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_retail_focused_mixed_use" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==13),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_school" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==6),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_strip_mall_retail" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==10),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft_warehouse_industrial" type="variable_definition">zone.aggregate(building.non_residential_sqft*(building.building_type_id==8),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_non_residential_sqft" type="variable_definition">zone.aggregate(building.non_residential_sqft, intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_0_to_4" type="variable_definition">zone.aggregate((person.age&lt;5)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_20_to_44" type="variable_definition">zone.aggregate((person.age&gt;19)*(person.age&lt;45)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_45_to_64" type="variable_definition">zone.aggregate((person.age&gt;44)*(person.age&lt;65)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_5_to_19" type="variable_definition">zone.aggregate((person.age&gt;5)*(person.age&lt;20)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_65_plus" type="variable_definition">zone.aggregate((person.age&gt;64)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_residential_acres" type="variable_definition">zone.aggregate((bayarea.parcel.parcel_acre)*(bayarea.parcel.parcel_acre&lt;5)*parcel.aggregate(building.residential_units&gt;0))</variable>
      <variable use="both" source="expression" name="zone.zone_share_population_62p" type="variable_definition">zone.aggregate((person.age&gt;61)*(person.gq==0),intermediates=[household,building,parcel])/zone.aggregate(household.persons,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_single_family_dwelling_units" type="variable_definition">zone.aggregate(building.residential_units*building.building_type_id&lt;3,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_sqft_per_employee" type="variable_definition">zone.aggregate(building.non_residential_sqft, intermediates=[parcel])/zone.aggregate(establishment.employees, intermediates=[building, parcel])</variable>
      <variable use="both" source="expression" name="zone.zone_total_population" type="variable_definition">zone.aggregate(building.aggregate(household.persons),intermediates=[parcel])+zone.gqpop</variable>
      <variable use="both" source="primary attribute" name="building.bldg_residential_units" type="variable_definition">building.residential_units</variable>
      <variable use="both" source="primary attribute" name="building.building_year_built" type="variable_definition">building.year_built</variable>
      <variable use="both" source="primary attribute" name="building.stories" type="variable_definition">building.stories</variable>
      <variable use="both" source="primary attribute" name="household.hh_cars" type="variable_definition">household.cars</variable>
      <variable use="both" source="primary attribute" name="household.hh_children" type="variable_definition">household.children</variable>
      <variable use="both" source="primary attribute" name="household.hh_income" type="variable_definition">household.income</variable>
      <variable use="both" source="primary attribute" name="household.ln_hh_income" type="variable_definition">ln_bounded(household.income)</variable>
      <variable use="both" source="primary attribute" name="residential_unit.ln_unit_sqft" type="variable_definition">ln_bounded(residential_unit.unit_sqft)</variable>
      <variable use="both" source="primary attribute" name="residential_unit.unit_bedrooms" type="variable_definition">residential_unit.bedrooms</variable>
      <variable use="both" source="primary attribute" name="residential_unit.unit_is_single_family" type="variable_definition">residential_unit.disaggregate(building.building_type_id==1)</variable>
      <variable use="both" source="primary attribute" name="residential_unit.unit_sale_price" type="variable_definition">residential_unit.sale_price</variable>
      <variable use="both" source="primary attribute" name="residential_unit.unit_sqft" type="variable_definition">residential_unit.unit_sqft</variable>
      <variable use="both" source="primary attribute" name="zone.zone_acres" type="variable_definition">zone.acres</variable>
      <variable use="both" source="primary attribute" name="zone.zone_district" type="variable_definition">zone.superd</variable>
      <variable use="model variable" source="expression" name="household.young_adults" type="variable_definition">(household.children==0) * numpy.logical_and(household.age_of_head &gt; 25, household.age_of_head &lt; 39)</variable>
      <variable use="model variable" source="expression" name="submarket.iv_ln_price_residual" type="variable_definition">bayarea.submarket.ln_price_residual</variable>
      <variable use="model variable" source="expression" name="submarket.iv_ln_rent_residual" type="variable_definition">bayarea.submarket.ln_rent_residual</variable>
      <variable use="model variable" source="expression" name="submarket.iv_price_residual" type="variable_definition">bayarea.submarket.price_residual</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_average_unit_size" type="variable_definition">(is_pda.aggregate(building.building_sqft - building.non_residential_sqft)*1.0)/is_pda.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_avg_rent_altmethod" type="variable_definition">is_pda.aggregate(residential_unit.rent,intermediates=[building],function=mean)</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_avg_rent" type="variable_definition">safe_array_divide(is_pda.aggregate(residential_unit.rent,intermediates=[building]),is_pda.aggregate(residential_unit.rent&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_avg_sale_price" type="variable_definition">safe_array_divide(is_pda.aggregate(residential_unit.sale_price,intermediates=[building]),is_pda.aggregate(residential_unit.sale_price&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_commercial_industrial_acres" type="variable_definition">is_pda.aggregate(bayarea.parcel.parcel_acre*parcel.aggregate(building.non_residential_sqft&gt;0))</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_dwelling_units_mixed_use" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id&gt;11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_dwelling_units_multi_family" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_dwelling_units_single_family_attached" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id==2),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_dwelling_units_single_family_detatched" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id==1),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_dwelling_units_within_half_mile_transit" type="variable_definition">is_pda.aggregate(building.residential_units * building.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_employed_residents" type="variable_definition">is_pda.aggregate(household.workers, intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_employment_finance_professional" type="variable_definition">is_pda.aggregate(establishment.employees*numpy.in1d(establishment.sector_id, [1, 2, 3]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_employment" type="variable_definition">is_pda.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_establishments" type="variable_definition">is_pda.aggregate(establishment.employees&gt;0,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_households" type="variable_definition">is_pda.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_jobs_within_half_mile_transit" type="variable_definition">is_pda.aggregate((establishment.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*establishment.employees),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_ln_median_income" type="variable_definition">ln_bounded(is_pda.aggregate(household.income,intermediates=[building,parcel],function=median))</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_mixed_use_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id&gt;11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_multi_family_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_big_box_retail" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_employment_focused_mixed_use" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==14),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_heavy_industrial" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==9),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_hotel" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==5),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_light_industrial" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==7),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_office" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==4),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_residential_focused_mixed_use" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==12),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_retail_focused_mixed_use" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==13),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_school" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==6),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_strip_mall_retail" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==10),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft_warehouse_industrial" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==8),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_non_residential_sqft" type="variable_definition">is_pda.aggregate(building.non_residential_sqft,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_owner_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.tenure==2),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_population_age_lt_18" type="variable_definition">is_pda.aggregate((person.age&lt;18)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_population_within_half_mile_transit" type="variable_definition">is_pda.aggregate((household.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*household.persons),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_population" type="variable_definition">is_pda.aggregate(household.persons, intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_rental_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.tenure==1),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_residential_acres" type="variable_definition">is_pda.aggregate((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(building.residential_units&gt;0))</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_single_family_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id&lt;3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_total_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_urbanized_acres" type="variable_definition">is_pda.aggregate((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(numpy.logical_or(building.residential_units&gt;0,building.non_residential_sqft&gt;0)))</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_hlcm_calib_target_expression" type="variable_definition">is_pda.aggregate(submarket.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_ln_avg_nonres_rent" type="variable_definition">ln_bounded(safe_array_divide(is_pda.aggregate(building.non_residential_rent),is_pda.aggregate(building.non_residential_rent&gt;0)))</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_median_rent" type="variable_definition">is_pda.aggregate(residential_unit.rent,intermediates=[building],function=median)</variable>
      <variable use="both" source="expression" name="is_pda.is_pda_population_age_65_plus" type="variable_definition">is_pda.aggregate((person.age&gt;64)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_average_unit_size" type="variable_definition">(is_pda.aggregate(building.building_sqft - building.non_residential_sqft)*1.0)/is_pda.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_avg_rent_altmethod" type="variable_definition">is_pda.aggregate(residential_unit.rent,intermediates=[building],function=mean)</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_avg_rent" type="variable_definition">safe_array_divide(is_pda.aggregate(residential_unit.rent,intermediates=[building]),is_pda.aggregate(residential_unit.rent&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_avg_sale_price" type="variable_definition">safe_array_divide(is_pda.aggregate(residential_unit.sale_price,intermediates=[building]),is_pda.aggregate(residential_unit.sale_price&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_commercial_industrial_acres" type="variable_definition">is_pda.aggregate(bayarea.parcel.parcel_acre*parcel.aggregate(building.non_residential_sqft&gt;0))</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_dwelling_units_mixed_use" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id&gt;11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_dwelling_units_multi_family" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_dwelling_units_single_family_attached" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id==2),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_dwelling_units_single_family_detatched" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id==1),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_dwelling_units_within_half_mile_transit" type="variable_definition">is_pda.aggregate(building.residential_units * building.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_employed_residents" type="variable_definition">is_pda.aggregate(household.workers, intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_employment_finance_professional" type="variable_definition">is_pda.aggregate(establishment.employees*numpy.in1d(establishment.sector_id, [1, 2, 3]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_employment" type="variable_definition">is_pda.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_establishments" type="variable_definition">is_pda.aggregate(establishment.employees&gt;0,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_households" type="variable_definition">is_pda.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_jobs_within_half_mile_transit" type="variable_definition">is_pda.aggregate((establishment.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*establishment.employees),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_ln_median_income" type="variable_definition">ln_bounded(is_pda.aggregate(household.income,intermediates=[building,parcel],function=median))</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_mixed_use_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id&gt;11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_multi_family_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_big_box_retail" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==11),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_employment_focused_mixed_use" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==14),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_heavy_industrial" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==9),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_hotel" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==5),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_light_industrial" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==7),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_office" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==4),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_residential_focused_mixed_use" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==12),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_retail_focused_mixed_use" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==13),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_school" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==6),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_strip_mall_retail" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==10),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft_warehouse_industrial" type="variable_definition">is_pda.aggregate(building.non_residential_sqft*(building.building_type_id==8),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_non_residential_sqft" type="variable_definition">is_pda.aggregate(building.non_residential_sqft,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_owner_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.tenure==2),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_population_age_lt_18" type="variable_definition">is_pda.aggregate((person.age&lt;18)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_population_within_half_mile_transit" type="variable_definition">is_pda.aggregate((household.disaggregate(bayarea.node.transit_within_800_meters,intermediates=[parcel,building])*household.persons),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_population" type="variable_definition">is_pda.aggregate(household.persons, intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_rental_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.tenure==1),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_residential_acres" type="variable_definition">is_pda.aggregate((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(building.residential_units&gt;0))</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_single_family_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units*(building.building_type_id&lt;3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_total_dwelling_units" type="variable_definition">is_pda.aggregate(building.residential_units,intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_urbanized_acres" type="variable_definition">is_pda.aggregate((bayarea.parcel.parcel_acre)*((bayarea.parcel.parcel_acre)&lt;5)*parcel.aggregate(numpy.logical_or(building.residential_units&gt;0,building.non_residential_sqft&gt;0)))</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_hlcm_calib_target_expression" type="variable_definition">is_pda.aggregate(submarket.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_ln_avg_nonres_rent" type="variable_definition">ln_bounded(safe_array_divide(is_pda.aggregate(building.non_residential_rent),is_pda.aggregate(building.non_residential_rent&gt;0)))</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_median_rent" type="variable_definition">is_pda.aggregate(residential_unit.rent,intermediates=[building],function=median)</variable>
      <variable use="both" source="expression" name="is_tpp.is_tpp_population_age_65_plus" type="variable_definition">is_pda.aggregate((person.age&gt;64)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="building_type.building_type_population" type="variable_definition">building_type.aggregate(household.persons)</variable>
      <variable use="both" source="expression" name="building_type.building_type_population_age_0_to_4" type="variable_definition">building_type.aggregate((person.age&lt;5)*(person.gq==0),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="building_type.building_type_population_age_20_to_44" type="variable_definition">building_type.aggregate((person.age&gt;19)*(person.age&lt;45)*(person.gq==0),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="building_type.building_type_population_age_45_to_64" type="variable_definition">building_type.aggregate((person.age&gt;44)*(person.age&lt;65)*(person.gq==0),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="building_type.building_type_population_age_5_to_19" type="variable_definition">building_type.aggregate((person.age&gt;5)*(person.age&lt;20)*(person.gq==0),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="building_type.building_type_population_age_65_plus" type="variable_definition">building_type.aggregate((person.age&gt;64)*(person.gq==0),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="building_type.building_type_households" type="variable_definition">building_type.aggregate(building.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="building_type.building_type_total_dwelling_units" type="variable_definition">building_type.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="building_type.building_type_owner_dwelling_units" type="variable_definition">building_type.aggregate(building.residential_units*(building.tenure==2))</variable>
      <variable use="both" source="expression" name="building_type.building_type_rental_dwelling_units" type="variable_definition">building_type.aggregate(building.residential_units*(building.tenure==1))</variable>
      <variable use="both" source="expression" name="building_type.building_type_average_unit_size" type="variable_definition">(building_type.aggregate(building.building_sqft - building.non_residential_sqft)*1.0)/building_type.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="building_type.building_type_avg_rent_altmethod" type="variable_definition">building_type.aggregate(residential_unit.rent,intermediates=[building],function=mean)</variable>
      <variable use="both" source="expression" name="building_type.building_type_avg_rent" type="variable_definition">safe_array_divide(building_type.aggregate(residential_unit.rent,intermediates=[building]),building_type.aggregate(residential_unit.rent&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="building_type.building_type_avg_sale_price" type="variable_definition">safe_array_divide(building_type.aggregate(residential_unit.sale_price,intermediates=[building]),building_type.aggregate(residential_unit.sale_price&gt;0,intermediates=[building]))</variable>
      <variable use="both" source="expression" name="area_permutation.total_employment" type="variable_definition">area_permutation.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.total_households" type="variable_definition">area_permutation.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.total_population" type="variable_definition">area_permutation.aggregate(person.person_id&gt;0, intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.employed_residents" type="variable_definition">area_permutation.aggregate(building.aggregate(household.workers),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.single_family_units" type="variable_definition">area_permutation.aggregate(building.residential_units*(building.building_type_id&lt;3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.single_family_households" type="variable_definition">area_permutation.aggregate(building.number_of_agents(household)*(building.building_type_id&lt;3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.multi_family_units" type="variable_definition">area_permutation.aggregate(building.residential_units*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.multi_family_households" type="variable_definition">area_permutation.aggregate(building.number_of_agents(household)*(building.building_type_id==3),intermediates=[parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.total_employment" type="variable_definition">area_permutation.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.age_05_19" type="variable_definition">area_permutation.aggregate((person.age&gt;=5)*(person.age&lt;=19)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.age_20_44" type="variable_definition">area_permutation.aggregate((person.age&gt;=20)*(person.age&lt;=44)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.age_45_64" type="variable_definition">area_permutation.aggregate((person.age&gt;=45)*(person.age&lt;=64)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.age_65_plus" type="variable_definition">area_permutation.aggregate((person.age&gt;=65)*(person.gq==0),intermediates=[household,building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_10_art_rec_other" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [6, 10, 13, 24, 26]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_02_construction" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [20]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_01_farm_nat_res" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [4, 5]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_07_fin_lease" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [2, 12]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_11_government" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [7]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_09_health_educ" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [8, 16, 18, 28]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_06_information" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [23]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_03_manuf_whole" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [14, 21, 22, 25]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_08_prof" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [1, 3]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_04_retail" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [9, 15]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_05_transp_ware_util" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [11, 17, 19]),intermediates=[building,parcel])</variable>
      <variable use="both" source="expression" name="area_permutation.empl_99_unclassified" type="variable_definition">area_permutation.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [27]),intermediates=[building,parcel])</variable>
    </expression_library>
    <dataset_pool_configuration type="class" hidden="True">
      <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
      <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
      <argument name="package_order" type="list">['bayarea','urbansim_parcel','urbansim','opus_core']</argument>
    </dataset_pool_configuration>
    <available_datasets type="list">['parcel','building','household_x_building','zone','faz','gridcell','city','county','alldata','node','household_x_submarket','residential_unit','submarket','superdistrict','schooldistrict','transit_station','zone_accessibility','costar','employment_submarket','establishment_x_employment_submarket','establishment','jurisdiction','county','city','alldata','devcalib_geography', 'is_pda','area_permutation']</available_datasets>
    <spatial_datasets type="list">['parcel','zone','faz','gridcell','city','county','node','alldata','superdistrict','is_pda']</spatial_datasets>
  </general>
  <data_manager>
    <tool_library setexpanded="True">
      <tool_group name="opus_data_import_export_tools" setexpanded="True">
        <tool name="sql_data_to_opus_tool">
          <params>
            <param name="database_server_connection" param_type="db_connection_hook" required="True">estimation_database_server</param>
            <param name="database_name" param_type="string" required="True">bayarea</param>
            <param name="table_name" param_type="string" required="True">zones</param>
            <param name="opus_data_directory" param_type="dir_path" required="True">/workspace/opus/data/bay_area_parcel/base_year_data</param>
            <param name="opus_data_year" param_type="string" required="True">2010</param>
            <param name="overwrite" param_type="boolean" required="True">True</param>
          </params>
        </tool>
      </tool_group>
    </tool_library>
  </data_manager>
  <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model name="residential_unit_sale_price_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.real_estate_price_model</class_module>
            <class_name>RealEstatePriceModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="model_name" parser_action="quote_string" type="string">Residential Unit Sale Price Model</argument>
            <name hidden="True" name="name" type="string">RealEstatePriceModel</name>
            <argument name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string" model_dependency_type="variable">ln_sale_price=ln(residential_unit.sale_price)</argument>
            <argument name="filter_attribute" parser_action="quote_string" type="string" model_dependency_type="variable">residential_unit_id&gt;0</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="estimate_config" type="string">Resources({'save_predicted_values_and_errors': False})</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">residential_unit_sale_price_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">residential_unit_sale_price_model_coefficients</argument>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument hidden="True" name="coefficients" type="string">coefficients</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">residential_unit</argument>
            <argument name="outcome_with_inital_error" type="string">False</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument name="run_config" type="string">Resources({'exclude_outliers_from_initial_error': True, 'outlier_is_less_than':3, 'outlier_is_greater_than': 7})</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">residential_unit_sale_price_model_specification</argument>
            <argument name="filter_variable" parser_action="quote_string" type="string" model_dependency_type="variable">(residential_unit.sale_price&gt;10000)*(residential_unit.sale_price&lt;2000000)</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">residential_unit</argument>
            <argument name="threshold" type="integer">0</argument>
            <output hidden="True" name="output" type="string">(specification, index)</output>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string" model_dependency_type="variable">ln_sale_price=ln(residential_unit.sale_price)</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">residential_unit</argument>
            <argument hidden="True" name="index" type="string">index</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.estimate_linear_regression</argument>
            <output hidden="True" name="output" type="string">(coefficients, dummy)</output>
          </estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-1" type="submodel">
            <description type="string">submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="residential_unit.built_pre_1930"/>
              <variable_spec name="constant"/>
              <variable_spec name="residential_unit.ln_average_income_within_500_meters"/>
              <variable_spec name="residential_unit.ln_lot_sqft"/>
              <variable_spec name="residential_unit.ln_unit_sqft"/>
              <variable_spec name="residential_unit.transit_peak_total_access"/>
              <variable_spec name="residential_unit.transit_within_half_mile"/>
              <variable_spec name="residential_unit.unit_is_single_family"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="non_residential_rent_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.real_estate_price_model</class_module>
            <class_name>RealEstatePriceModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="model_name" parser_action="quote_string" type="string">Non-Residential Rent Model</argument>
            <name hidden="True" name="name" type="string">RealEstatePriceModel</name>
            <argument name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string" model_dependency_type="variable">ln_non_residential_rent=ln(building.non_residential_rent)</argument>
            <argument name="filter_attribute" parser_action="quote_string" type="string" model_dependency_type="variable">building.building_type_id&gt;3</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="estimate_config" type="string">Resources({'save_predicted_values_and_errors': False})</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">non_residential_rent_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">non_residential_rent_model_coefficients</argument>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument hidden="True" name="coefficients" type="string">coefficients</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">building</argument>
            <argument name="outcome_with_inital_error" type="string">False</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument name="run_config" type="string">Resources({})</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">non_residential_rent_model_specification</argument>
            <argument name="filter_variable" parser_action="quote_string" type="string" model_dependency_type="variable">building.disaggregate(parcel.aggregate(costar.averageweightedrent,function=mean))&gt;0</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">building</argument>
            <argument name="threshold" type="integer">0</argument>
            <output hidden="True" name="output" type="string">(specification, index)</output>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string" model_dependency_type="variable">ln_rent=ln(building.disaggregate(parcel.aggregate(costar.averageweightedrent,function=mean)))</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">building</argument>
            <argument hidden="True" name="index" type="string">index</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.estimate_linear_regression</argument>
            <output hidden="True" name="output" type="string">(coefficients, dummy)</output>
          </estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="building.bdlg_in_san_francisco"/>
              <variable_spec name="building.bdlg_type_hotel"/>
              <variable_spec name="building.bdlg_type_mixed_use"/>
              <variable_spec name="building.bdlg_type_office"/>
              <variable_spec name="building.bdlg_type_strip_mall"/>
              <variable_spec name="building.bldg_avg_auto_peak_total_access"/>
              <variable_spec name="building.bldg_ln_average_income_within_500_meters"/>
              <variable_spec name="constant"/>
              <variable_spec name="building.stories"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="residential_unit_rent_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.real_estate_price_model</class_module>
            <class_name>RealEstatePriceModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="model_name" parser_action="quote_string" type="string">Residential Rent Model</argument>
            <name hidden="True" name="name" type="string">RealEstatePriceModel</name>
            <argument name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string" model_dependency_type="variable">ln_rent=ln(residential_unit.rent)</argument>
            <argument name="filter_attribute" parser_action="quote_string" type="string" model_dependency_type="variable">residential_unit_id&gt;0</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="estimate_config" type="string">Resources({'save_predicted_values_and_errors': False})</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">residential_unit_rent_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">residential_unit_rent_model_coefficients</argument>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument hidden="True" name="coefficients" type="string">coefficients</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">residential_unit</argument>
            <argument name="outcome_with_inital_error" type="string">False</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument name="run_config" type="string">Resources({'exclude_outliers_from_initial_error': True, 'outlier_is_less_than':3, 'outlier_is_greater_than': 7})</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">residential_unit_rent_model_specification</argument>
            <argument name="filter_variable" parser_action="quote_string" type="string" model_dependency_type="variable">residential_unit.rent&gt;0</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">residential_unit</argument>
            <argument name="threshold" type="integer">0</argument>
            <output hidden="True" name="output" type="string">(specification, index)</output>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument config_name="outcome_attribute" name="dependent_variable" parser_action="quote_string" type="string" model_dependency_type="variable">ln_rent=ln(residential_unit.rent)</argument>
            <argument name="dataset" type="string" model_dependency_type="dataset">residential_unit</argument>
            <argument hidden="True" name="index" type="string">index</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.estimate_linear_regression</argument>
            <output hidden="True" name="output" type="string">(coefficients, dummy)</output>
          </estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-1" type="submodel">
            <description type="string">submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="residential_unit.built_pre_1930"/>
              <variable_spec name="constant"/>
              <variable_spec name="residential_unit.ln_average_income_within_500_meters"/>
              <variable_spec name="residential_unit.ln_unit_sqft"/>
              <variable_spec name="residential_unit.transit_peak_total_access"/>
              <variable_spec name="residential_unit.transit_within_half_mile"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="developer_model_Baseline" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.proposal.developer_model</class_module>
            <class_name type="string">DeveloperModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeveloperModel</name>
            <argument name="scenario" type="string">"Baseline"</argument>
          </init>
          <run type="dictionary"/>
        </structure>
      </model>
      <model name="developer_model_No_Project" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.proposal.developer_model</class_module>
            <class_name type="string">DeveloperModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeveloperModel</name>
            <argument name="scenario" type="string">"No Project V2"</argument>
          </init>
          <run type="dictionary"/>
        </structure>
      </model>
      <model name="developer_model_Transit_Priority" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.proposal.developer_model</class_module>
            <class_name type="string">DeveloperModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeveloperModel</name>
            <argument name="scenario" type="string">"Transit Priority"</argument>
          </init>
          <run type="dictionary"/>
        </structure>
      </model>
      <model name="developer_model_Studio" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.proposal.developer_model</class_module>
            <class_name type="string">DeveloperModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeveloperModel</name>
            <argument name="scenario" type="string">"Studio"</argument>
          </init>
          <run type="dictionary"/>
        </structure>
      </model>
      <model name="developer_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.proposal.developer_model</class_module>
            <class_name type="string">DeveloperModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeveloperModel</name>
          </init>
          <run type="dictionary"/>
        </structure>
      </model>
      <model name="developer_model_Preferred" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.proposal.developer_model</class_module>
            <class_name type="string">DeveloperModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeveloperModel</name>
            <argument name="scenario" type="string">"Preferred V1"</argument>
          </init>
          <run type="dictionary"/>
        </structure>
      </model>
      <model name="submarket_household_location_choice_model_owner" type="model">
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':250000}</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
            <argument name="agents_index" type="string">hrm_index</argument>
            <argument convert_blank_to_none="True" name="agents_filter" type="string">'household.tenure==2'</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <init type="dictionary">
            <argument name="model_name" parser_action="quote_string" type="string">Submarket HLCM for Owners</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"/>
            <argument name="variable_package" parser_action="quote_string" type="string">bayarea</argument>
            <argument convert_blank_to_none="True" name="location_id_string" parser_action="quote_string" type="string">bayarea.household.submarket_id</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string">bayarea.household.income_4_person_3</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string">submarket.residential_units-submarket.number_of_households</argument>
            <argument name="filter" parser_action="quote_string" type="string">(submarket.tenure_id==2)*(submarket.schooldistrict&lt;99)*submarket.avg_sale_price&gt;0</argument>
            <argument name="estimation_weight_string" parser_action="quote_string" type="string">submarket.residential_units</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.lottery_choices</argument>
            <argument name="number_of_agents_string" parser_action="quote_string" type="string">number_of_households</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key name="price_coef_name" type="string">ln_avg_sale_price</key>
              <!--
	      <key name="bfgs_kwargs" type="string">{'factr':2e13}</key>
	      -->
            </argument>
            <argument name="location_set" type="string">submarket</argument>
            <argument convert_blank_to_none="True" name="estimation_size_agents" type="string">.02</argument>
            <argument convert_blank_to_none="True" name="sampler" parser_action="quote_string" type="string"/>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string">submarket.residential_units</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">50</argument>
            <argument name="estimate_config" type="string">Resources({})</argument>
            <name name="name" type="string">HouseholdLocationChoiceModel</name>
          </init>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.household_location_choice_model</class_module>
            <class_name>HouseholdLocationChoiceModel</class_name>
          </import>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">submarket_household_location_choice_model_owner_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">submarket_household_location_choice_model_owner_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.333333333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">submarket_household_location_choice_model_owner_specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string">'household.tenure==2'</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel name="lowinc_hhs1" submodel_id="1" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowinc_hhs1</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.proportion_single_person_households"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowmidinc_hhs1" submodel_id="2" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowmidinc_hhs1</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.proportion_single_person_households"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highmidinc_hhs1" submodel_id="3" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highmidinc_hhs1</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.proportion_single_person_households"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highinc_hhs1" submodel_id="4" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highinc_hhs1</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.proportion_single_person_households"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowinc_hhs2" submodel_id="5" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowinc_hhs2</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowmidinc_hhs2" submodel_id="6" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowmidinc_hhs2</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highmidinc_hhs2" submodel_id="7" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highmidinc_hhs2</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highinc_hhs2" submodel_id="8" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highinc_hhs2</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowinc_hhs3plus" submodel_id="9" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowinc_hhs3plus</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowmidinc_hhs3plus" submodel_id="10" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowmidinc_hhs3plus</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highmidinc_hhs3plus" submodel_id="11" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highmidinc_hhs3plus</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highinc_hhs3plus" submodel_id="12" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highinc_hhs3plus</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_sale_price"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_age_of_head"/>
              <variable_spec name="submarket.median_household_size"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="submarket_household_location_choice_model_renter" type="model">
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':250000}</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
            <argument name="agents_index" type="string">hrm_index</argument>
            <argument convert_blank_to_none="True" name="agents_filter" type="string">'household.tenure==1'</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <init type="dictionary">
            <argument name="model_name" parser_action="quote_string" type="string">Submarket HLCM for Renters</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string"/>
            <argument name="variable_package" parser_action="quote_string" type="string">bayarea</argument>
            <argument convert_blank_to_none="True" name="location_id_string" parser_action="quote_string" type="string">bayarea.household.submarket_id</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string">bayarea.household.income_4_person_3</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string">submarket.residential_units-submarket.number_of_households</argument>
            <argument name="filter" parser_action="quote_string" type="string">(submarket.tenure_id==1)*(submarket.schooldistrict&lt;99)*submarket.avg_rent&gt;0</argument>
            <argument name="estimation_weight_string" parser_action="quote_string" type="string">submarket.residential_units</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.lottery_choices</argument>
            <argument name="number_of_agents_string" parser_action="quote_string" type="string">number_of_households</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">3</key>
              <key name="price_coef_name" type="string">ln_avg_rent</key>
              <!--
	      <key name="bfgs_kwargs" type="string">{'factr':2e13}</key>
	      -->
            </argument>
            <argument name="location_set" type="string">submarket</argument>
            <argument convert_blank_to_none="True" name="estimation_size_agents" type="string">.02</argument>
            <argument convert_blank_to_none="True" name="sampler" parser_action="quote_string" type="string"/>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string">submarket.residential_units</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="sample_size_locations" type="integer">50</argument>
            <argument name="estimate_config" type="string">Resources({})</argument>
            <name name="name" type="string">HouseholdLocationChoiceModel</name>
          </init>
          <import name="import" type="dictionary">
            <class_module>urbansim.models.household_location_choice_model</class_module>
            <class_name>HouseholdLocationChoiceModel</class_name>
          </import>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, _)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string">index</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">submarket_household_location_choice_model_renter_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">submarket_household_location_choice_model_renter_specification</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string">(specification, index)</output>
            <argument name="portion_to_unplace" type="float">0.333333333333</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">submarket_household_location_choice_model_renter_specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string">'household.tenure==1'</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <name name="name" type="string">prepare_for_estimate</name>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary" inherit_parent_values="False">
          <submodel name="lowinc_hhs1" submodel_id="1" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowinc_hhs1</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowmidinc_hhs1" submodel_id="2" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowmidinc_hhs1</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highmidinc_hhs1" submodel_id="3" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highmidinc_hhs1</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highinc_hhs1" submodel_id="4" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highinc_hhs1</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowinc_hhs2" submodel_id="5" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowinc_hhs2</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowmidinc_hhs2" submodel_id="6" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowmidinc_hhs2</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highmidinc_hhs2" submodel_id="7" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highmidinc_hhs2</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highinc_hhs2" submodel_id="8" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highinc_hhs2</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowinc_hhs3plus" submodel_id="9" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowinc_hhs3plus</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="lowmidinc_hhs3plus" submodel_id="10" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">lowmidinc_hhs3plus</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highmidinc_hhs3plus" submodel_id="11" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highmidinc_hhs3plus</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
          <submodel name="highinc_hhs3plus" submodel_id="12" type="submodel" hidden="Children" inherit_parent_values="False">
            <description type="string">highinc_hhs3plus</description>
            <variable_list type="variable_list">
              <variable_spec name="submarket.is_single_family_submarket"/>
              <variable_spec name="submarket.ln_avg_rent"/>
              <variable_spec name="submarket.ln_median_income"/>
              <variable_spec name="submarket.ln_median_lot_sqft"/>
              <variable_spec name="submarket.ln_median_sqft"/>
              <variable_spec name="submarket.ln_residential_units"/>
              <variable_spec name="submarket.median_year_built"/>
              <variable_spec name="submarket.submarket_avg_auto_peak_total_access"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="business_location_choice_model_groups" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <group_by_attribute type="list">('home_based_status', 'name')</group_by_attribute>
          <import name="import" type="dictionary" hidden="True">
            <class_module type="string">urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="model_name" parser_action="quote_string" type="string">business_location_choice_model_groups</argument>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">establishment.home_based_status</argument>
            <argument convert_blank_to_none="True" name="location_id_string" parser_action="quote_string" type="string">bayarea.establishment.employment_submarket_id</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" type="string" parser_action="quote_string" model_dependency_type="variable"/>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <!--
            <argument name="capacity_string" parser_action="quote_string" type="string" model_dependency_type="variable">'clip_to_zero((employment_submarket.aggregate(building.non_residential_sqft)/250)-employment_submarket.aggregate(building.aggregate(establishment.employees)))'</argument>
	    -->
            <argument name="capacity_string" parser_action="quote_string" type="string" model_dependency_type="variable">'bayarea.employment_submarket.vacant_job_spaces'</argument>
            <argument convert_blank_to_none="True" name="estimation_weight_string" parser_action="quote_string" type="string" model_dependency_type="variable">'bayarea.employment_submarket.total_job_spaces'</argument>
            <argument convert_blank_to_none="True" name="number_of_units_string" parser_action="quote_string" type="string" model_dependency_type="variable">'bayarea.employment_submarket.total_job_spaces'</argument>
            <argument convert_blank_to_none="True" name="number_of_agents_string" parser_action="quote_string" type="string" model_dependency_type="variable">'bayarea.employment_submarket.employees'</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable">(establishment.sector_id-618312)</argument>
            <argument name="dataset_pool" type="string" hidden="True">dataset_pool</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.lottery_choices</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="filter" type="string" model_dependency_type="variable"/>
            <argument name="variable_package" parser_action="quote_string" type="string">bayarea</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">5</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string" model_dependency_type="variable"/>
            </argument>
            <argument name="location_set" type="string" model_dependency_type="dataset">employment_submarket</argument>
            <argument name="estimation_size_agents" type="float">.5</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" parser_action="quote_string" name="simulation_weight_string" type="string"/>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="sample_size_locations" type="integer">50</argument>
            <name name="name" type="string" hidden="True">EmploymentLocationChoiceModel</name>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string" hidden="True">(specification, coefficients)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">employment_location_choice_model_coefficients</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">employment_location_choice_model_specification</argument>
            <name name="name" type="string" hidden="True">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">establishment</argument>
            <argument name="specification" type="string" hidden="True">specification</argument>
            <argument name="maximum_runs" type="integer">5</argument>
            <argument name="agents_index" type="string" hidden="True">brm_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string" hidden="True">debuglevel</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <output name="output" type="string" hidden="True">(specification, index)</output>
            <argument name="portion_to_unplace" type="integer">0</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">employment_location_choice_model_specification</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">establishment</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="filter" type="string" parser_action="quote_string" model_dependency_type="variable"/>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string" model_dependency_type="table">establishments</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <name name="name" type="string" hidden="True">prepare_for_estimate</name>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string" hidden="True">(coefficients, _)</output>
            <argument name="specification" type="string" hidden="True">specification</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">establishment</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="agents_index" type="string" hidden="True">index</argument>
            <argument name="debuglevel" type="string" hidden="True">debuglevel</argument>
          </estimate>
        </structure>
        <specification type="dictionary">
          <submodel_group name="home_based" type="submodel_group">
            <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_residential_units_esubmarket"/>
              </variable_list>
            </submodel>
          </submodel_group>
          <submodel_group name="non_home_based" type="submodel_group">
            <submodel hidden="Children" name="prof" submodel_id="1" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="fire" submodel_id="2" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="serv_bus" submodel_id="3" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="ag" submodel_id="4" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="natres" submodel_id="5" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="art_rec" submodel_id="6" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="gov" submodel_id="7" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="ed_oth" submodel_id="8" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="ret_reg" submodel_id="9" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="eat" submodel_id="10" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="logis" submodel_id="11" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="lease" submodel_id="12" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="serve_soc" submodel_id="13" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="man_hvy" submodel_id="14" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="ret_loc" submodel_id="15" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="health" submodel_id="16" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="transp" submodel_id="17" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="ed_high" submodel_id="18" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="util" submodel_id="19" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="constr" submodel_id="20" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="man_bio" submodel_id="21" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="man_lgt" submodel_id="22" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="info" submodel_id="23" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="hotel" submodel_id="24" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="man_tech" submodel_id="25" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="serv_pers" submodel_id="26" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="unclass" submodel_id="27" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
            <submodel hidden="Children" name="ed_k12" submodel_id="28" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
                <variable_spec name="employment_submarket.is_office_esubmarket"/>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
      <model name="business_location_choice_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.agent_location_choice_model</class_module>
            <class_name type="string">AgentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">AgentLocationChoiceModel</name>
            <argument name="location_set" type="string" model_dependency_type="dataset">employment_submarket</argument>
            <argument convert_blank_to_none="True" name="sampler" parser_action="quote_string" type="string"/>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.lottery_choices</argument>
            <!--
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">safe_array_divide(employment_submarket.aggregate(building.non_residential_rent),employment_submarket.aggregate(building.non_residential_rent&gt;0))&gt;0</argument>
	    -->
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">employment_submarket.aggregate(building.non_residential_rent)&gt;0</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable">(sector_id-618312)</argument>
            <argument convert_blank_to_none="True" name="location_id_string" parser_action="quote_string" type="string" model_dependency_type="variable">bayarea.establishment.employment_submarket_id</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string" model_dependency_type="variable">bayarea.employment_submarket.vacant_job_spaces</argument>
            <argument convert_blank_to_none="True" name="estimation_weight_string" parser_action="quote_string" type="string" model_dependency_type="variable">bayarea.employment_submarket.total_job_spaces</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Establishment Location Choice Model</argument>
            <argument name="short_name" parser_action="quote_string" type="string">ESTLCM</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">bayarea</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">50</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"/>
              <key name="compute_capacity_flag" type="boolean">True</key>
              <key name="capacity_string" type="string" model_dependency_type="variable">bayarea.employment_submarket.vacant_job_spaces</key>
              <key convert_blank_to_none="True" name="number_of_units_string" type="string" model_dependency_type="variable">bayarea.employment_submarket.total_job_spaces</key>
              <key convert_blank_to_none="True" name="agent_units_string" type="string" model_dependency_type="variable">establishment.employees</key>
              <key name="lottery_max_iterations" type="integer">3</key>
              <key name="price_coef_name" type="string">ln_avg_nonres_rent</key>
              <!--
	      <key name="bfgs_kwargs" type="string">{'factr':2e13}</key>
	      -->
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key convert_blank_to_none="True" name="weights_for_estimation_string" type="string" model_dependency_type="variable"/>
              <key name="sample_size_locations" type="integer">50</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"/>
              <key name="estimation_size_agents" type="float">.5</key>
            </argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(alcm_specification, alcm_index)</output>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">business_location_choice_model_specification</argument>
            <argument name="agent_set" type="string" model_dependency_type="dataset">establishment</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string" model_dependency_type="table">establishments</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument convert_blank_to_none="True" name="index_to_unplace" type="string"/>
            <argument name="join_datasets" type="boolean">True</argument>
            <argument name="portion_to_unplace" type="string">1.0</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">establishment.building_id&gt;0</argument>
            <argument convert_blank_to_none="True" name="location_id_variable" parser_action="quote_string" type="string" model_dependency_type="variable">bayarea.establishment.employment_submarket_id</argument>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(alcm_coefficients, dummy)</output>
            <argument name="agent_set" type="string" model_dependency_type="dataset">establishment</argument>
            <argument name="agents_index" type="string">alcm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
          </estimate>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(alcm_specification, alcm_coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">business_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">business_location_choice_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string" model_dependency_type="dataset">establishment</argument>
            <argument hidden="True" name="agents_index" convert_blank_to_none="True" type="string">brm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">alcm_coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">alcm_specification</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="prof" submodel_id="1" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_1"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="fire" submodel_id="2" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_2"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="serv_bus" submodel_id="3" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_3"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="ag" submodel_id="4" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_4"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="natres" submodel_id="5" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_5"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="art_rec" submodel_id="6" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_6"/>
            </variable_list>
          </submodel>
          <!--<submodel hidden="Children" name="gov" submodel_id="7" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_7"/>
            </variable_list>
          </submodel>-->
          <!--<submodel hidden="Children" name="ed_oth" submodel_id="8" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_8"/>
            </variable_list>
          </submodel>-->
          <submodel hidden="Children" name="ret_reg" submodel_id="9" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_9"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="eat" submodel_id="10" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_10"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="logis" submodel_id="11" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_11"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="lease" submodel_id="12" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_12"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="serve_soc" submodel_id="13" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_13"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="man_hvy" submodel_id="14" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_auto_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_14"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="ret_loc" submodel_id="15" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_15"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="health" submodel_id="16" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_16"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="transp" submodel_id="17" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_auto_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_17"/>
            </variable_list>
          </submodel>
          <!--<submodel hidden="Children" name="ed_high" submodel_id="18" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_18"/>
            </variable_list>
          </submodel>-->
          <submodel hidden="Children" name="util" submodel_id="19" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_auto_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_19"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="constr" submodel_id="20" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_auto_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_20"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="man_bio" submodel_id="21" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_21"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="man_lgt" submodel_id="22" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_auto_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_22"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="info" submodel_id="23" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_23"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="hotel" submodel_id="24" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_24"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="man_tech" submodel_id="25" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_25"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="serv_pers" submodel_id="26" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_26"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="unclass" submodel_id="27" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_27"/>
            </variable_list>
          </submodel>
          <!--<submodel hidden="Children" name="ed_k12" submodel_id="28" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="employment_submarket.esubmarket_avg_transit_peak_total_access"/>
              <variable_spec name="employment_submarket.esubmarket_close_to_transit"/>
              <variable_spec name="employment_submarket.esubmarket_ln_residential_units_within_walking_distance"/>
              <variable_spec name="employment_submarket.is_office_esubmarket"/>
              <variable_spec name="employment_submarket.ln_avg_nonres_rent"/>
              <variable_spec name="employment_submarket.ln_jobs_in_jurisdiction"/>
              <variable_spec name="employment_submarket.ln_non_residential_sqft_esubmarket"/>
              <variable_spec name="employment_submarket.share_jobs_sector_28"/>
            </variable_list>
          </submodel>-->
        </specification>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="household_allocation_to_building_model" type="model">
        <dependencies type="list">['household_relocation_model']</dependencies>
        <structure type="dictionary">
          <estimate type="dictionary">
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
            <argument name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
          </estimate>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">bayarea.models.household_location_choice_model_by_submarkets</class_module>
            <class_name>HouseholdLocationChoiceModelBySubmarkets</class_name>
          </import>
          <init type="dictionary">
            <argument name="model_name" parser_action="quote_string" type="string">household_allocation_to_building_model</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">HATBM</argument>
            <name hidden="True" name="name" type="string">HouseholdLocationChoiceModelBySubmarkets</name>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_wesml_mnl_estimation</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="location_set" type="string" model_dependency_type="dataset">building</argument>
            <argument name="sample_size_locations" type="integer">15</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string" model_dependency_type="variable">clip_to_zero(building.residential_units - building.number_of_agents(household))</argument>
            <argument name="estimation_weight_string" parser_action="quote_string" type="string" model_dependency_type="variable">building.residential_units</argument>
            <argument name="number_of_units_string" convert_blank_to_none="True" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="number_of_agents_string" convert_blank_to_none="True" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="location_id_string" parser_action="quote_string" type="string">building_id</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="estimation_size_agents" type="float">.1</argument>
            <argument name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">building.residential_units&gt;0</argument>
            <argument name="run_config" type="string">Resources({'lottery_max_iterations': 7,"accept_unavailability_of_choices":True})</argument>
            <argument name="estimate_config" type="string">Resources({'wesml_sampling_correction_variable':'psrc_parcel.building.wesml_sampling_correction_variable'})</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <output hidden="True" name="output" type="string">(_specification, _index)</output>
            <argument name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string" model_dependency_type="table">households_for_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <argument name="portion_to_unplace" type="string">.1</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">household_allocation_to_building_model_specification</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">numpy.logical_and(household.building_id&gt;0, household.disaggregate(building.residential_units&gt;0))</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(_specification, _coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">household_allocation_to_building_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">household_allocation_to_building_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string" model_dependency_type="dataset">household</argument>
            <argument hidden="True" name="agents_index" type="string">hrm_index</argument>
            <argument name="chunk_specification" type="string">None</argument>
            <argument hidden="True" name="coefficients" type="string">_coefficients</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="building.building_year_built"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="establishment_allocation_to_building_model" type="model">
        <dependencies type="list">['employment_relocation_model']</dependencies>
        <structure type="dictionary">
          <estimate type="dictionary">
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
            <argument name="agent_set" type="string">establishment</argument>
            <argument hidden="True" name="agents_index" type="string">_index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
          </estimate>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">bayarea.models.establishment_location_choice_model_by_submarkets</class_module>
            <class_name>EstablishmentLocationChoiceModelBySubmarkets</class_name>
          </import>
          <init type="dictionary">
            <argument name="model_name" parser_action="quote_string" type="string">establishment_allocation_to_building_model</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">EATBM</argument>
            <name hidden="True" name="name" type="string">EstablishmentLocationChoiceModelBySubmarkets</name>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_wesml_mnl_estimation</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="location_set" type="string" model_dependency_type="dataset">building</argument>
            <argument name="sample_size_locations" type="integer">15</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string" model_dependency_type="variable">bayarea.building.vacant_job_spaces</argument>
            <argument name="estimation_weight_string" parser_action="quote_string" type="string" model_dependency_type="variable">bayarea.building.total_job_spaces</argument>
            <argument name="number_of_units_string" convert_blank_to_none="True" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="number_of_agents_string" convert_blank_to_none="True" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="location_id_string" parser_action="quote_string" type="string">building_id</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string" model_dependency_type="variable"/>
            <argument name="estimation_size_agents" type="float">0.5</argument>
            <argument name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">building.non_residential_sqft&gt;0</argument>
            <argument name="run_config" type="string">Resources({'lottery_max_iterations': 7,"accept_unavailability_of_choices":True})</argument>
            <argument name="estimate_config" type="string">Resources({'wesml_sampling_correction_variable':'psrc_parcel.building.wesml_sampling_correction_variable'})</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <output hidden="True" name="output" type="string">(_specification, _index)</output>
            <argument name="agent_set" type="string" model_dependency_type="dataset">establishment</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string" model_dependency_type="table">establishments</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <argument name="portion_to_unplace" type="string">.1</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">establishment_allocation_to_building_model_specification</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">numpy.logical_and(establishment.building_id&gt;0, establishment.disaggregate(building.non_residential_sqft&gt;0))</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(_specification, _coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">establishment_allocation_to_building_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">establishment_allocation_to_building_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string" model_dependency_type="dataset">establishment</argument>
            <argument hidden="True" name="agents_index" convert_blank_to_none="True" type="string">brm_index</argument>
            <argument name="chunk_specification" type="string">None</argument>
            <argument hidden="True" name="coefficients" type="string">_coefficients</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
            <argument name="maximum_runs" type="integer">10</argument>
          </run>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="building.building_year_built"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="tenure_choice_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.choice_model</class_module>
            <class_name type="string">ChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="model_name" parser_action="quote_string" type="string">Tenure Choice Model</argument>
            <name name="name" type="string">ChoiceModel</name>
            <argument name="choice_set" type="string">[1,2]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" name="submodel_string" type="string"/>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string">tenure</argument>
            <argument name="interaction_pkg" parser_action="quote_string" type="string">opus_core</argument>
            <argument convert_blank_to_none="True" name="run_config" type="string"/>
            <argument name="estimate_config" type="dictionary">
              <key name="estimation_size_agents" type="float">0.025</key>
            </argument>
            <argument name="debuglevel" type="integer">0</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="agents_index" type="string">hrm_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"/>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, tcm_index)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">household</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">numpy.in1d(household.building_type_id, (1,2))</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">tenure_choice_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">tenure_choice_model_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
            <argument name="sample_coefficients" type="boolean">False</argument>
            <argument name="distribution" parser_action="quote_string" type="string">normal</argument>
            <argument name="multiplicator" type="integer">1</argument>
          </prepare_for_run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">household</argument>
            <argument name="agents_index" type="string">hrm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, hrm_index)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">household</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">numpy.in1d(household.building_type_id, (1,2))</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">tenure_choice_model_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="0" type="submodel">
            <equation equation_id="2" name="own" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant"/>
                <variable_spec name="household.hh_children"/>
                <variable_spec name="household.hh_head65"/>
                <variable_spec name="household.hh_head_age"/>
                <variable_spec name="household.ln_hh_income"/>
              </variable_list>
            </equation>
            <equation equation_id="1" name="rent" type="submodel_equation">
              <variable_list type="variable_list"/>
            </equation>
          </submodel>
        </specification>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="business_transition_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument name="dataset" type="string">establishment</argument>
            <argument name="dataset_accounting_attribute" parser_action="quote_string" type="string">employees</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Business Transition Model</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">BTM</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="control_total_table" parser_action="quote_string" type="string">annual_business_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">total_number_of_jobs</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'building_id':-1, 'employment_submarket_id':-1}</argument>
          </run>
        </structure>
      </model>
      <model name="household_relocation_model" type="model">
        <structure type="dictionary">
          <init type="dictionary">
            <name hidden="True" name="name" type="string">AgentRelocationModel</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Relocation Model</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">bayarea.household.submarket_id</argument>
          </init>
        </structure>
      </model>
      <model name="business_relocation_model" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.agent_relocation_model</class_module>
            <class_name>AgentRelocationModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">AgentRelocationModel</name>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Business Relocation Model</argument>
            <argument name="location_id_name" parser_action="quote_string" type="string">bayarea.establishment.employment_submarket_id</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">brm_resources</output>
            <argument name="rate_storage" type="string">base_cache_storage</argument>
            <argument name="rate_table" parser_action="quote_string" type="string">annual_business_relocation_rates</argument>
            <argument name="probability_attribute" parser_action="quote_string" type="string">business_relocation_probability</argument>
          </prepare_for_run>
          <run type="dictionary">
            <output hidden="True" name="output" type="string">brm_index</output>
            <argument name="agent_set" type="string">establishment</argument>
            <argument name="resources" type="string">brm_resources</argument>
          </run>
        </structure>
      </model>
      <model name="household_transition_model_with_persons" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument name="dataset" type="string">household</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Transition Model with Persons</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">HTM</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="control_total_table" parser_action="quote_string" type="string">annual_household_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">total_number_of_households</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'building_id':-1, 'submarket_id':-1}</argument>
            <argument name="sync_dataset" type="string">person</argument>
          </run>
        </structure>
      </model>
      <model name="postprocess_residential_sale_price" type="model">
        <dependencies type="list">['real_estate_price_model']</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <name name="model_name" type="string" parser_action="quote_string">postprocess_residential_sale_price</name>
          </init>
          <run type="dictionary">
            <argument name="dataset" type="string" model_dependency_type="dataset">residential_unit</argument>
            <argument name="expression" parser_action="quote_string" type="string" model_dependency_type="variable">residential_unit.sale_price * residential_unit.disaggregate(numpy.exp(submarket.ln_avg_sale_price_converged)/numpy.exp(submarket.ln_avg_sale_price), intermediates=[building])</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">sale_price</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <model name="postprocess_residential_rent" type="model">
        <dependencies type="list">['real_estate_price_model']</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <name name="model_name" type="string" parser_action="quote_string">postprocess_residential_rent</name>
          </init>
          <run type="dictionary">
            <argument name="dataset" type="string" model_dependency_type="dataset">residential_unit</argument>
            <argument name="dataset_filter" type="string" parser_action="quote_string" model_dependency_type="variable">residential_unit.rent &gt; 0</argument>
            <argument name="expression" parser_action="quote_string" type="string" model_dependency_type="variable">residential_unit.rent * residential_unit.disaggregate(numpy.exp(submarket.ln_avg_rent_converged)/numpy.exp(submarket.ln_avg_rent), intermediates=[building])</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">rent</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <model name="postprocess_non_residential_rent" type="model">
        <dependencies type="list">['real_estate_price_model']</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <name name="model_name" type="string" parser_action="quote_string">postprocess_non_residential_rent</name>
          </init>
          <run type="dictionary">
            <argument name="dataset" type="string" model_dependency_type="dataset">building</argument>
            <argument name="dataset_filter" type="string" parser_action="quote_string" model_dependency_type="variable">building.building_type_id &gt;3</argument>
            <argument name="expression" parser_action="quote_string" type="string" model_dependency_type="variable">building.non_residential_rent * building.disaggregate(numpy.exp(employment_submarket.ln_avg_nonres_rent_converged)/numpy.exp(employment_submarket.ln_avg_nonres_rent))</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">non_residential_rent</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <model name="process_pipeline_events" type="model" inherit_parent_values="False">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">bayarea.models.process_pipeline_events</class_module>
            <class_name>ProcessPipelineEvents</class_name>
          </import>
          <init type="dictionary" hidden="True">
            <name hidden="True" name="name" type="string">ProcessPipelineEvents</name>
          </init>
          <run type="dictionary">
            <argument name="scheduled_development_events" type="string" model_dependency_type="dataset">scheduled_development_event</argument>
            <argument name="buildings" type="string" model_dependency_type="dataset">building</argument>
            <argument name="residential_units" type="string" model_dependency_type="dataset">residential_unit</argument>
            <argument name="year" type="string">year</argument>
            <argument name="scenario_name" type="string">"No Project"</argument>
          </run>
        </structure>
      </model>
      <model name="mtc_export" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">bayarea.models.mtc_export</class_module>
            <class_name>MTCExport</class_name>
          </import>
          <init type="dictionary" hidden="True">
            <name hidden="True" name="name" type="string">MTCExport</name>
            <argument name="data_to_export" type="dictionary">
              <variable_list type="dictionary" name="ABAGData">
                <variable name="ZONE" type="string">zone.zone_id</variable>
                <variable name="SD" type="string">zone.superd</variable>
                <variable name="COUNTY" type="string">zone.county_mtc</variable>
                <variable name="TOTHH" type="string">zone.aggregate(building.number_of_agents(household),intermediates=[parcel])</variable>
                <variable name="HHPOP" type="string">zone.aggregate(building.aggregate(household.persons),intermediates=[parcel])</variable>
                <variable name="TOTPOP" type="string">zone.aggregate(building.aggregate(household.persons),intermediates=[parcel])+zone.gqpop</variable>
                <variable name="EMPRES" type="string">zone.aggregate(building.aggregate(household.workers),intermediates=[parcel])</variable>
                <variable name="SFDU" type="string">zone.aggregate(building.residential_units*(building.building_type_id&lt;3),intermediates=[parcel])</variable>
                <variable name="MFDU" type="string">zone.aggregate(building.residential_units*(building.building_type_id&gt;2),intermediates=[parcel])</variable>
                <variable name="HHINCQ1" type="string">zone.aggregate((household.income*.7201)&lt;25000,intermediates=[building,parcel])</variable>
                <variable name="HHINCQ2" type="string">zone.aggregate(((household.income*.7201)&gt;24999)*((household.income*.7201)&lt;45000),intermediates=[building,parcel])</variable>
                <variable name="HHINCQ3" type="string">zone.aggregate(((household.income*.7201)&gt;44999)*((household.income*.7201)&lt;75000),intermediates=[building,parcel])</variable>
                <variable name="HHINCQ4" type="string">zone.aggregate((household.income*.7201)&gt;74999,intermediates=[building,parcel])</variable>
                <variable name="TOTACRE" type="string">zone.acres</variable>
                <variable name="RESACRE" type="string">bayarea.zone.resacre * zone.disaggregate(bayarea.alldata.resacre_factor)</variable>
                <variable name="CIACRE" type="string">bayarea.zone.ciacre * zone.disaggregate(bayarea.alldata.ciacre_factor)</variable>
                <variable name="SHPOP62P" type="string">safe_array_divide(zone.aggregate((person.age&gt;61)*(person.gq==0),intermediates=[household,building,parcel]),zone.aggregate(household.persons,intermediates=[building,parcel]))</variable>
                <variable name="TOTEMP" type="string">zone.aggregate(establishment.employees,intermediates=[building,parcel])</variable>
                <variable name="AGE0004" type="string">zone.aggregate((person.age&lt;=4)*(person.gq==0),intermediates=[household,building,parcel])</variable>
                <variable name="AGE0519" type="string">zone.aggregate((person.age&gt;=5)*(person.age&lt;=19)*(person.gq==0),intermediates=[household,building,parcel])</variable>
                <variable name="AGE2044" type="string">zone.aggregate((person.age&gt;=20)*(person.age&lt;=44)*(person.gq==0),intermediates=[household,building,parcel])</variable>
                <variable name="AGE4564" type="string">zone.aggregate((person.age&gt;=45)*(person.age&lt;=64)*(person.gq==0),intermediates=[household,building,parcel])</variable>
                <variable name="AGE65P" type="string">zone.aggregate((person.age&gt;=65)*(person.gq==0),intermediates=[household,building,parcel])</variable>
                <variable name="RETEMPN" type="string">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [9, 15]),intermediates=[building,parcel])</variable>
                <variable name="FPSEMPN" type="string">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [1, 2, 3]),intermediates=[building,parcel])</variable>
                <variable name="HEREMPN" type="string">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [6, 8, 10, 13, 16, 18, 24, 26, 28]),intermediates=[building,parcel])</variable>
                <variable name="AGREMPN" type="string">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [4, 5]),intermediates=[building,parcel])</variable>
                <variable name="MWTEMPN" type="string">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [11, 14, 17, 19, 21, 22, 25]),intermediates=[building,parcel])</variable>
                <variable name="OTHEMPN" type="string">zone.aggregate(establishment.employees*numpy.in1d(establishment.sector_id-618312, [7, 20, 23, 27]),intermediates=[building,parcel])</variable>
              </variable_list>
            </argument>
          </init>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
            <argument name="years_to_run" type="list">[2010, 2011, 2015, 2018, 2020, 2025, 2035, 2040]</argument>
            <argument name="configuration" type="string">resources</argument>
          </run>
        </structure>
      </model>
    </models>
    <templates hidden="True" name="Model Templates" parser_action="skip"/>
    <estimation_config config_name="estimation_config" name="Estimation Configuration" type="configuration">
      <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
        <selectable name="building" type="selectable">True</selectable>
        <selectable name="household" type="selectable">True</selectable>
        <selectable name="job" type="selectable">False</selectable>
        <selectable name="parcel" type="selectable">True</selectable>
        <selectable name="submarket" type="selectable">True</selectable>
        <selectable name="node" type="selectable">False</selectable>
        <selectable name="residential_unit" type="selectable">True</selectable>
      </datasets_to_preload>
      <save_estimation_results type="boolean">True</save_estimation_results>
      <cache_directory parser_action="prefix_with_opus_data_path" type="directory" field_identifier="Cache Directory" field_description="Directory for base_year cache, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data">bay_area_parcel/base_year_data</cache_directory>
      <estimation_database_configuration type="class">
        <class_name hidden="True" type="string">EstimationDatabaseConfiguration</class_name>
        <class_module hidden="True" type="string">opus_core.database_management.configurations.estimation_database_configuration</class_module>
        <argument name="database_name" type="string">seattle_2000_parcel_baseyear_data</argument>
      </estimation_database_configuration>
      <dataset_pool_configuration type="class">
        <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
        <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
        <argument name="package_order" type="list">['bayarea','urbansim_parcel', 'urbansim', 'opus_core']</argument>
      </dataset_pool_configuration>
      <datasets_to_cache_after_each_model type="list">[]</datasets_to_cache_after_each_model>
      <low_memory_mode type="boolean">False</low_memory_mode>
      <base_year type="integer" field_identifier="Base Year">2010</base_year>
      <years type="tuple">
        <firstyear type="integer" field_identifier="Base Year">2010</firstyear>
        <lastyear type="integer" field_identifier="Base Year">2010</lastyear>
      </years>
    </estimation_config>
    <travel_model_configuration type="dictionary">
      <travel_model_home type="dictionary">
        <directory type="string">/mnt</directory>
      </travel_model_home>
      <tm_to_urbansim_variable_mapping type="dictionary">
        <variable_list type="string" name="zone_accessibility">skims/accessibility.csv</variable_list>
      </tm_to_urbansim_variable_mapping>
      <models type="selectable_list">
        <selectable name="bayarea.travel_model.invoke_run_travel_model" type="selectable">True</selectable>
        <selectable name="bayarea.travel_model.import_travel_model_data" type="selectable">False</selectable>
      </models>
    </travel_model_configuration>
  </model_manager>
  <scenario_manager>
    <scenario executable="True" name="test_transition_model" type="scenario">
      <parent type="scenario_name">Baseline</parent>
      <base_year type="integer">2010</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2010</firstyear>
        <lastyear type="integer">2012</lastyear>
      </years_to_run>
    </scenario>
    <scenario executable="True" name="test_developer_model" type="scenario">
      <parent type="scenario_name">Baseline</parent>
      <base_year type="integer">2010</base_year>
      <seed type="integer" convert_blank_to_none="True">1</seed>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2011</firstyear>
        <lastyear type="integer">2011</lastyear>
      </years_to_run>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="process_pipeline_events" type="model_choice">True</selectable>
        <selectable name="household_transition_model_with_persons" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="tenure_choice_model" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_owner" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_renter" type="model_choice">True</selectable>
        <selectable return_value="developer_model" type="selectable" name="developer_model_1">True</selectable>
      </models_to_run>
    </scenario>
    <scenario executable="True" name="test_tm_interface" type="scenario">
      <parent type="scenario_name">Baseline</parent>
      <base_year type="integer">2018</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2018</firstyear>
        <lastyear type="integer">2018</lastyear>
      </years_to_run>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="mtc_export" type="model_choice">True</selectable>
	  </models_to_run>
      <travel_model_configuration type="dictionary">
        <travel_model_home type="dictionary">
          <directory type="string">/var/hudson/workspace/MTC_Model/mtc_travel_model</directory>
          <proto type="string">sshfs</proto>
          <connect_string type="string">"cube@detroit.urbansim.org:/cygdrive/e/mtc_travel_model"</connect_string>
        </travel_model_home>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2011</year>
            <data_dir type="string">2011_studio</data_dir>
            <data_exchange_dir type="string">2011_studio/urbansim</data_exchange_dir>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
    <scenario executable="True" name="Studio" type="scenario">
      <parent type="scenario_name">Baseline</parent>
      <base_year type="integer">2010</base_year>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="non_residential_rent_model" type="model_choice">True</selectable>
        <selectable name="residential_unit_rent_model" type="model_choice">True</selectable>
        <selectable name="residential_unit_sale_price_model" type="model_choice">True</selectable>
        <selectable name="household_transition_model_with_persons" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="tenure_choice_model" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_owner" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_renter" type="model_choice">True</selectable>
        <selectable name="household_allocation_to_building_model" type="model_choice">True</selectable>
        <selectable name="business_transition_model" type="model_choice">True</selectable>
        <selectable name="business_relocation_model" type="model_choice">True</selectable>
        <selectable name="business_location_choice_model" type="model_choice">True</selectable>
        <selectable name="establishment_allocation_to_building_model" type="model_choice">True</selectable>
        <selectable name="process_pipeline_events" type="model_choice">True</selectable>
        <selectable return_value="developer_model_Studio" type="selectable" name="developer_model_1">True</selectable>
        <selectable name="mtc_export" type="model_choice">True</selectable>
      </models_to_run>
      <travel_model_configuration type="dictionary">
        <travel_model_scenario type="string">studio</travel_model_scenario>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2018</year>
            <data_dir type="string">2020_studio</data_dir>
            <data_exchange_dir type="string">2020_studio/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <data_dir type="string">2035_studio</data_dir>
            <data_exchange_dir type="string">2035_studio/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <data_dir type="string">2035_studio</data_dir>
            <data_exchange_dir type="string">2035_studio/urbansim</data_exchange_dir>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
    <scenario executable="True" name="Transit_Priority" type="scenario">
      <parent type="scenario_name">Baseline</parent>
      <base_year type="integer">2010</base_year>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="non_residential_rent_model" type="model_choice">True</selectable>
        <selectable name="residential_unit_rent_model" type="model_choice">True</selectable>
        <selectable name="residential_unit_sale_price_model" type="model_choice">True</selectable>
        <selectable name="household_transition_model_with_persons" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="tenure_choice_model" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_owner" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_renter" type="model_choice">True</selectable>
        <selectable name="household_allocation_to_building_model" type="model_choice">True</selectable>
        <selectable name="business_transition_model" type="model_choice">True</selectable>
        <selectable name="business_relocation_model" type="model_choice">True</selectable>
        <selectable name="business_location_choice_model" type="model_choice">True</selectable>
        <selectable name="establishment_allocation_to_building_model" type="model_choice">True</selectable>
        <selectable name="process_pipeline_events" type="model_choice">True</selectable>
        <selectable return_value="developer_model_Transit_Priority" type="selectable" name="developer_model_1">True</selectable>
        <selectable name="mtc_export" type="model_choice">True</selectable>
      </models_to_run>
      <travel_model_configuration type="dictionary">
        <travel_model_scenario type="string">transit_alt</travel_model_scenario>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2018</year>
            <data_dir type="string">2020_transit_alt</data_dir>
            <data_exchange_dir type="string">2020_transit_alt/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <data_dir type="string">2035_transit_alt</data_dir>
            <data_exchange_dir type="string">2035_transit_alt/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <data_dir type="string">2035_transit_alt</data_dir>
            <data_exchange_dir type="string">2035_transit_alt/urbansim</data_exchange_dir>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
    <scenario executable="True" name="No_Project" type="scenario">
      <parent type="scenario_name">Baseline</parent>
      <base_year type="integer">2010</base_year>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="non_residential_rent_model" type="model_choice">True</selectable>
        <selectable name="residential_unit_rent_model" type="model_choice">True</selectable>
        <selectable name="residential_unit_sale_price_model" type="model_choice">True</selectable>
        <selectable name="household_transition_model_with_persons" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="tenure_choice_model" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_owner" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_renter" type="model_choice">True</selectable>
        <selectable name="postprocess_residential_sale_price" type="model_choice">False</selectable>
        <selectable name="postprocess_residential_rent" type="model_choice">False</selectable>
        <selectable name="household_allocation_to_building_model" type="model_choice">True</selectable>
        <selectable name="business_transition_model" type="model_choice">True</selectable>
        <selectable name="business_relocation_model" type="model_choice">True</selectable>
        <selectable name="business_location_choice_model" type="model_choice">True</selectable>
        <selectable name="postprocess_non_residential_rent" type="model_choice">False</selectable>
        <selectable name="establishment_allocation_to_building_model" type="model_choice">True</selectable>
        <selectable name="process_pipeline_events" type="model_choice">True</selectable>
        <selectable return_value="developer_model_No_Project" type="selectable" name="developer_model_1">True</selectable>
        <selectable name="mtc_export" type="model_choice">True</selectable>
      </models_to_run>
      <travel_model_configuration type="dictionary">
        <travel_model_scenario type="string">no_project</travel_model_scenario>
        <models type="selectable_list">
          <selectable name="mag_zone.simtravel.pause_on_travel_model" type="selectable">True</selectable>
          <selectable name="bayarea.travel_model.import_travel_model_data" type="selectable">True</selectable>
        </models>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2018</year>
            <data_dir type="string">2020_no_project</data_dir>
            <data_exchange_dir type="string">2020_no_project/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <data_dir type="string">2035_no_project</data_dir>
            <data_exchange_dir type="string">2035_no_project/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <data_dir type="string">2035_no_project</data_dir>
            <data_exchange_dir type="string">2035_no_project/urbansim</data_exchange_dir>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
    <scenario executable="True" name="Preferred" type="scenario">
      <parent type="scenario_name">Baseline</parent>
      <base_year type="integer">2010</base_year>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="non_residential_rent_model" type="model_choice">True</selectable>
        <selectable name="residential_unit_rent_model" type="model_choice">True</selectable>
        <selectable name="residential_unit_sale_price_model" type="model_choice">True</selectable>
        <selectable name="household_transition_model_with_persons" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="tenure_choice_model" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_owner" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_renter" type="model_choice">True</selectable>
        <selectable name="postprocess_residential_sale_price" type="model_choice">False</selectable>
        <selectable name="postprocess_residential_rent" type="model_choice">False</selectable>
        <selectable name="household_allocation_to_building_model" type="model_choice">True</selectable>
        <selectable name="business_transition_model" type="model_choice">True</selectable>
        <selectable name="business_relocation_model" type="model_choice">True</selectable>
        <selectable name="business_location_choice_model" type="model_choice">True</selectable>
        <selectable name="postprocess_non_residential_rent" type="model_choice">False</selectable>
        <selectable name="establishment_allocation_to_building_model" type="model_choice">True</selectable>
        <selectable name="process_pipeline_events" type="model_choice">True</selectable>
        <selectable return_value="developer_model_Preferred" type="selectable" name="developer_model_1">True</selectable>
        <selectable name="mtc_export" type="model_choice">True</selectable>
      </models_to_run>
      <travel_model_configuration type="dictionary">
        <travel_model_scenario type="string">preferred</travel_model_scenario>
        <models type="selectable_list">
          <selectable name="mag_zone.simtravel.pause_on_travel_model" type="selectable">True</selectable>
          <selectable name="bayarea.travel_model.import_travel_model_data" type="selectable">True</selectable>
        </models>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2018</year>
            <data_dir type="string">2020_preferred</data_dir>
            <data_exchange_dir type="string">2020_preferred/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <data_dir type="string">2035_preferred</data_dir>
            <data_exchange_dir type="string">2035_preferred/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <data_dir type="string">2035_preferred</data_dir>
            <data_exchange_dir type="string">2035_preferred/urbansim</data_exchange_dir>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
    <scenario executable="True" name="developer_calibration" type="scenario">
      <parent type="scenario_name">urbansim_parcel_baseline</parent>
      <base_year type="integer">2010</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2011</firstyear>
        <lastyear type="integer">2011</lastyear>
      </years_to_run>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="non_residential_rent_model" type="model_choice">False</selectable>
        <selectable name="residential_unit_rent_model" type="model_choice">False</selectable>
        <selectable name="residential_unit_sale_price_model" type="model_choice">False</selectable>
        <selectable name="household_transition_model_with_persons" type="model_choice">False</selectable>
        <selectable name="household_relocation_model" type="model_choice">False</selectable>
        <selectable name="tenure_choice_model" type="model_choice">False</selectable>
        <selectable name="submarket_household_location_choice_model_owner" type="model_choice">False</selectable>
        <selectable name="submarket_household_location_choice_model_renter" type="model_choice">False</selectable>
        <selectable name="household_allocation_to_building_model" type="model_choice">False</selectable>
        <selectable name="business_transition_model" type="model_choice">False</selectable>
        <selectable name="business_relocation_model" type="model_choice">False</selectable>
        <selectable name="business_location_choice_model" type="model_choice">False</selectable>
        <selectable name="establishment_allocation_to_building_model" type="model_choice">False</selectable>
        <selectable name="process_pipeline_events" type="model_choice">True</selectable>
        <selectable return_value="developer_model_No_Project" type="selectable" name="developer_model_1">True</selectable>
        <selectable name="mtc_export" type="model_choice">True</selectable>
      </models_to_run>
      <models_in_year type="dictionary">
        <evolve2000_2010 key_name="year" key_value="models" type="category_with_special_keys">
          <doesnotmatter type="dictionary">
            <year type="integer">2010</year>
            <models type="list">["household_transition_model_with_persons", "household_relocation_model", "tenure_choice_model", "submarket_household_location_choice_model_owner", "submarket_household_location_choice_model_renter", "household_allocation_to_building_model"]</models>
          </doesnotmatter>
        </evolve2000_2010>
      </models_in_year>
      <cache_directory parser_action="prefix_with_opus_data_path" type="directory">bay_area_parcel/base_year_data</cache_directory>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfiguration</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">bay_area_parcel/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">bay_area_parcel/base_year_data</argument>
        </argument>
        <argument hidden="True" name="unroll_gridcells" type="boolean">False</argument>
        <argument name="advanced" type="category">
          <baseyear_database_configuration config_name="scenario_database_configuration" type="class">
            <class_name hidden="True" type="string">ScenarioDatabaseConfiguration</class_name>
            <class_module hidden="True" type="string">opus_core.database_management.configurations.scenario_database_configuration</class_module>
            <argument name="database_name" type="string">seattle_2000_parcel_baseyear_data</argument>
          </baseyear_database_configuration>
          <cache_from_database type="boolean">False</cache_from_database>
          <cache_scenario_database type="string">urbansim.model_coordinators.cache_scenario_database</cache_scenario_database>
          <tables_to_cache type="selectable_list">
            <selectable name="annual_employment_control_totals" type="selectable">False</selectable>
            <selectable name="annual_household_control_totals" type="selectable">False</selectable>
            <selectable name="annual_household_relocation_rates" type="selectable">False</selectable>
            <selectable name="building_sqft_per_job" type="selectable">False</selectable>
            <selectable name="building_types" type="selectable">False</selectable>
            <selectable name="buildings" type="selectable">True</selectable>
            <selectable name="cities" type="selectable">False</selectable>
            <selectable name="constant_taz_columns" type="selectable">False</selectable>
            <selectable name="counties" type="selectable">False</selectable>
            <selectable name="demolition_cost_per_sqft" type="selectable">False</selectable>
            <selectable name="development_constraints" type="selectable">False</selectable>
            <selectable name="development_template_components" type="selectable">False</selectable>
            <selectable name="development_templates" type="selectable">False</selectable>
            <selectable name="employment_adhoc_sector_group_definitions" type="selectable">False</selectable>
            <selectable name="employment_adhoc_sector_groups" type="selectable">False</selectable>
            <selectable name="employment_sectors" type="selectable">False</selectable>
            <selectable name="fazes" type="selectable">False</selectable>
            <selectable name="generic_land_use_types" type="selectable">False</selectable>
            <selectable name="gridcells" type="selectable">False</selectable>
            <selectable name="home_based_employment_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="home_based_employment_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="household_characteristics_for_ht" type="selectable">False</selectable>
            <selectable name="household_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="household_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="households" type="selectable">False</selectable>
            <selectable name="households_for_estimation" type="selectable">False</selectable>
            <selectable name="jobs" type="selectable">False</selectable>
            <selectable name="jobs_for_estimation" type="selectable">False</selectable>
            <selectable name="land_use_types" type="selectable">False</selectable>
            <selectable name="non_home_based_employment_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="non_home_based_employment_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="parcels" type="selectable">True</selectable>
            <selectable name="persons" type="selectable">False</selectable>
            <selectable name="real_estate_price_model_coefficients" type="selectable">False</selectable>
            <selectable name="real_estate_price_model_specification" type="selectable">False</selectable>
            <selectable name="target_vacancies" type="selectable">False</selectable>
            <selectable name="urbansim_constants" type="selectable">False</selectable>
            <selectable name="zones" type="selectable">False</selectable>
            <selectable name="nodes" type="selectable">False</selectable>
            <selectable name="residential_units" type="selectable">False</selectable>
            <selectable name="devcalib_geography" type="selectable">True</selectable>
          </tables_to_cache>
          <tables_to_cache_nchunks type="dictionary">
            <parcels type="integer">1</parcels>
          </tables_to_cache_nchunks>
        </argument>
      </creating_baseyear_cache_configuration>
      <travel_model_configuration type="dictionary">
        <travel_model_scenario type="string">studio</travel_model_scenario>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2018</year>
            <data_dir type="string">2020_studio</data_dir>
            <data_exchange_dir type="string">2020_studio/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <data_dir type="string">2035_studio</data_dir>
            <data_exchange_dir type="string">2035_studio/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <data_dir type="string">2035_studio</data_dir>
            <data_exchange_dir type="string">2035_studio/urbansim</data_exchange_dir>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
      <advanced type="category">
        <dataset_pool_configuration type="class">
          <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
          <argument name="package_order" type="list">[ 'bayarea','urbansim_parcel', 'urbansim', 'opus_core','psrc_parcel']</argument>
        </dataset_pool_configuration>
        <flush_dataset_to_cache_after_each_model type="boolean">True</flush_dataset_to_cache_after_each_model>
        <flush_variables type="boolean">False</flush_variables>
        <low_memory_run type="boolean">False</low_memory_run>
        <datasets_to_cache_after_each_model type="list">['parcel', 'building', 'household', 'person', 'node','residential_unit']</datasets_to_cache_after_each_model>
        <unroll_gridcells hidden="True" type="boolean">False</unroll_gridcells>
        <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
          <selectable name="zone" type="selectable">False</selectable>
          <selectable name="household" type="selectable">True</selectable>
          <selectable name="building" type="selectable">True</selectable>
          <selectable name="parcel" type="selectable">True<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="person" type="selectable">True<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="development_template" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="development_template_component" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="job" type="selectable">False</selectable>
          <selectable name="building_type" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="submarket" type="selectable">True</selectable>
          <selectable name="devcalib_geography" type="selectable">True</selectable>
          <selectable name="node" type="selectable">False</selectable>
          <selectable name="residential_unit" type="selectable">False</selectable>
          <selectable name="establishment" type="selectable">True</selectable>
        </datasets_to_preload>
      </advanced>
    </scenario>
    <scenario executable="True" name="hlcm_calibration" type="scenario">
      <parent type="scenario_name">urbansim_parcel_baseline</parent>
      <base_year type="integer">2010</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2011</firstyear>
        <lastyear type="integer">2011</lastyear>
      </years_to_run>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="non_residential_rent_model" type="model_choice">False</selectable>
        <selectable name="residential_unit_rent_model" type="model_choice">False</selectable>
        <selectable name="residential_unit_sale_price_model" type="model_choice">False</selectable>
        <selectable name="household_transition_model_with_persons" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="tenure_choice_model" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_owner" type="model_choice">True</selectable>
        <selectable name="submarket_household_location_choice_model_renter" type="model_choice">True</selectable>
        <selectable name="household_allocation_to_building_model" type="model_choice">True</selectable>
        <selectable name="business_transition_model" type="model_choice">False</selectable>
        <selectable name="business_relocation_model" type="model_choice">False</selectable>
        <selectable name="business_location_choice_model" type="model_choice">False</selectable>
        <selectable name="establishment_allocation_to_building_model" type="model_choice">False</selectable>
        <selectable name="process_pipeline_events" type="model_choice">True</selectable>
        <selectable return_value="developer_model_Baseline" type="selectable" name="developer_model_1">False</selectable>
        <selectable name="mtc_export" type="model_choice">True</selectable>
      </models_to_run>
      <models_in_year type="dictionary">
        <evolve2000_2010 key_name="year" key_value="models" type="category_with_special_keys">
          <doesnotmatter type="dictionary">
            <year type="integer">2010</year>
            <models type="list">["household_transition_model_with_persons", "household_relocation_model", "tenure_choice_model", "submarket_household_location_choice_model_owner", "submarket_household_location_choice_model_renter"]</models>
          </doesnotmatter>
        </evolve2000_2010>
      </models_in_year>
      <cache_directory parser_action="prefix_with_opus_data_path" type="directory">bay_area_parcel/base_year_data</cache_directory>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfiguration</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">bay_area_parcel/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">bay_area_parcel/base_year_data</argument>
        </argument>
        <argument hidden="True" name="unroll_gridcells" type="boolean">False</argument>
        <argument name="advanced" type="category">
          <baseyear_database_configuration config_name="scenario_database_configuration" type="class">
            <class_name hidden="True" type="string">ScenarioDatabaseConfiguration</class_name>
            <class_module hidden="True" type="string">opus_core.database_management.configurations.scenario_database_configuration</class_module>
            <argument name="database_name" type="string">seattle_2000_parcel_baseyear_data</argument>
          </baseyear_database_configuration>
          <cache_from_database type="boolean">False</cache_from_database>
          <cache_scenario_database type="string">urbansim.model_coordinators.cache_scenario_database</cache_scenario_database>
          <tables_to_cache type="selectable_list">
            <selectable name="annual_employment_control_totals" type="selectable">False</selectable>
            <selectable name="annual_household_control_totals" type="selectable">False</selectable>
            <selectable name="annual_household_relocation_rates" type="selectable">False</selectable>
            <selectable name="building_sqft_per_job" type="selectable">False</selectable>
            <selectable name="building_types" type="selectable">False</selectable>
            <selectable name="buildings" type="selectable">True</selectable>
            <selectable name="cities" type="selectable">False</selectable>
            <selectable name="constant_taz_columns" type="selectable">False</selectable>
            <selectable name="counties" type="selectable">False</selectable>
            <selectable name="demolition_cost_per_sqft" type="selectable">False</selectable>
            <selectable name="development_constraints" type="selectable">False</selectable>
            <selectable name="development_template_components" type="selectable">False</selectable>
            <selectable name="development_templates" type="selectable">False</selectable>
            <selectable name="employment_adhoc_sector_group_definitions" type="selectable">False</selectable>
            <selectable name="employment_adhoc_sector_groups" type="selectable">False</selectable>
            <selectable name="employment_sectors" type="selectable">False</selectable>
            <selectable name="fazes" type="selectable">False</selectable>
            <selectable name="generic_land_use_types" type="selectable">False</selectable>
            <selectable name="gridcells" type="selectable">False</selectable>
            <selectable name="home_based_employment_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="home_based_employment_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="household_characteristics_for_ht" type="selectable">False</selectable>
            <selectable name="household_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="household_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="households" type="selectable">False</selectable>
            <selectable name="households_for_estimation" type="selectable">False</selectable>
            <selectable name="jobs" type="selectable">False</selectable>
            <selectable name="jobs_for_estimation" type="selectable">False</selectable>
            <selectable name="land_use_types" type="selectable">False</selectable>
            <selectable name="non_home_based_employment_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="non_home_based_employment_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="parcels" type="selectable">True</selectable>
            <selectable name="persons" type="selectable">False</selectable>
            <selectable name="real_estate_price_model_coefficients" type="selectable">False</selectable>
            <selectable name="real_estate_price_model_specification" type="selectable">False</selectable>
            <selectable name="target_vacancies" type="selectable">False</selectable>
            <selectable name="urbansim_constants" type="selectable">False</selectable>
            <selectable name="zones" type="selectable">False</selectable>
            <selectable name="nodes" type="selectable">False</selectable>
            <selectable name="residential_units" type="selectable">False</selectable>
          </tables_to_cache>
          <tables_to_cache_nchunks type="dictionary">
            <parcels type="integer">1</parcels>
          </tables_to_cache_nchunks>
        </argument>
      </creating_baseyear_cache_configuration>
      <travel_model_configuration type="dictionary">
        <travel_model_scenario type="string">studio</travel_model_scenario>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2018</year>
            <data_dir type="string">2020_studio</data_dir>
            <data_exchange_dir type="string">2020_studio/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <data_dir type="string">2035_studio</data_dir>
            <data_exchange_dir type="string">2035_studio/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <data_dir type="string">2035_studio</data_dir>
            <data_exchange_dir type="string">2035_studio/urbansim</data_exchange_dir>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
      <advanced type="category">
        <dataset_pool_configuration type="class">
          <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
          <argument name="package_order" type="list">[ 'bayarea','urbansim_parcel', 'urbansim', 'opus_core','psrc_parcel']</argument>
        </dataset_pool_configuration>
        <flush_dataset_to_cache_after_each_model type="boolean">True</flush_dataset_to_cache_after_each_model>
        <flush_variables type="boolean">False</flush_variables>
        <low_memory_run type="boolean">False</low_memory_run>
        <datasets_to_cache_after_each_model type="list">['parcel', 'building', 'household', 'person', 'node','residential_unit']</datasets_to_cache_after_each_model>
        <unroll_gridcells hidden="True" type="boolean">False</unroll_gridcells>
        <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
          <selectable name="zone" type="selectable">False</selectable>
          <selectable name="household" type="selectable">True</selectable>
          <selectable name="building" type="selectable">True</selectable>
          <selectable name="parcel" type="selectable">True<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="person" type="selectable">True<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="development_template" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="development_template_component" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="job" type="selectable">False</selectable>
          <selectable name="building_type" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="submarket" type="selectable">True</selectable>
          <selectable name="node" type="selectable">False</selectable>
          <selectable name="residential_unit" type="selectable">False</selectable>
          <selectable name="establishment" type="selectable">True</selectable>
        </datasets_to_preload>
      </advanced>
    </scenario>
    <scenario executable="True" name="Baseline" type="scenario">
      <parent type="scenario_name">urbansim_parcel_baseline</parent>
      <base_year type="integer">2010</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2011</firstyear>
        <lastyear type="integer">2011</lastyear>
      </years_to_run>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="non_residential_rent_model" type="model_choice">False</selectable>
        <selectable name="residential_unit_rent_model" type="model_choice">False</selectable>
        <selectable name="residential_unit_sale_price_model" type="model_choice">False</selectable>
        <selectable name="household_transition_model_with_persons" type="model_choice">False</selectable>
        <selectable name="household_relocation_model" type="model_choice">False</selectable>
        <selectable name="tenure_choice_model" type="model_choice">False</selectable>
        <selectable name="submarket_household_location_choice_model_owner" type="model_choice">False</selectable>
        <selectable name="submarket_household_location_choice_model_renter" type="model_choice">False</selectable>
        <selectable name="household_allocation_to_building_model" type="model_choice">False</selectable>
        <selectable name="business_transition_model" type="model_choice">False</selectable>
        <selectable name="business_relocation_model" type="model_choice">False</selectable>
        <selectable name="business_location_choice_model" type="model_choice">False</selectable>
        <selectable name="establishment_allocation_to_building_model" type="model_choice">False</selectable>
        <selectable name="process_pipeline_events" type="model_choice">True</selectable>
        <selectable return_value="developer_model_Baseline" type="selectable" name="developer_model_1">False</selectable>
        <selectable name="mtc_export" type="model_choice">True</selectable>
      </models_to_run>
      <models_in_year type="dictionary">
        <evolve2000_2010 key_name="year" key_value="models" type="category_with_special_keys">
          <doesnotmatter type="dictionary">
            <year type="integer">2010</year>
            <models type="list">["non_residential_rent_model",  "business_transition_model", "business_relocation_model", "business_location_choice_model", "establishment_allocation_to_building_model"]</models>
          </doesnotmatter>
        </evolve2000_2010>
      </models_in_year>
      <cache_directory parser_action="prefix_with_opus_data_path" type="directory">bay_area_parcel/base_year_data</cache_directory>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfiguration</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">bay_area_parcel/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">bay_area_parcel/base_year_data</argument>
        </argument>
        <argument hidden="True" name="unroll_gridcells" type="boolean">False</argument>
        <argument name="advanced" type="category">
          <baseyear_database_configuration config_name="scenario_database_configuration" type="class">
            <class_name hidden="True" type="string">ScenarioDatabaseConfiguration</class_name>
            <class_module hidden="True" type="string">opus_core.database_management.configurations.scenario_database_configuration</class_module>
            <argument name="database_name" type="string">seattle_2000_parcel_baseyear_data</argument>
          </baseyear_database_configuration>
          <cache_from_database type="boolean">False</cache_from_database>
          <cache_scenario_database type="string">urbansim.model_coordinators.cache_scenario_database</cache_scenario_database>
          <tables_to_cache type="selectable_list">
            <selectable name="annual_employment_control_totals" type="selectable">False</selectable>
            <selectable name="annual_household_control_totals" type="selectable">False</selectable>
            <selectable name="annual_household_relocation_rates" type="selectable">False</selectable>
            <selectable name="building_sqft_per_job" type="selectable">False</selectable>
            <selectable name="building_types" type="selectable">False</selectable>
            <selectable name="buildings" type="selectable">True</selectable>
            <selectable name="cities" type="selectable">False</selectable>
            <selectable name="constant_taz_columns" type="selectable">False</selectable>
            <selectable name="counties" type="selectable">False</selectable>
            <selectable name="demolition_cost_per_sqft" type="selectable">False</selectable>
            <selectable name="development_constraints" type="selectable">False</selectable>
            <selectable name="development_template_components" type="selectable">False</selectable>
            <selectable name="development_templates" type="selectable">False</selectable>
            <selectable name="employment_adhoc_sector_group_definitions" type="selectable">False</selectable>
            <selectable name="employment_adhoc_sector_groups" type="selectable">False</selectable>
            <selectable name="employment_sectors" type="selectable">False</selectable>
            <selectable name="fazes" type="selectable">False</selectable>
            <selectable name="generic_land_use_types" type="selectable">False</selectable>
            <selectable name="gridcells" type="selectable">False</selectable>
            <selectable name="home_based_employment_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="home_based_employment_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="household_characteristics_for_ht" type="selectable">False</selectable>
            <selectable name="household_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="household_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="households" type="selectable">False</selectable>
            <selectable name="households_for_estimation" type="selectable">False</selectable>
            <selectable name="jobs" type="selectable">False</selectable>
            <selectable name="jobs_for_estimation" type="selectable">False</selectable>
            <selectable name="land_use_types" type="selectable">False</selectable>
            <selectable name="non_home_based_employment_location_choice_model_coefficients" type="selectable">False</selectable>
            <selectable name="non_home_based_employment_location_choice_model_specification" type="selectable">False</selectable>
            <selectable name="parcels" type="selectable">True</selectable>
            <selectable name="persons" type="selectable">False</selectable>
            <selectable name="real_estate_price_model_coefficients" type="selectable">False</selectable>
            <selectable name="real_estate_price_model_specification" type="selectable">False</selectable>
            <selectable name="target_vacancies" type="selectable">False</selectable>
            <selectable name="urbansim_constants" type="selectable">False</selectable>
            <selectable name="zones" type="selectable">False</selectable>
            <selectable name="nodes" type="selectable">False</selectable>
            <selectable name="residential_units" type="selectable">False</selectable>
          </tables_to_cache>
          <tables_to_cache_nchunks type="dictionary">
            <parcels type="integer">1</parcels>
          </tables_to_cache_nchunks>
        </argument>
      </creating_baseyear_cache_configuration>
      <travel_model_configuration type="dictionary">
        <travel_model_scenario type="string">studio</travel_model_scenario>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2018</year>
            <data_dir type="string">2020_studio</data_dir>
            <data_exchange_dir type="string">2020_studio/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <data_dir type="string">2035_studio</data_dir>
            <data_exchange_dir type="string">2035_studio/urbansim</data_exchange_dir>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <data_dir type="string">2035_studio</data_dir>
            <data_exchange_dir type="string">2035_studio/urbansim</data_exchange_dir>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
      <advanced type="category">
        <dataset_pool_configuration type="class">
          <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
          <argument name="package_order" type="list">[ 'bayarea','urbansim_parcel', 'urbansim', 'opus_core','psrc_parcel']</argument>
        </dataset_pool_configuration>
        <flush_dataset_to_cache_after_each_model type="boolean">True</flush_dataset_to_cache_after_each_model>
        <flush_variables type="boolean">False</flush_variables>
        <low_memory_run type="boolean">False</low_memory_run>
        <datasets_to_cache_after_each_model type="list">['parcel', 'building', 'household', 'person', 'node','residential_unit']</datasets_to_cache_after_each_model>
        <unroll_gridcells hidden="True" type="boolean">False</unroll_gridcells>
        <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
          <selectable name="zone" type="selectable">False</selectable>
          <selectable name="household" type="selectable">True</selectable>
          <selectable name="building" type="selectable">True</selectable>
          <selectable name="parcel" type="selectable">True<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="person" type="selectable">True<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="development_template" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="development_template_component" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="job" type="selectable">False</selectable>
          <selectable name="building_type" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="submarket" type="selectable">True</selectable>
          <selectable name="node" type="selectable">False</selectable>
          <selectable name="residential_unit" type="selectable">False</selectable>
          <selectable name="establishment" type="selectable">True</selectable>
        </datasets_to_preload>
      </advanced>
    </scenario>
  </scenario_manager>
  <results_manager>
    <indicator_batches name="Indicator Batches" setexpanded="True" type="group">
      <indicator_batch name="superdistrict_indicators_short">
        <batch_visualization hidden="Children" type="batch_visualization" name="New visualization">
          <indicators>['superdistrict_total_dwelling_units', 'superdistrict_urbanized_acres', 'superdistrict_non_residential_sqft_office', 'superdistrict_non_residential_sqft_light_industrial', 'superdistrict_non_residential_sqft_heavy_industrial', 'superdistrict_non_residential_sqft_big_box_retail', 'superdistrict_single_family_dwelling_units', 'superdistrict_household_population', 'superdistrict_non_residential_sqft', 'superdistrict_multi_family_dwelling_units', 'superdistrict_households', 'superdistrict_employees']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>superdistrict</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="abag_eir_area_permutation">
        <batch_visualization hidden="Children" type="batch_visualization" name="db">
          <indicators>['county_id', 'city_id','pda_id', 'tpp_id', 'total_employment', 'total_households', 'total_population', 'employed_residents', 'single_family_units', 'single_family_households', 'multi_family_units', 'multi_family_households', 'total_employment', 'age_lt_04', 'age_05_19', 'age_20_44', 'age_45_64', 'age_65_plus', 'empl_10_art_rec_other', 'empl_02_construction', 'empl_01_farm_nat_res', 'empl_07_fin_lease', 'empl_11_government', 'empl_09_health_educ', 'empl_06_information', 'empl_03_manuf_whole', 'empl_08_prof', 'empl_04_retail', 'empl_05_transp_ware_util', 'empl_99_unclassified']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">1</setting>
          </settings>
          <dataset_name>area_permutation</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="building_type_indicators_short">
        <batch_visualization hidden="Children" type="batch_visualization" name="New visualization">
          <indicators>['building_type_population','building_type_population_age_0_to_4','building_type_population_age_20_to_44','building_type_population_age_45_to_64','building_type_population_age_5_to_19','building_type_population_age_65_plus','building_type_households','building_type_total_dwelling_units','building_type_owner_dwelling_units','building_type_rental_dwelling_units','building_type_households','building_type_average_unit_size','building_type_avg_rent_altmethod','building_type_avg_rent','building_type_avg_sale_price']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>building_type</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="calibration _indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="hlcm_calib">
          <indicators>['devcalib_target_expression']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">1</setting>
          </settings>
          <dataset_name>devcalib_geography</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="diagnostic_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="check_anomalies">
          <indicators>['persons_with_unmatched_hhid','region_employment','region_population','region_persons', 'region_persons_nongq', 'region_employed_residents', 'region_households']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>alldata</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="diagnostic_indicators_test">
        <batch_visualization hidden="Children" type="batch_visualization" name="check_anomalies">
          <indicators>['persons_with_unmatched_hhid', 'households_with_unmatched_bldg_id']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">1</setting>
          </settings>
          <dataset_name>alldata</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="regional_indicators_short">
        <batch_visualization hidden="Children" type="batch_visualization" name="reg_basic">
          <indicators>['region_employment','region_population', 'region_persons_nongq', 'region_employed_residents', 'region_households','region_single_family_dwelling_units','ln_median_rent_per_unit','ln_avg_rent','ln_avg_sale_price']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>alldata</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="regional_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="regional_totals">
          <indicators>['region_non_residential_sqft_big_box_retail', 'region_single_family_dwelling_units_from_unit_set', 'region_single_family_dwelling_units', 'region_owner_dwelling_units', 'region_owner_dwelling_units_from_unit_set', 'region_rental_dwelling_units', 'region_rental_dwelling_units_from_unit_set', 'region_employed_residents', 'region_population_within_half_mile_transit', 'region_jobs_within_half_mile_transit', 'region_dwelling_units_within_half_mile_transit', 'region_urbanized_acres', 'region_residential_acres', 'region_commercial_industrial_acres', 'region_non_residential_sqft_employment_focused_mixed_use', 'region_non_residential_sqft_retail_focused_mixed_use', 'region_non_residential_sqft_residential_focused_mixed_use', 'region_non_residential_sqft_strip_mall_retail', 'region_non_residential_sqft_heavy_industrial', 'region_non_residential_sqft_warehouse_industrial', 'region_non_residential_sqft_light_industrial', 'region_non_residential_sqft_school', 'region_non_residential_sqft_hotel', 'region_non_residential_sqft_office', 'region_dwelling_units_mixed_use', 'region_dwelling_units_multi_family', 'region_dwelling_units_single_family_attached', 'region_dwelling_units_single_family_detatched', 'region_non_residential_sqft', 'region_establishments', 'region_employment', 'region_households', 'region_dwelling_units', 'region_population', 'region_persons']</indicators>
          <output_type>xls</output_type>
          <settings>
            <setting name="output_style">3</setting>
            <setting name="storage_location">regional_indicators.xls</setting>
          </settings>
          <dataset_name>alldata</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="county_indicators_onetable">
        <batch_visualization hidden="Children" type="batch_visualization" name="county_totals">
          <indicators>['county_jobs_within_half_mile_transit', 'county_dwelling_units_within_half_mile_transit', 'county_non_residential_sqft_heavy_industrial', 'county_dwelling_units_single_family_detatched', 'county_dwelling_units_multi_family', 'county_employment']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">1</setting>
          </settings>
          <dataset_name>county</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
	 <indicator_batch name="county_indicators">
	  <batch_visualization hidden="Children" type="batch_visualization" name="county_totals">
		<indicators>['county_commercial_industrial_acres', 'county_dwelling_units_mixed_use', 'county_dwelling_units_multi_family', 'county_dwelling_units_single_family_attached', 'county_dwelling_units_single_family_detatched', 'county_dwelling_units_within_half_mile_transit', 'county_employed_residents', 'county_employment', 'county_households', 'county_jobs_within_half_mile_transit', 'county_mixed_use_dwelling_units', 'county_multi_family_dwelling_units', 'county_non_residential_sqft_big_box_retail', 'county_non_residential_sqft_employment_focused_mixed_use', 'county_non_residential_sqft_heavy_industrial', 'county_non_residential_sqft_light_industrial', 'county_non_residential_sqft_office', 'county_non_residential_sqft_residential_focused_mixed_use', 'county_non_residential_sqft_retail_focused_mixed_use', 'county_non_residential_sqft_strip_mall_retail', 'county_non_residential_sqft_warehouse_industrial', 'county_non_residential_sqft', 'county_owner_dwelling_units', 'county_population_within_half_mile_transit', 'county_population', 'county_rental_dwelling_units', 'county_residential_acres', 'county_single_family_dwelling_units', 'county_total_dwelling_units', 'county_urbanized_acres', 'county_employment_density', 'nonres_occupancy_ratio']</indicators>
		<output_type>tab</output_type>
		<settings>
		  <setting name="output_style">3</setting>
		</settings>
		<dataset_name>county</dataset_name>
		<visualization_type>tab</visualization_type>
	  </batch_visualization>
      </indicator_batch>
      <indicator_batch name="is_pda_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="is_pda_totals">
          <indicators>['is_pda_commercial_industrial_acres', 'is_pda_dwelling_units_mixed_use', 'is_pda_dwelling_units_multi_family', 'is_pda_dwelling_units_single_family_attached', 'is_pda_dwelling_units_single_family_detatched', 'is_pda_dwelling_units_within_half_mile_transit', 'is_pda_employed_residents', 'is_pda_employment_finance_professional', 'is_pda_employment', 'is_pda_establishments', 'is_pda_households', 'is_pda_jobs_within_half_mile_transit', 'is_pda_ln_median_income', 'is_pda_mixed_use_dwelling_units', 'is_pda_multi_family_dwelling_units', 'is_pda_non_residential_sqft_big_box_retail', 'is_pda_non_residential_sqft_employment_focused_mixed_use', 'is_pda_non_residential_sqft_heavy_industrial', 'is_pda_non_residential_sqft_hotel', 'is_pda_non_residential_sqft_light_industrial', 'is_pda_non_residential_sqft_office', 'is_pda_non_residential_sqft_residential_focused_mixed_use', 'is_pda_non_residential_sqft_retail_focused_mixed_use', 'is_pda_non_residential_sqft_school', 'is_pda_non_residential_sqft_strip_mall_retail', 'is_pda_non_residential_sqft_warehouse_industrial', 'is_pda_non_residential_sqft', 'is_pda_owner_dwelling_units', 'is_pda_population_age_lt_18', 'is_pda_population_within_half_mile_transit', 'is_pda_population', 'is_pda_rental_dwelling_units', 'is_pda_residential_acres', 'is_pda_single_family_dwelling_units', 'is_pda_total_dwelling_units', 'is_pda_urbanized_acres', 'is_pda_ln_avg_nonres_rent', 'is_pda_population_age_65_plus']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>is_pda</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="superdistrict_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="supdist_totals">
          <indicators>['superdistrict_commercial_industrial_acres', 'superdistrict_dwelling_units_mixed_use', 'superdistrict_dwelling_units_multi_family', 'superdistrict_dwelling_units_single_family_attached', 'superdistrict_dwelling_units_single_family_detatched', 'superdistrict_dwelling_units_within_half_mile_transit', 'superdistrict_employed_residents', 'superdistrict_employment_finance_professional', 'superdistrict_employment', 'superdistrict_establishments', 'superdistrict_households', 'superdistrict_jobs_within_half_mile_transit',  'superdistrict_mixed_use_dwelling_units', 'superdistrict_multi_family_dwelling_units', 'superdistrict_non_residential_sqft_big_box_retail', 'superdistrict_non_residential_sqft_employment_focused_mixed_use', 'superdistrict_non_residential_sqft_heavy_industrial', 'superdistrict_non_residential_sqft_hotel', 'superdistrict_non_residential_sqft_light_industrial', 'superdistrict_non_residential_sqft_office', 'superdistrict_non_residential_sqft_residential_focused_mixed_use', 'superdistrict_non_residential_sqft_retail_focused_mixed_use', 'superdistrict_non_residential_sqft_school', 'superdistrict_non_residential_sqft_strip_mall_retail', 'superdistrict_non_residential_sqft_warehouse_industrial', 'superdistrict_non_residential_sqft', 'superdistrict_owner_dwelling_units', 'superdistrict_population_age_lt_18', 'superdistrict_population_within_half_mile_transit', 'superdistrict_population', 'superdistrict_rental_dwelling_units', 'superdistrict_residential_acres', 'superdistrict_single_family_dwelling_units', 'superdistrict_total_dwelling_units', 'superdistrict_urbanized_acres', 'superdistrict_population_age_65_plus']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>superdistrict</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="empsubmarket_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="empsubmarket_totals">
          <indicators>["employees"]</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>employment_submarket</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="submarket_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="submarket_totals">
          <indicators>["households", "population"]</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>submarket</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="zone_data">
        <batch_visualization hidden="Children" type="batch_visualization" name="zone_totals">
          <indicators>['zone_employment_health_education', 'zone_employment_other', 'zone_employment_manufacturing', 'zone_employment_agriculture', 'zone_employment_finance_professional', 'zone_total_population', 'zone_population_age_65_plus', 'zone_population_age_45_to_64', 'zone_population_age_20_to_44', 'zone_population_age_5_to_19', 'zone_population_age_0_to_4', 'zone_households_income_4', 'zone_households_income_3', 'zone_households_income_2', 'zone_households_income_1', 'zone_employment', 'zone_commercial_industrial_acres', 'zone_residential_acres', 'zone_multi_family_dwelling_units', 'zone_single_family_dwelling_units', 'zone_households', 'zone_non_residential_sqft', 'zone_non_residential_sqft_employment_focused_mixed_use', 'zone_non_residential_sqft_heavy_industrial', 'zone_non_residential_sqft_hotel', 'zone_non_residential_sqft_light_industrial', 'zone_non_residential_sqft_office', 'zone_non_residential_sqft_residential_focused_mixed_use', 'zone_non_residential_sqft_retail_focused_mixed_use', 'zone_non_residential_sqft_school', 'zone_non_residential_sqft_strip_mall_retail', 'zone_non_residential_sqft_warehouse_industrial', 'zone_sqft_per_employee', 'zone_non_residential_sqft_big_box_retail', 'population_per_acre', 'zone_employment_retail']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>zone</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
    </indicator_batches>
  </results_manager>
</opus_project>

