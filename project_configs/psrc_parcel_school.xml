<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <description type="string">Configuration for the PSRC parcel project with school choice model</description>
    <parent type="file">psrc_parcel_default.xml</parent>
    <expression_library type="dictionary">
      <variable use="model variable" source="expression" name="person.valid_hhchild" type="variable_definition">person.disaggregate(household.children>0)</variable>
      <variable use="model variable" source="expression" name="person.hhincome" type="variable_definition">person.disaggregate(household.income)</variable>
      <variable use="model variable" source="expression" name="person.lhhincome" type="variable_definition">ln(person.disaggregate(household.income))</variable>     
      <variable use="model variable" source="expression" name="person.valid_inc" type="variable_definition">person.disaggregate(household.income &gt; 0)</variable>
      <variable use="model variable" source="expression" name="person.lhhincome_imputed" type="variable_definition">ln(person.disaggregate(urbansim_parcel.household.income_imputed))</variable>
      <variable use="model variable" source="expression" name="person.lhhincome_if_oldest" type="variable_definition">ln(person.disaggregate(urbansim_parcel.household.income_imputed))*(psrc_parcel.person.has_older_sibling==0)</variable>      
      <variable use="model variable" source="expression" name="person.lhhincome_if_not_oldest" type="variable_definition">ln(person.disaggregate(urbansim_parcel.household.income_imputed))*psrc_parcel.person.has_older_sibling</variable>            
      <variable use="model variable" source="expression" name="person.is_high_income" type="variable_definition">person.disaggregate(urbansim_parcel.household.is_high_income_imputed)</variable>
      <variable use="model variable" source="expression" name="person.is_low_income" type="variable_definition">person.disaggregate(urbansim_parcel.household.is_low_income_imputed)</variable>
      <variable use="model variable" source="expression" name="person.hhchild" type="variable_definition">person.disaggregate(household.children)</variable>
      <variable use="model variable" source="expression" name="person.hhchild_oldest" type="variable_definition">person.disaggregate(household.children)*(psrc_parcel.person.has_older_sibling==0)</variable>
      <variable use="model variable" source="expression" name="person.hhworkers" type="variable_definition">person.disaggregate(household.workers)</variable>
      <variable use="model variable" source="expression" name="person.hhnonworkers" type="variable_definition">person.disaggregate(urbansim_parcel.household.number_of_adults-household.workers)</variable>
      <variable use="model variable" source="expression" name="person.has_nonworkers" type="variable_definition">person.disaggregate((urbansim_parcel.household.number_of_adults-household.workers) &gt; 0)</variable>
      <variable use="model variable" source="expression" name="person.timetocbd" type="variable_definition">person.disaggregate(urbansim_parcel.parcel.travel_time_to_cbd, intermediates=[building, household])</variable>
      <variable use="model variable" source="expression" name="person.timetocbd_if_oldest" type="variable_definition">person.disaggregate(urbansim_parcel.parcel.travel_time_to_cbd, intermediates=[building, household])*(psrc_parcel.person.has_older_sibling==0)</variable>      
      <variable use="model variable" source="expression" name="person.timetocbd_if_not_oldest" type="variable_definition">person.disaggregate(urbansim_parcel.parcel.travel_time_to_cbd, intermediates=[building, household])*psrc_parcel.person.has_older_sibling</variable>           
      <variable use="model variable" source="expression" name="person.lives_in_rural" type="variable_definition">person.disaggregate(numpy.logical_not(parcel.is_inside_urban_growth_boundary), intermediates=[building, household])</variable>
      <variable use="model variable" source="expression" name="person.older_sibl_priv" type="variable_definition">psrc_parcel.person.has_older_sibling_in_private_school</variable>
      <variable use="model variable" source="expression" name="person.older_sibl_home" type="variable_definition">psrc_parcel.person.has_older_sibling_in_home_school</variable>
      <variable use="model variable" source="expression" name="person.has_older_sibl" type="variable_definition">psrc_parcel.person.has_older_sibling</variable>
      <variable use="model variable" source="expression" name="person.age_if_older_sibl_priv" type="variable_definition">psrc_parcel.person.has_older_sibling*person.age*psrc_parcel.person.has_older_sibling_in_private_school</variable>
      <variable use="model variable" source="primary attribute" name="person.is_male" type="variable_definition">person.sex==1</variable>
      <variable use="model variable" source="primary attribute" name="person.is_female" type="variable_definition">person.sex==2</variable> 
      <variable use="model variable" source="primary attribute" name="person.sex" type="variable_definition">person.sex</variable>
      <variable use="model variable" source="expression" name="person.valid_age" type="variable_definition">person.age &gt; 0</variable>
      <variable use="model variable" source="expression" name="person.npriv_schools_if_oldest" type="variable_definition">person.disaggregate(psrc_parcel.parcel.number_of_private_schools_within_1000_radius, intermediates=[building, household])*(psrc_parcel.person.has_older_sibling==0)</variable>
      <variable use="model variable" source="expression" name="person.npriv_schools" type="variable_definition">person.disaggregate(psrc_parcel.parcel.number_of_private_schools_within_1000_radius, intermediates=[building, household])</variable>
      <variable use="model variable" source="expression" name="person.npubl_schools" type="variable_definition">person.disaggregate(psrc_parcel.parcel.number_of_public_schools_within_2000_radius, intermediates=[building, household])</variable>
      <variable use="model variable" source="expression" name="person.ngoodpubl_schools" type="variable_definition">person.disaggregate(psrc_parcel.parcel.number_of_good_public_schools_within_1000_radius, intermediates=[building, household])</variable>
      <variable use="model variable" source="expression" name="person.no_good_publ_schools" type="variable_definition">person.disaggregate(psrc_parcel.parcel.number_of_good_public_schools_within_1000_radius ==0, intermediates=[building, household])</variable>
      <variable use="model variable" source="expression" name="person.nschools" type="variable_definition">person.disaggregate(psrc_parcel.parcel.number_of_schools_within_1000_radius, intermediates=[building, household])</variable>
      <variable use="model variable" source="Python class" name="person_x_school.travel_distance_to_school" type="variable_definition">psrc_parcel.person_x_school.network_distance_from_home_to_school</variable>
      <variable use="model variable" source="expression" name="person.faz_school_totscore" type="variable_definition">person.disaggregate(psrc_parcel.faz.average_school_total_score, intermediates=[zone, parcel, building, household])</variable>
      <variable use="model variable" source="expression" name="person.faz_school_mathscore" type="variable_definition">person.disaggregate(psrc_parcel.faz.average_school_math_index, intermediates=[zone, parcel, building, household])</variable>
      <variable use="model variable" source="expression" name="person.faz_school_readscore" type="variable_definition">person.disaggregate(psrc_parcel.faz.average_school_reading_index, intermediates=[zone, parcel, building, household])</variable>
      <variable use="model variable" source="expression" name="person.faz_school_hasscore" type="variable_definition">person.disaggregate(faz.aggregate(school.total_score > 0, intermediates=[parcel, zone])>0, intermediates=[zone, parcel, building, household])</variable>
      <variable use="model variable" source="expression" name="person.zone_school_totscore" type="variable_definition">person.disaggregate(psrc_parcel.zone.average_school_total_score, intermediates=[parcel, building, household])</variable>
      
      </expression_library>
    <available_datasets type="list">['school', 'person', 'mode','person_trip','building','parcel','household_x_building','zone','faz','large_area','gridcell','city','county','alldata', 'person_trip_x_zone', 'household']</available_datasets>
 </general>
 <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
 <model name="school_type_choice_model" type="model">
     <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_type_choice_model</class_module>
            <class_name type="string">SchoolTypeChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolTypeChoiceModel</name>
            <argument name="choice_set" type="string">[1,2,3]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" name="submodel_string" type="string"/>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string">person.school_type</argument>
            <argument name="debuglevel" type="string" hidden="True">debuglevel</argument>
            <argument name="dataset_pool" type="string" hidden="True">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string">person</argument>
            <!--<argument name="agents_index" type="string">cm_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"/>!-->
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">person.school_type</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_specification</argument>
          </prepare_for_estimate>
    </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
             <equation equation_id="1" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant"/>
                <variable_spec name="person.hhincome" coefficient_name="hhincome"/>
                <variable_spec name="person.age" coefficient_name="age"/>
              </variable_list>
            </equation>
            <equation equation_id="2" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant"/>
                <variable_spec name="person.hhincome" coefficient_name="hhincome"/>
                <variable_spec name="person.age" coefficient_name="age"/>
              </variable_list>
            </equation>
           <!--   <equation equation_id="1" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant_1"/>
                <variable_spec name="person.hhincome" coefficient_name="hhincome_1"/>
                <variable_spec name="person.valid_inc" coefficient_name="valid_inc_1"/>
                <variable_spec name="person.age" coefficient_name="age_1"/>
              </variable_list>
            </equation>
            <equation equation_id="2" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant_2"/>
                <variable_spec name="person.hhincome" coefficient_name="hhincome_2"/>
                <variable_spec name="person.valid_inc" coefficient_name="valid_inc_2"/>
                <variable_spec name="person.age" coefficient_name="age_2"/>
              </variable_list>
            </equation>
           <equation equation_id="3" name="home_school" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant_3"/>
                <variable_spec name="person.hhincome" coefficient_name="hhincome_3"/>
                <variable_spec name="person.age" coefficient_name="age_3"/>
              </variable_list>
            </equation>!-->
           <!-- <variable_list type="variable_list">
            <variable_spec name="person.hhincome"/>
            </variable_list>!-->
          </submodel>
        </specification>
</model>
 <model name="home_school_model" type="model">
     <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.home_school_model</class_module>
            <class_name type="string">HomeSchoolModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">HomeSchoolModel</name>
            <argument name="choice_set" type="string">[0,1]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" name="submodel_string" type="string"/>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string">person.home_school</argument>
            <argument name="debuglevel" type="string" hidden="True">debuglevel</argument>
            <argument name="dataset_pool" type="string" hidden="True">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string">person</argument>
            <!--<argument name="agents_index" type="string">cm_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"/>!-->
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(person.is_in_school, numpy.logical_or(person.stype == 2, person.stype == 6))</argument>
            <!--<argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(psrc_parcel.person.has_older_sibling, numpy.logical_and(person.is_in_school, numpy.logical_or(person.stype == 2, person.stype == 6))) </argument>-->
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_specification</argument>
          </prepare_for_estimate>
    </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
             <equation equation_id="1" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant"/>
                <!--  <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>
                 <variable_spec name="person.is_high_income" coefficient_name="is_high_income"/>
                 <variable_spec name="person.is_low_income" coefficient_name="is_low_income"/>
                <variable_spec name="person.age" coefficient_name="age"/>
                <variable_spec name="person.is_male" coefficient_name="is_male"/>
                <variable_spec name="person.lives_in_rural"/>
                <variable_spec name="person.timetocbd"/>
                <variable_spec name="person.has_nonworkers" coefficient_name="has_nonworkers"/>                                
                <variable_spec name="person.hhchild" coefficient_name="children"/>  
                <variable_spec name="person.has_older_sibl"/> 
                <variable_spec name="person.npriv_schools"/>
                <variable_spec name="person.zone_school_totscore"/>
                <variable_spec name="person.no_good_publ_schools"/>
                  --> 
                <variable_spec name="person.hhchild_oldest" coefficient_name="children_if_oldest"/>          
                <variable_spec name="person.older_sibl_home"/>
                <variable_spec name="person.nschools"/>               

              </variable_list>
            </equation>
          </submodel>
        </specification>
</model>
<model name="public_private_school_model" type="model">
     <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_type_choice_model</class_module>
            <class_name type="string">SchoolTypeChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolTypeChoiceModel</name>
            <argument name="choice_set" type="string">[1,2]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" name="submodel_string" type="string"/>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string">person.school_type</argument>
            <argument name="debuglevel" type="string" hidden="True">debuglevel</argument>
            <argument name="dataset_pool" type="string" hidden="True">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string">person</argument>
            <!--<argument name="agents_index" type="string">cm_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"/>!-->
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">psrc_parcel.person.is_in_private_or_public_k12_school </argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_specification</argument>
          </prepare_for_estimate>
    </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
             <equation equation_id="2" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant"/>
                <!--<variable_spec name="person.hhnonworkers" coefficient_name="nonworkers"/>
                <variable_spec name="person.is_male" coefficient_name="is_male"/>
                <variable_spec name="person.timetocbd"/>
                <variable_spec name="person.has_older_sibl"/>
                <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>
                <variable_spec name="person.age" coefficient_name="age"/>
                <variable_spec name="person.faz_school_hasscore"/>
                <variable_spec name="person.zone_school_totscore"/>
                <variable_spec name="person.lives_in_rural"/>
                <variable_spec name="person.has_nonworkers" coefficient_name="has_nonworkers"/>               
                <variable_spec name="person.is_high_income"/>
                <variable_spec name="person.is_low_income" />
                <variable_spec name="person.hhchild" coefficient_name="children"/> 
                <variable_spec name="person.age_if_older_sibl_priv"/>
                -->
                <variable_spec name="person.faz_school_totscore"/>                 
                <variable_spec name="person.faz_school_mathscore"/>                
                <variable_spec name="person.no_good_publ_schools"/>
                <variable_spec name="person.ngoodpubl_schools"/>                 
                <variable_spec name="person.lhhincome_if_oldest" coefficient_name="lhhincome_if_oldest"/>                
                <variable_spec name="person.timetocbd_if_oldest"/>
                <variable_spec name="person.older_sibl_priv"/>     
                <variable_spec name="person.npriv_schools"/>
              </variable_list>
            </equation>
          </submodel>
        </specification>
  </model>
      <model name="school_type_choice_model_nested" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_type_choice_model</class_module>
            <class_name type="string">SchoolTypeChoiceModelNested</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolTypeChoiceModelNested</name>
            <argument name="choice_set" type="string">[1,2,3]</argument>
            <argument name="nested_structure" type="string">{1: [3], 2: [1,2]}</argument>
           <!-- <argument name="nested_structure" type="string">{1: [2,3], 2: [1]}</argument>-->
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.hierarchical_linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.nl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" name="submodel_string" type="string"/>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string">school_type</argument>
            <argument name="interaction_pkg" parser_action="quote_string" type="string">opus_core</argument>
            <argument convert_blank_to_none="True" name="run_config" type="string"/>
            <argument name="estimate_config" type="dictionary">
              <key name="estimation_size_agents" type="float">1.0</key>
              <key name="starting_values" type="dictionary">
                <key name="__logsum_1" type="tuple">
                  <initvalue type="float">1</initvalue>
                  <doestimate type="boolean">False</doestimate>
                </key>
                <key name="__logsum_2" type="tuple">
                  <initvalue type="float">1</initvalue>
                  <doestimate type="boolean">True</doestimate>
                </key>
              </key>
            </argument>
            <argument name="debuglevel" type="integer">0</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"/>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, cm_index)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string"/>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_nested_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">school_type_choice_model_nested_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bfgs_nl_estimation</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(psrc_parcel.person.has_older_sibling==0, numpy.logical_and(person.is_in_school, numpy.logical_or(person.stype == 2, person.stype == 6))) </argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_nested_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
          <nest nest_id="2" name="public-private">
            <equation equation_id="1" name="public" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant"/>
                <!--<variable_spec name="person.timetocbd" coefficient_name="timetocbd"/>
                <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome_1"/> -->
              </variable_list>
            </equation>
            <equation equation_id="2" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant"/>
                <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome_2"/>
                <variable_spec name="person.timetocbd" coefficient_name="timetocbd_2"/>
                <!--<variable_spec name="person.valid_inc" coefficient_name="valid_inc_2"/>
                <variable_spec name="person.hhworkers" coefficient_name="workers"/>
                <variable_spec name="person.age" coefficient_name="age_2"/>
                <variable_spec name="person.is_male" coefficient_name="is_male_2"/>!-->                
              </variable_list>
            </equation>
          </nest>
          <nest nest_id="1" name="home school">
            <equation equation_id="3" name="home school">
               <variable_list type="variable_list">
                   <!-- <variable_spec name="constant" coefficient_name="constant_3"/>!-->
                  <variable_spec name="person.hhchild" coefficient_name="children_3"/>
                  <!--<variable_spec name="person.is_male" coefficient_name="is_male_3"/>
                  <variable_spec name="person.hhnonworkers" coefficient_name="hhnonworkers_3"/>!-->
                  <!-- <variable_spec name="person.timetocbd" coefficient_name="timetocbd_3"/>!-->
                </variable_list>
            </equation>
          </nest>
        </submodel>
      </specification>
      <specification_test type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
          <nest nest_id="2" name="public">
            <equation equation_id="1" name="public" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec name="constant" coefficient_name="constant"/>
                <variable_spec name="person.timetocbd" coefficient_name="timetocbd_1"/>
                <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome_1"/>
              </variable_list>
            </equation>
            </nest>
            <nest nest_id="1" name="private - home school">
            <equation equation_id="2" name="private" type="submodel_equation">
              <variable_list type="variable_list">
               <!-- <variable_spec name="constant" coefficient_name="constant"/>-->
                <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome_2"/>
                <variable_spec name="person.timetocbd" coefficient_name="timetocbd_2"/>
                <!--<variable_spec name="person.hhworkers" coefficient_name="workers"/>!-->
                <!--<variable_spec name="person.age" coefficient_name="age"/>!-->
                <!--<variable_spec name="person.is_male" coefficient_name="is_male_2"/>-->
                <!--<variable_spec name="person.timetocbd" coefficient_name="timetocbd_2"/>
                <variable_spec name="person.older_sibl_priv" coefficient_name="older_sibl_priv_2"/>
                <variable_spec name="person.has_older_sibl" coefficient_name="has_older_sibl_2"/>-->
              </variable_list>
            </equation>
          
            <equation equation_id="3" name="home school">
               <variable_list type="variable_list">
                  <variable_spec name="constant" coefficient_name="constant"/>
                  <variable_spec name="person.hhchild" coefficient_name="children_3"/>
                  <!-- <variable_spec name="person.valid_hhchild" coefficient_name="valid_children_3"/>
                  <variable_spec name="person.is_male" coefficient_name="is_male_3"/>!-->
                  <!-- <variable_spec name="person.timetocbd" coefficient_name="timetocbd_3"/>
                  <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>
                  <variable_spec name="person.has_nonworkers" coefficient_name="has_nonworkers_3"/>
                  <variable_spec name="person.age" coefficient_name="age"/>!-->
                </variable_list>
            </equation>
          </nest>
        </submodel>
      </specification_test>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
 <model name="school_choice_model" type="model">
     <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_choice_model</class_module>
            <class_name type="string">SchoolChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolChoiceModel</name>
            <argument name="location_set" type="string">school</argument>
            <argument name="filter" parser_action="quote_string" type="string">numpy.logical_or((school.public==1)*(SUBMODEL==1), (school.public==0)*(SUBMODEL==2))</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string">person.school_type</argument>
            <argument name="debuglevel" type="string" hidden="True">debuglevel</argument>
            <argument name="dataset_pool" type="string" hidden="True">dataset_pool</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">5</key>
              <key name="sample_alternatives_by_submodel" type="boolean">True</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key name="weights_for_estimation_string" type="string" convert_blank_to_none="True">psrc_parcel.person.school_district_id == school.disaggregate(parcel.school_district_id)</key>
              <key name="sample_size_locations" type="integer">5</key>
              <key name="sample_alternatives_by_submodel" type="boolean">True</key>
              <!--<key name="agent_category_definition" type="list">['person.disaggregate(parcel.school_district_id, intermediates=[building, household])']</key>
              <key name="choice_category_definition" type="list">['school.disaggregate(parcel.school_district_id)']</key>
              <key name="agent_filter_attribute" type="string">person.disaggregate(parcel.school_district_id, intermediates=[building, household])&gt;0</key>-->
            </argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string">person</argument>
            <!--<argument name="agents_index" type="string">cm_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"/>!-->
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(person.stype == 2, psrc_parcel.person.is_in_public_school)*(psrc_parcel.person.school_district_id &lt;&gt; 27343) *(psrc_parcel.person.school_district_id &lt;&gt; 31330)</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_choice_model_specification</argument>
          </prepare_for_estimate>
    </structure>
    <specification type="dictionary">
          <submodel hidden="Children" name="public" submodel_id="1" type="submodel">
              <variable_list type="variable_list">
                <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>
                <variable_spec name="person_x_school.travel_distance_to_school"/>
              </variable_list>
          </submodel>
          <submodel hidden="Children" name="private" submodel_id="2" type="submodel">
              <variable_list type="variable_list">
                <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>
                <!--<variable_spec name="person.valid_inc" coefficient_name="valid_inc"/>-->
                <variable_spec name="person_x_school.travel_distance_to_school"/>
              </variable_list>
          </submodel>
        </specification>
</model>
</models>
<estimation_config config_name="estimation_config" name="Estimation Configuration" type="configuration">
<cache_directory parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/base_year_schoolm</cache_directory>
<save_estimation_results type="boolean">False</save_estimation_results>
<base_year type="integer" field_identifier="Base Year">2006</base_year>
<years type="tuple">
        <firstyear type="integer" field_identifier="Base Year">2006</firstyear>
        <lastyear type="integer" field_identifier="Base Year">2006</lastyear>
</years>
      <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
      <selectable copyable="True" type="selectable" name="school">True</selectable>
        <selectable copyable="True" type="selectable" name="person">True</selectable>
      </datasets_to_preload>
</estimation_config>
</model_manager>
</opus_project>