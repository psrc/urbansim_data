<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <description type="string">Configuration for the PSRC parcel sub-regional project</description>
    <parent type="file">../psrc_parcel_new_repm_hlcm_altroi.xml</parent>
    <expression_library type="dictionary">
    </expression_library>
  </general>
  <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model copyable="True" name="expected_sales_unit_price_component_model_relaxed_redevelopment" type="model">
        <dependencies type="list">['real_estate_price_model', 'postprocess_real_estate_price_model']</dependencies>
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.expected_sales_unit_price_comp_model</class_module>
            <class_name>ExpectedSalesUnitPriceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">ExpectedSalesUnitPriceModel</name>
            <argument model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string">building_type_id</argument>
            <argument model_dependency_type="variable" name="filter_attribute" parser_action="quote_string" type="string">urbansim_parcel.development_project_proposal.is_size_fit</argument>
            <argument name="outcome_attribute_name" parser_action="quote_string" type="string">ln_expected_sales_price_per_sqft</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="parcel_filter_for_new_development" parser_action="quote_string" type="string">has_vacant_land=numpy.logical_or(urbansim_parcel.parcel.vacant_land_area==parcel.parcel_sqft, urbansim_parcel.parcel.is_residential_land_use_type * (safe_array_divide(parcel.parcel_sqft, urbansim_parcel.parcel.used_land_area) &gt; 2.5 ) * ((parcel.aggregate(building.improvement_value, function=maximum) &lt; 200000)))</argument>
            <argument name="parcel_filter_for_redevelopment" parser_action="quote_string" type="string">capacity_opportunity_non_gov=((safe_array_divide(psrc_parcel.parcel.max_developable_capacity, urbansim_parcel.parcel.building_sqft)&gt;1.1)*(parcel.aggregate(urbansim_parcel.building.is_governmental)==0)*(numpy.logical_not(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)&lt;1))*(numpy.logical_or((safe_array_divide(psrc_parcel.parcel.max_developable_capacity, urbansim_parcel.parcel.building_sqft)&gt;6),(parcel.land_use_type_id&lt;&gt;15)))*(parcel.aggregate(building.job_capacity)&lt;500)*((safe_array_divide(urbansim_parcel.parcel.improvement_value,parcel.parcel_sqft))&lt;250))</argument>
            <argument convert_blank_to_none="True" name="template_filter" parser_action="quote_string" type="string"></argument>
            <argument hidden="True" name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">expected_sales_unit_price_component_model_specification</argument>
            <argument hidden="True" name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">expected_sales_unit_price_component_model_coefficients</argument>
            <argument convert_blank_to_none="True" hidden="True" name="spec_replace_module_variable_pair" type="string"></argument>
            <argument hidden="False" name="proposed_units_variable" parser_action="quote_string" type="string">psrc_parcel.development_project_proposal.units_proposed_plus_minimum_1DU_per_legal_lot_yield</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument hidden="False" name="accept_only_larger_proposals_for_redevelopment" type="boolean">True</argument>
            <output hidden="True" name="output" type="string">(development_project_proposal, development_project_proposal_component, specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="dataset" type="string">development_project_proposal_component</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
        </structure>
      </model>

      <model inherit_parent_values="False" name="development_proposal_choice_model" type="model">
        <dependencies type="list">['real_estate_price_model', 'postprocess_real_estate_price_model', "expected_sales_unit_price_component_model", "postprocess_expected_sales_unit_price_component_model"]</dependencies>
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <!-- <class_module type="string">psrc_parcel.models.development_project_proposal_sampling_model_with_minimum</class_module> -->
            <class_module type="string">psrc_parcel.models.development_project_proposal_sampling_model_no_demand_constraints</class_module>
            <class_name>DevelopmentProjectProposalSamplingModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">DevelopmentProjectProposalSamplingModel</name>
            <argument name="proposal_set" type="string">development_project_proposal</argument>
            <!--<argument model_dependency_type="variable" name="weight_string" parser_action="quote_string" type="string">psrc_parcel.development_project_proposal.expected_sales_price_per_sqft_luv</argument>-->
	    <argument type="string" parser_action="quote_string" name="weight_string" model_dependency_type="variable">exprevpsft = expfin(0.09 * development_project_proposal.expected_sales_price_per_sqft)</argument> 
          </init>
          <run type="dictionary">
            <argument name="n" type="integer">100</argument>
            <!--  <argument type="string" parser_action="quote_string" name="within_parcel_selection_weight_string" convert_blank_to_none="True">exp_roi = exp(psrc_parcel.development_project_proposal.expected_rate_of_return_on_investment)</argument> -->
           <argument convert_blank_to_none="True" name="within_parcel_selection_weight_string" parser_action="quote_string" type="string">psrc_parcel.development_project_proposal.total_revenue</argument>
            <argument name="within_parcel_selection_compete_among_types" parser_action="quote_string" type="boolean">True</argument>
            <argument name="within_parcel_selection_threshold" type="integer">65</argument>
            <argument name="within_parcel_selection_n" type="integer">10</argument>
            <argument name="within_parcel_selection_MU_same_weight" type="boolean">False</argument>
            <argument name="within_parcel_selection_transpose_interpcl_weight" type="boolean">True</argument>
            <output hidden="True" name="output" type="string">(development_project_proposal, demolished_buildings)</output>
          </run>
        </structure>
      </model>
      <model inherit_parent_values="False" name="development_proposal_choice_model_luv2" type="model">
        <dependencies type="list">['real_estate_price_model', 'postprocess_real_estate_price_model', "expected_sales_unit_price_component_model", "postprocess_expected_sales_unit_price_component_model"]</dependencies>
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.development_project_proposal_sampling_model_luv2</class_module>
            <class_name>DevelopmentProjectProposalSamplingModelLuv2</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">DevelopmentProjectProposalSamplingModelLuv2</name>
            <argument name="proposal_set" type="string">development_project_proposal</argument>
	    <argument type="string" parser_action="quote_string" name="weight_string" model_dependency_type="variable">exprevpsft = expfin(0.09 * development_project_proposal.expected_sales_price_per_sqft)</argument> 
            <!--<argument model_dependency_type="variable" name="weight_string" parser_action="quote_string" type="string">psrc_parcel.development_project_proposal.expected_sales_price_per_sqft_luv</argument>-->
          </init>
          <run type="dictionary">
            <argument name="n" type="integer">100</argument>
            <!-- <argument type="string" parser_action="quote_string" name="within_parcel_selection_weight_string" convert_blank_to_none="True">exp_roi = exp(psrc_parcel.development_project_proposal.expected_rate_of_return_on_investment)</argument> -->
            <argument convert_blank_to_none="True" name="within_parcel_selection_weight_string" parser_action="quote_string" type="string">psrc_parcel.development_project_proposal.total_revenue</argument>
            <argument name="within_parcel_selection_compete_among_types" parser_action="quote_string" type="boolean">True</argument>
            <argument name="within_parcel_selection_threshold" type="integer">65</argument>
            <argument name="within_parcel_selection_n" type="integer">10</argument>
            <argument name="within_parcel_selection_MU_same_weight" type="boolean">False</argument>
            <argument name="within_parcel_selection_transpose_interpcl_weight" type="boolean">True</argument>
            <output hidden="True" name="output" type="string">(development_project_proposal, demolished_buildings)</output>
          </run>
        </structure>
      </model>
      <model name="development_proposal_choice_model_by_subarea" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.development_proposal_sampling_model_by_subarea_for_refinement</class_module>
            <class_name>DevelopmentProposalSamplingModelBySubareaForRefinement</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">DevelopmentProposalSamplingModelBySubareaForRefinement</name>
            <argument model_dependency_type="dataset" name="subarea_name" parser_action="quote_string" type="string">city</argument>
            <argument model_dependency_type="dataset" name="intermediates_to_realestate" parser_action="quote_string" type="string">parcel</argument>
            <argument model_dependency_type="dataset" name="proposal_set" type="string">development_project_proposal</argument>
             <argument type="string" parser_action="quote_string" name="weight_string" model_dependency_type="variable">exprevpsft = expfin(0.09 * development_project_proposal.expected_sales_price_per_sqft)</argument> 
           <!-- <argument model_dependency_type="variable" name="weight_string" parser_action="quote_string" type="string">psrc_parcel.development_project_proposal.expected_sales_price_per_sqft_luv</argument>-->
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter_attribute" parser_action="quote_string" type="string"></argument>
          </init>
          <run type="dictionary">
            <argument convert_blank_to_none="True" name="location_ids_to_process" type="string"></argument>
            <argument name="process_planned" parser_action="quote_string" type="boolean">True</argument>
            <argument name="modify_start_year" parser_action="quote_string" type="boolean">False</argument>
            <argument name="n" type="integer">50</argument>
            <argument name="year" type="string">year</argument>
            <argument name="current_year" type="string">year</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="within_parcel_selection_weight_string" parser_action="quote_string" type="string">psrc_parcel.development_project_proposal.total_revenue</argument>
            <argument name="within_parcel_selection_compete_among_types" parser_action="quote_string" type="boolean">True</argument>
            <argument name="within_parcel_selection_threshold" type="integer">65</argument>
            <argument name="within_parcel_selection_n" type="integer">10</argument>
            <argument convert_blank_to_none="True" name="type" parser_action="quote_string" type="string"></argument>
            <output hidden="True" name="output" type="string">(development_project_proposal, demolished_buildings)</output>
          </run>
        </structure>
      </model>
      <model name="cap_residential_development_model" type="model">
	<structure type="dictionary">
	  <import name="import" type="dictionary">
	    <class_module>psrc_parcel.models.cap_development_model</class_module>
	    <class_name>CapDevelopmentModel</class_name>
	  </import>
	  <init type="dictionary">
	    <name name="name" type="string">CapDevelopmentModel</name>
	    <argument name="dataset" model_dependency_type="dataset" type="string">parcel</argument>
	    <argument name="model_name" parser_action="quote_string" type="string">Residential Cap Development Model</argument>
	    <argument name="model_short_name" parser_action="quote_string" type="string">ResCapDM</argument>
	  </init>
	  <prepare_for_run type="dictionary">
	    <name name="name" type="string">prepare_for_run</name>
	    <argument name="control_total_table" parser_action="quote_string" type="string">annual_household_control_totals</argument>
	    <argument name="control_total_storage" type="string">base_cache_storage</argument>
	  </prepare_for_run>
	  <run type="dictionary">
	    <argument name="year" type="string">year</argument>
	    <!--<argument name="target_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">urbansim_parcel.parcel.number_of_households</argument>
	    <argument name="ct_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">psrc_parcel.control_total.household_growth_rate_luv</argument>
	    <argument name="ct_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">growth=1.01 * psrc_parcel.control_total.household_total_growth_luv</argument>-->
	    <argument name="target_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">psrc_parcel.parcel.residential_units</argument>
	    <argument name="ct_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">demand=1.01 * control_total.total_number_of_households</argument>
	    <argument name="geo_id_name" parser_action="quote_string" type="string">city_id</argument>
	    <argument name="cap_attribute_name" parser_action="quote_string" type="string">residential_target_achieved</argument>
	    <argument name="compare_absolute_numbers" parser_action="quote_string" type="boolean">True</argument>
	    <!-- <argument name="annual" parser_action="quote_string" type="boolean">True</argument>
	     <argument name="growth_rate" parser_action="quote_string" type="boolean">False</argument>-->
	     <argument name="dataset_pool" type="string">dataset_pool</argument>
	  </run>
	</structure>
      </model>
      <model name="cap_nonresidential_development_model" type="model">
	<structure type="dictionary">
	  <import name="import" type="dictionary">
	    <class_module>psrc_parcel.models.cap_development_model</class_module>
	    <class_name>CapDevelopmentModel</class_name>
	  </import>
	  <init type="dictionary">
	    <name name="name" type="string">CapDevelopmentModel</name>
	    <argument name="dataset" model_dependency_type="dataset" type="string">parcel</argument>
	    <argument name="model_name" parser_action="quote_string" type="string">Non-Residential Cap Development Model</argument>
	    <argument name="model_short_name" parser_action="quote_string" type="string">NResCapDM</argument>
	  </init>
	  <prepare_for_run type="dictionary">
	    <name name="name" type="string">prepare_for_run</name>
	    <argument name="control_total_table" parser_action="quote_string" type="string">annual_employment_control_totals</argument>
	    <argument name="control_total_storage" type="string">base_cache_storage</argument>
	  </prepare_for_run>
	  <run type="dictionary">
	    <argument name="year" type="string">year</argument>
	    <!--<argument name="target_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">urbansim_parcel.parcel.number_of_jobs</argument>
	    <argument name="ct_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">psrc_parcel.control_total.job_growth_rate_luv</argument>
	    <argument name="ct_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">growth=1.01 * psrc_parcel.control_total.job_total_growth_luv</argument>-->
	    <argument name="target_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">psrc_parcel.parcel.job_capacity</argument>
	    <argument name="ct_attribute_name" parser_action="quote_string" type="string" model_dependency_type="variable">demand=1.01 * control_total.total_number_of_jobs</argument>
	    <argument name="geo_id_name" parser_action="quote_string" type="string">city_id</argument>
	    <argument name="cap_attribute_name" parser_action="quote_string" type="string">nonresidential_target_achieved</argument>
	    <argument name="compare_absolute_numbers" parser_action="quote_string" type="boolean">True</argument>
	    <!-- <argument name="annual" parser_action="quote_string" type="boolean">True</argument>
	     <argument name="growth_rate" parser_action="quote_string" type="boolean">False</argument>-->
	     <argument name="dataset_pool" type="string">dataset_pool</argument>
	  </run>
	</structure>
      </model>
      <model name="increase_HU_density" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Increase HU Density in Centers</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.residential_units*building.disaggregate(psrc_parcel.parcel.modify_rgc_hh_capacity)).astype(int32)</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">residential_units</argument>
            <argument name="dataset_filter" parser_action="quote_string" type="string">(building.year_built == building.year_built.max())*building.disaggregate(parcel.growth_center_id &gt;= 500)*building.disaggregate(parcel.growth_center_id &lt; 600) </argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="increase_existing_HU_density" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Increase Exising HU Density in Centers</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.residential_units*building.disaggregate(psrc_parcel.parcel.modify_rgc_hh_capacity)).astype(int32)</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">residential_units</argument>
            <argument name="dataset_filter" parser_action="quote_string" type="string">building.disaggregate(parcel.growth_center_id &gt;= 500)*building.disaggregate(parcel.growth_center_id &lt; 600) </argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
     <model name="increase_job_capacity" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Increase Job Density in Centers</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.non_residential_sqft*building.disaggregate(psrc_parcel.parcel.modify_rgc_emp_capacity)).astype(int32)</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">non_residential_sqft</argument>
            <argument name="dataset_filter" parser_action="quote_string" type="string">(building.year_built == building.year_built.max())*building.disaggregate(parcel.growth_center_id &gt;= 500)*building.disaggregate(parcel.growth_center_id &lt; 600) </argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="increase_existing_job_capacity" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Increase Exising Job Density in Centers</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.job_capacity*building.disaggregate(psrc_parcel.parcel.modify_rgc_emp_capacity)).astype(int32)</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">job_capacity</argument>
            <argument name="dataset_filter" parser_action="quote_string" type="string">building.disaggregate(parcel.growth_center_id &gt;= 500)*building.disaggregate(parcel.growth_center_id &lt; 600) </argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="assign_city_to_households" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Assign city_id Attribute to Households</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">household</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">psrc_parcel.household.city_id</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">city_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="assign_city_to_jobs" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Assign city_id Attribute to Jobs</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">job</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">psrc_parcel.job.city_id</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">city_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="delete_city_from_households" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.delete_attribute_model</class_module>
            <class_name type="string">DeleteAttributeModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeleteAttributeModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Delete city_id Attribute from Households</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">household</argument>
            <argument name="attribute" parser_action="quote_string" type="string">city_id</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="delete_city_from_jobs" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.delete_attribute_model</class_module>
            <class_name type="string">DeleteAttributeModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeleteAttributeModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Delete city_id Attribute from Jobs</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">job</argument>
            <argument name="attribute" parser_action="quote_string" type="string">city_id</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="household_transition_model" type="model">
        <structure type="dictionary">
          <run type="dictionary">
            <argument model_dependency_type="variable" name="sampling_threshold" parser_action="quote_string" type="string">safe_array_divide(control_total.number_of_agents(household), control_total.total_number_of_households) &gt; 0.3</argument>
            <argument name="sampling_hierarchy" type="string">['city_id', 'county_id']</argument>
          </run>
        </structure>
      </model>
      <model name="employment_transition_model" type="model">
        <structure type="dictionary">
          <run type="dictionary">
            <argument model_dependency_type="variable" name="sampling_threshold" parser_action="quote_string" type="string">safe_array_divide(control_total.number_of_agents(job), control_total.total_number_of_jobs) &gt; 0.3</argument>
            <argument name="sampling_hierarchy" type="string">['city_id', 'county_id']</argument>
          </run>
        </structure>
      </model>
      <model name="household_relocation_model_by_subarea" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.agent_relocation_model</class_module>
            <class_name>AgentRelocationModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="location_id_name" parser_action="quote_string" type="string">building_id</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Relocation Model with Zero Rates</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">AgentRelocationModel</name>
            <argument convert_blank_to_none="True" name="probabilities" parser_action="quote_string" type="string"></argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">hrm_resources_subarea</output>
            <argument name="rate_storage" type="string">None</argument>
            <argument convert_blank_to_none="True" name="rate_table" parser_action="quote_string" type="string"></argument>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">hrm_index</output>
            <argument name="resources" type="string">hrm_resources_subarea</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
          </run>
        </structure>
      </model>
      <model name="employment_relocation_model_by_subarea" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.agent_relocation_model</class_module>
            <class_name>AgentRelocationModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="location_id_name" parser_action="quote_string" type="string">building_id</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Employment Relocation Model</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">AgentRelocationModel</name>
            <argument convert_blank_to_none="True" name="probabilities" parser_action="quote_string" type="string"></argument>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">erm_resources_subarea</output>
            <argument name="rate_storage" type="string">None</argument>
            <argument convert_blank_to_none="True" name="rate_table" parser_action="quote_string" type="string"></argument>
            <argument name="probability_attribute" parser_action="quote_string" type="string">job_relocation_probability</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">erm_index</output>
            <argument name="resources" type="string">erm_resources_subarea</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
          </run>
        </structure>
      </model>
      <model name="household_location_choice_model_by_subarea" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.subarea_household_location_choice_model</class_module>
            <class_name>SubareaHouseholdLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaHouseholdLocationChoiceModel</name>
            <argument model_dependency_type="variable" name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string"></argument>
            <argument convert_blank_to_none="True" name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <!-- <argument name="number_of_units_string" parser_action="quote_string" type="string" convert_blank_to_none="True"/> -->
            <argument model_dependency_type="variable" name="number_of_units_string" parser_action="quote_string" type="string">residential_units</argument>
            <argument model_dependency_type="variable" name="number_of_agents_string" parser_action="quote_string" type="string">number_of_households</argument>
            <argument name="location_id_string" parser_action="quote_string" type="string">building_id</argument>
            <argument model_dependency_type="variable" name="simulation_weight_string" parser_action="quote_string" type="string">urbansim_parcel.building.vacant_residential_units</argument>
            <argument model_dependency_type="variable" name="capacity_string" parser_action="quote_string" type="string">vacant_residential_units</argument>
            <argument name="sample_size_locations" type="integer">200</argument>
            <argument model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string">inmigrant_code=household.is_inmigrant+1</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">20</key>
              <key name="include_mnl_bias_correction_term" type="boolean">False</key>
              <key name="accept_unavailability_of_choices" type="boolean">True</key>
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">household_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">household_location_choice_model_specification</argument>
            <output hidden="True" name="output" type="string">(_specification, _coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">hrm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':5000}</argument>
            <argument name="flush_after_each_subarea" type="boolean">True</argument>
            <argument name="run_no_area" type="boolean">False</argument>
            <argument name="maximum_runs" type="integer">2</argument>
            <argument hidden="True" name="coefficients" type="string">_coefficients</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
          </run>
        </structure>
      </model>
      <model name="employment_location_choice_model_mpds" type="model">
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
          <seed convert_blank_to_none="True" type="integer">1</seed>
        </estimation_config>
        <structure type="dictionary">
          <estimate type="dictionary">
            <argument name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
          </estimate>
          <group_by_attribute type="tuple">
            <argument name="grouping_table" type="string">home_based_status</argument>
            <argument name="grouping_column" type="string">name</argument>
          </group_by_attribute>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">EmploymentLocationChoiceModel</name>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="location_set" type="string">building</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string">job.sector_id</argument>
            <argument name="sample_size_locations" type="integer">30</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>
            <!--<argument name="estimation_weight_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>-->
            <argument name="estimation_weight_string" parser_action="quote_string" type="string">psrc_parcel.building.fraction_of_SSS_jobs_of_sector_SUBMODEL_combined </argument>
            <!--<argument name="simulation_weight_string" parser_action="quote_string" type="string">(urbansim_parcel.building.fraction_of_jobs_of_sector_SUBMODEL+(urbansim_parcel.building.number_of_jobs == 0)*psrc_parcel.building.fraction_of_jobs_of_sector_SUBMODEL_static)* (psrc_parcel.building.vacant_SSS_job_space &gt; 0) </argument>-->
            <argument name="simulation_weight_string" parser_action="quote_string" type="string">(3*(building.year_built &gt; 2000) + (building.year_built &lt;= 2000))*(((numpy.logical_not(psrc_parcel.building.has_vacancy_for_new_sector) * urbansim_parcel.building.fraction_of_jobs_of_sector_SUBMODEL)+ (psrc_parcel.building.has_vacancy_for_new_sector * psrc_parcel.building.fraction_of_jobs_of_sector_SUBMODEL_static))*(psrc_parcel.building.vacant_SSS_job_space &gt; 0)) </argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string"></argument>
            <argument name="estimation_size_agents" type="float">1.</argument>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument name="number_of_units_string" parser_action="quote_string" type="string">total_SSS_job_space</argument>
            <argument name="run_config" type="dictionary">
              <key convert_blank_to_none="True" name="agent_units_string" type="string"></key>
              <key name="lottery_max_iterations" type="integer">10</key>
              <key name="sample_alternatives_by_submodel" type="boolean">True</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key name="sample_alternatives_by_submodel" type="boolean">True</key>
            </argument>
            <argument name="variable_package" parser_action="quote_string" type="string">psrc_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <output hidden="True" name="output" type="string">(specification, index)</output>
            <argument name="agent_set" type="string">job</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs_for_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="portion_to_unplace" type="float">0</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string">numpy.logical_and(job.building_id&gt;0, job.disaggregate(building.non_residential_sqft) &gt; 0)</argument>
            <argument name="join_datasets" type="boolean">True</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
            <argument name="agent_filter" parser_action="quote_string" type="string">job.sector_id &lt; 18</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">employment_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">erm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
          </run>
        </structure>
      </model>
      <model name="employment_location_choice_model_by_subarea" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.subarea_employment_location_choice_model</class_module>
            <class_name>SubareaEmploymentLocationChoiceModel</class_name>
          </import>
          <group_by_attribute type="tuple">
            <argument model_dependency_type="table" name="grouping_table" type="string">home_based_status</argument>
            <argument name="grouping_column" type="string">name</argument>
          </group_by_attribute>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaEmploymentLocationChoiceModel</name>
            <argument model_dependency_type="variable" name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">psrc_parcel.building.vacant_non_home_based_job_space &gt; 0</argument>
            <argument convert_blank_to_none="True" name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <!-- <argument name="number_of_units_string" parser_action="quote_string" type="string" convert_blank_to_none="True"/> -->
            <argument model_dependency_type="variable" name="number_of_units_string" parser_action="quote_string" type="string">total_SSS_job_space</argument>
            <argument model_dependency_type="variable" name="number_of_agents_string" parser_action="quote_string" type="string">number_of_SSS_jobs</argument>
            <argument name="sample_size_locations" type="integer">200</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string">job.sector_id</argument>
            <argument model_dependency_type="variable" name="capacity_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>
            <argument name="simulation_weight_string" parser_action="quote_string" type="string">((numpy.logical_not(psrc_parcel.building.has_vacancy_for_new_sector) * urbansim_parcel.building.fraction_of_jobs_of_sector_SUBMODEL)+ (psrc_parcel.building.has_vacancy_for_new_sector * psrc_parcel.building.fraction_of_jobs_of_sector_SUBMODEL_static_non_zero))*psrc_parcel.building.vacant_SSS_job_space </argument>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">psrc_parcel</argument>
            <argument name="run_config" type="dictionary">
              <key convert_blank_to_none="True" name="agent_units_string" type="string"></key>
              <key name="lottery_max_iterations" type="integer">10</key>
              <key name="sample_alternatives_by_submodel" type="boolean">True</key>
              <key name="accept_unavailability_of_choices" type="boolean">True</key>
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="agent_filter" parser_action="quote_string" type="string">job.sector_id &lt; 18</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">employment_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">erm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':5000}</argument>
            <argument name="maximum_runs" type="integer">2</argument>
            <argument name="flush_after_each_subarea" type="boolean">True</argument>
            <argument name="run_no_area" type="boolean">False</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" inherit_parent_values="False" name="governmental_employment_location_choice_model_by_subarea" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.subarea_scaling_jobs_model</class_module>
            <class_name>SubareaScalingJobsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaScalingJobsModel</name>
            <argument name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">urbansim_parcel.building.is_governmental</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="debuglevel" type="string">2</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">numpy.logical_or(job.sector_id==18, job.sector_id==19)</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <output hidden="True" name="output" type="string">filtered_erm_index</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument name="agents_index" type="string">filtered_erm_index</argument>
            <argument name="run_no_area" type="boolean">False</argument>
          </run>
        </structure>
      </model>
      <model name="governmental_employment_location_choice_model" type="model">
        <structure type="dictionary">
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">numpy.logical_or(job.sector_id==18, job.sector_id==19)</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <output hidden="True" name="output" type="string">filtered_erm_index</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument hidden="True" name="agents_index" type="string">filtered_erm_index</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" name="scaling_unplaced_jobs" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.subarea_scaling_agents_model</class_module>
            <class_name>SubareaScalingAgentsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaScalingAgentsModel</name>
            <argument name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string">sector_id</argument>
            <argument model_dependency_type="variable" name="weights" parser_action="quote_string" type="string">building.disaggregate(5*(parcel.growth_center_id &gt;= 500) + (parcel.growth_center_id &lt; 500))</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="debuglevel" type="string">2</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">numpy.logical_and(urbansim_parcel.job.is_non_home_based, job.building_id&lt;=0)</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string"></argument>
            <output hidden="True" name="output" type="string">filtered_jobs_index_for_sam</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument name="agents_index" type="string">filtered_jobs_index_for_sam</argument>
            <argument name="run_no_area" type="boolean">False</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" name="scaling_unplaced_households" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.subarea_scaling_agents_model</class_module>
            <class_name>SubareaScalingAgentsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaScalingAgentsModel</name>
            <argument name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument name="filter" parser_action="quote_string" type="string"></argument>
            <argument model_dependency_type="variable" name="weights" parser_action="quote_string" type="string">building.disaggregate(5*(parcel.growth_center_id &gt;= 500) + (parcel.growth_center_id &lt; 500))</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="debuglevel" type="string">2</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">household.building_id &lt;= 0</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string"></argument>
            <output hidden="True" name="output" type="string">filtered_hhs_index_for_sam</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument name="agents_index" type="string">filtered_hhs_index_for_sam</argument>
            <argument name="run_no_area" type="boolean">False</argument>
          </run>
        </structure>
      </model>
      <model name="assign_work_at_home_to_workers" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Assign work_at_home Attribute to Persons</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">person</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">person.job_id > 0</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">work_at_home</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model copyable="True" hidden="False" name="work_at_home_choice_model_by_subarea" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.work_at_home_choice_model</class_module>
            <class_name>WorkAtHomeChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">WorkAtHomeChoiceModel</name>
            <argument model_dependency_type="dataset" name="choice_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">psrc_parcel.job.is_untaken_home_based_job</argument>
            <argument name="match_number_of_jobs" type="boolean">False</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">work_at_home_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">work_at_home_choice_model_specification</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">urbansim_parcel.person.is_worker_without_job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <output name="output" type="string">(specification, coefficients, _index)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">_index</argument>
            <argument name="chunk_specification" type="string">{'nchunks':1}</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="run_choice_model" type="boolean">True</argument>
            <argument name="choose_job_only_in_residence_zone" type="boolean">True</argument>
            <argument name="residence_id" parser_action="quote_string" type="string">city_id</argument>
	    <argument name="match_choice_attribute_to_jobs" type="boolean">True</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" name="work_at_home_choice_model_by_tractcity" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.work_at_home_choice_model</class_module>
            <class_name>WorkAtHomeChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">WorkAtHomeChoiceModel</name>
            <argument model_dependency_type="dataset" name="choice_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">psrc_parcel.job.is_untaken_home_based_job</argument>
            <argument name="match_number_of_jobs" type="boolean">False</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">work_at_home_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">work_at_home_choice_model_specification</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">urbansim_parcel.person.is_worker_without_job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <output name="output" type="string">(specification, coefficients, _index)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">_index</argument>
            <argument name="chunk_specification" type="string">{'nchunks':1}</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="run_choice_model" type="boolean">True</argument>
            <argument name="choose_job_only_in_residence_zone" type="boolean">True</argument>
            <argument name="residence_id" parser_action="quote_string" type="string">tractcity_id</argument>
	    <argument name="match_choice_attribute_to_jobs" type="boolean">True</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" name="scaling_unplaced_home_based_jobs" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.subarea_scaling_agents_model</class_module>
            <class_name>SubareaScalingAgentsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaScalingAgentsModel</name>
            <argument name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string"></argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string">urbansim_parcel.building.number_of_households &gt; 0</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="debuglevel" type="string">2</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">numpy.logical_and(urbansim_parcel.job.is_home_based, job.building_id&lt;=0)</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string"></argument>
            <output hidden="True" name="output" type="string">filtered_jobs_index_for_sam</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument name="agents_index" type="string">filtered_jobs_index_for_sam</argument>
            <argument name="run_no_area" type="boolean">False</argument>
          </run>
        </structure>
      </model>
      <model name="jobs_event_model" type="model">
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="location_characteristics" type="string">['city_id', 'building_type_id']</argument>
          </run>
        </structure>
      </model>
      <model name="households_event_model" type="model">
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="location_characteristics" type="string">['city_id', 'building_type_id']</argument>
          </run>
        </structure>
      </model>
    </models>
    <estimation_config config_name="estimation_config" name="Estimation Configuration" type="configuration">
      <seed type="integer">1</seed>
      <cache_directory field_description="Directory for base_year cache, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data" field_identifier="Cache Directory" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/base_year_estimation_1K_luv_ct</cache_directory>
      <base_year field_identifier="Base Year" type="integer">2006</base_year>
      <years type="tuple">
        <firstyear field_identifier="Base Year" type="integer">2006</firstyear>
        <lastyear field_identifier="Base Year" type="integer">2006</lastyear>
      </years>
    </estimation_config>
    <travel_model_configuration inherit_parent_values="False" type="dictionary">
      <matrix_variable_map type="dictionary">
        <results type="dictionary">
          <aau1tm type="string">am_single_vehicle_to_work_travel_time</aau1tm>
          <aau1tl type="string">am_single_vehicle_to_work_toll</aau1tl>
          <aau1cs type="string">single_vehicle_to_work_travel_cost</aau1cs>
          <aau1ds type="string">single_vehicle_to_work_travel_distance</aau1ds>
          <awlktm type="string">am_walk_time_in_minutes</awlktm>
          <avehda type="string">am_pk_period_drive_alone_vehicle_trips</avehda>
          <atrtwa type="string">am_total_transit_time_walk</atrtwa>
          <lsum1 type="string">logsum_hbw_am_income_1</lsum1>
          <lsum2 type="string">logsum_hbw_am_income_2</lsum2>
          <lsum3 type="string">logsum_hbw_am_income_3</lsum3>
          <lsum4 type="string">logsum_hbw_am_income_4</lsum4>
        </results>
        <!-- <skims.auto.am type="dictionary">
          <aau1tm type="string">am_single_vehicle_to_work_travel_time</aau1tm>
          <aau1tl type="string">am_single_vehicle_to_work_toll</aau1tl>
         <aau2tm type="string">am_double_vehicle_to_work_travel_time</aau2tm> 
          <aau3tm type="string">am_threeplus_vehicle_to_work_travel_time</aau3tm>  
          <aau1cs type="string">single_vehicle_to_work_tyear_2015_log.txtravel_cost</aau1cs>
          <aau1ds type="string">single_vehicle_to_work_travel_distance</aau1ds>
         </skims.auto.am> 
         <skims.nonmotorized.am type="dictionary"> 
         <abketm type="string">am_bike_to_work_travel_time</abketm>
          <awlktm type="string">am_walk_time_in_minutes</awlktm>
		 </skims.nonmotorized.am>
		 <triptables.nonmotorized.all type="dictionary">
		   <abike type="string">am_biking_person_trips</abike>
           <awalk type="string">am_walking_person_trips</awalk>
		 </triptables.nonmotorized.all>
		 <triptables.autos.am type="dictionary">
		   <avehda type="string">am_pk_period_drive_alone_vehicle_trips</avehda>
		</triptables.autos.am>
		 <skims.transit.am.all_mode  type="dictionary">
          <atrtwa type="string">am_total_transit_time_walk</atrtwa>
         </skims.transit.am.all_mode>
 		<triptables.transit.walkaccess type="dictionary">		
          <atrnwa type="string">am_transit_person_trip_table</atrnwa>
   	    </triptables.transit.walkaccess>
   	    <modechoice.hbwork_inc1 type="dictionary">
         <lsum1 type="string">logsum_hbw_am_income_1</lsum1>
        </modechoice.hbwork_inc1>
        <modechoice.hbwork_inc2 type="dictionary">
          <lsum2 type="string">logsum_hbw_am_income_2</lsum2>
        </modechoice.hbwork_inc2>  
        <modechoice.hbwork_inc3 type="dictionary">
          <lsum3 type="string">logsum_hbw_am_income_3</lsum3>
        </modechoice.hbwork_inc3>  
        <modechoice.hbwork_inc4 type="dictionary">
          <lsum4 type="string">logsum_hbw_am_income_4</lsum4>
        </modechoice.hbwork_inc4> -->
      </matrix_variable_map>
    </travel_model_configuration>
  </model_manager>
  <scenario_manager>
    <scenario executable="True" name="psrc_luv" type="scenario">
      <parent type="scenario_name">PSRC_baseline</parent>
      <description type="string">Subregional simulation for LUV (15-40), including TM skims</description>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="delete_city_from_households" type="model_choice">True</selectable>
        <selectable name="delete_city_from_jobs" type="model_choice">True</selectable>
        <selectable name="real_estate_price_model" type="model_choice">True</selectable>
        <selectable name="postprocess_real_estate_price_model" type="model_choice">True</selectable>
        <selectable name="expected_sales_unit_price_component_model" type="model_choice">True</selectable>
        <selectable name="postprocess_expected_sales_unit_price_component_model" type="model_choice">True</selectable>
        <selectable name="development_proposal_choice_model" type="model_choice">True</selectable>
        <selectable name="building_construction_model" type="model_choice">True</selectable>
        <selectable name="increase_HU_density" type="model_choice">True</selectable>
	<selectable name="increase_job_capacity" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_households" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">True</selectable>
        <selectable name="jobs_event_model" type="model_choice">False</selectable>
        <selectable name="households_event_model" type="model_choice">False</selectable>
        <selectable name="household_transition_model" type="model_choice">True</selectable>
        <selectable name="set_inmigrants_model" type="model_choice">True</selectable>
        <selectable name="employment_transition_model" type="model_choice">True</selectable>
        <selectable name="job_person_consistency_keeper" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="household_location_choice_model" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_households_if_lower_accessibility" type="model_choice">False</selectable>
        <selectable name="employment_relocation_model" type="model_choice">True</selectable>
        <selectable name="employment_location_choice_model" type="model_choice">True<group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable name="governmental_employment_location_choice_model" type="model_choice">True</selectable>
        <selectable name="distribute_unplaced_mining_utilities_jobs_model" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">False</selectable>
        <selectable name="work_at_home_choice_model" type="model_choice">True</selectable>
        <selectable name="workplace_choice_model_for_resident" type="model_choice">True</selectable>
      </models_to_run>
      <models_in_year type="dictionary">
        <models_in_year_category key_name="year" key_value="models_list" type="category_with_special_keys">
          <yearset type="dictionary">
            <year type="integer">2015</year>
            <models_list type="list">["work_at_home_choice_model", "workplace_choice_model_for_resident", "increase_existing_HU_density", "increase_existing_job_capacity", "real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2020</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2025</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2030</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2035</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2040</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
        </models_in_year_category>
      </models_in_year>
      <base_year type="integer">2014</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2015</firstyear>
        <lastyear type="integer">2040</lastyear>
      </years_to_run>
      <seed convert_blank_to_none="True" type="integer">1</seed>
      <flush_variables type="boolean">True</flush_variables>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfigurationNoDB</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel\base_year_2014_inputs\luv_scenario_test</argument>
          <!--<argument name="existing_cache_to_copy" type="directory">D:/opus/data/psrc_parcel/base_year_data_1K_luv_ct</argument>-->
        </argument>
      </creating_baseyear_cache_configuration>
      <travel_model_configuration inherit_parent_values="False" type="dictionary">
        <travel_model_base_directory type="string">f:\4k\skims</travel_model_base_directory>
        <!-- <emme2_batch_file_name type="string">run_model_common_tg_beta.bat 3700 3733 3750 3751 4000</emme2_batch_file_name> -->
        <emme_command type="string">emme -ng 127.0.0.1</emme_command>
        <locations_to_disaggregate type="list">['parcel', 'building']</locations_to_disaggregate>
        <travel_model_input_file_writer type="string">psrc_parcel.travel_model_input_file_writer_emme4</travel_model_input_file_writer>
        <models type="selectable_list">
          <selectable name="opus_emme2.models.get_cache_data_into_emme2" type="selectable">False</selectable>
          <selectable name="opus_emme2.models.run_travel_model" type="selectable">False</selectable>
          <selectable name="psrc_parcel.emme.models.run_export_skims" type="selectable">False</selectable>
          <selectable name="psrc_parcel.emme.models.get_emme4_data_from_h5_into_cache" type="selectable">True</selectable>
        </models>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2015</year>
            <bank type="list">['2010']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2010.ctl</emme2_batch_file_name>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <bank type="list">['2040']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2040.ctl</emme2_batch_file_name>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
    <scenario executable="True" name="psrc_luv_growth_control" type="scenario">
      <parent type="scenario_name">PSRC_baseline</parent>
      <description type="string">Subregional simulation for LUV (15-40), including TM skims; control growth in non-LUV years</description>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="delete_city_from_households" type="model_choice">True</selectable>
        <selectable name="delete_city_from_jobs" type="model_choice">True</selectable>
        <selectable name="real_estate_price_model" type="model_choice">True</selectable>
        <selectable name="postprocess_real_estate_price_model" type="model_choice">True</selectable>
        <selectable name="expected_sales_unit_price_component_model" type="model_choice">True</selectable>
        <selectable name="postprocess_expected_sales_unit_price_component_model" type="model_choice">True</selectable>
	<selectable name="cap_residential_development_model" type="model_choice">True</selectable>
	<selectable name="cap_nonresidential_development_model" type="model_choice">True</selectable>
        <selectable name="development_proposal_choice_model_luv2" type="model_choice">True</selectable>
        <selectable name="building_construction_model" type="model_choice">True</selectable>
        <selectable name="increase_HU_density" type="model_choice">True</selectable>
	<selectable name="increase_job_capacity" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_households" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">True</selectable>
        <selectable name="jobs_event_model" type="model_choice">False</selectable>
        <selectable name="households_event_model" type="model_choice">False</selectable>
        <selectable name="household_transition_model" type="model_choice">True</selectable>
        <selectable name="set_inmigrants_model" type="model_choice">True</selectable>
        <selectable name="employment_transition_model" type="model_choice">True</selectable>
        <selectable name="job_person_consistency_keeper" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="household_location_choice_model" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_households_if_lower_accessibility" type="model_choice">False</selectable>
        <selectable name="employment_relocation_model" type="model_choice">True</selectable>
        <selectable name="employment_location_choice_model" type="model_choice">True<group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable name="governmental_employment_location_choice_model" type="model_choice">True</selectable>
        <selectable name="distribute_unplaced_mining_utilities_jobs_model" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">False</selectable>
        <selectable name="work_at_home_choice_model" type="model_choice">True</selectable>
        <selectable name="workplace_choice_model_for_resident" type="model_choice">True</selectable>
      </models_to_run>
      <models_in_year type="dictionary">
        <models_in_year_category key_name="year" key_value="models_list" type="category_with_special_keys">
          <yearset type="dictionary">
	   <year type="integer">2014</year>
	   <models_list type="list">["assign_work_at_home_to_workers", "work_at_home_choice_model_by_tractcity",  "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident"]</models_list>
	   </yearset>
	   <yearset type="dictionary">
            <year type="integer">2015</year>
            <models_list type="list">["increase_existing_HU_density", "increase_existing_job_capacity", "real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2020</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2025</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2030</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2035</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2040</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
        </models_in_year_category>
      </models_in_year>
      <base_year type="integer">2014</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2014</firstyear>
        <lastyear type="integer">2040</lastyear>
      </years_to_run>
      <seed convert_blank_to_none="True" type="integer">1</seed>
      <flush_variables type="boolean">True</flush_variables>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfigurationNoDB</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel\base_year_2014_inputs\luv_flu_updated</argument>
          <!--<argument name="existing_cache_to_copy" type="directory">D:/opus/data/psrc_parcel/base_year_data_1K_luv_ct</argument>-->
        </argument>
      </creating_baseyear_cache_configuration>
      <travel_model_configuration inherit_parent_values="False" type="dictionary">
        <travel_model_base_directory type="string">f:\4k\skims</travel_model_base_directory>
        <!-- <emme2_batch_file_name type="string">run_model_common_tg_beta.bat 3700 3733 3750 3751 4000</emme2_batch_file_name> -->
        <emme_command type="string">emme -ng 127.0.0.1</emme_command>
        <locations_to_disaggregate type="list">['parcel', 'building']</locations_to_disaggregate>
        <travel_model_input_file_writer type="string">psrc_parcel.travel_model_input_file_writer_emme4</travel_model_input_file_writer>
        <models type="selectable_list">
          <selectable name="opus_emme2.models.get_cache_data_into_emme2" type="selectable">False</selectable>
          <selectable name="opus_emme2.models.run_travel_model" type="selectable">False</selectable>
          <selectable name="psrc_parcel.emme.models.run_export_skims" type="selectable">False</selectable>
          <selectable name="psrc_parcel.emme.models.get_emme4_data_from_h5_into_cache" type="selectable">True</selectable>
        </models>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2015</year>
            <bank type="list">['2010']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2010.ctl</emme2_batch_file_name>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <bank type="list">['2040']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2040.ctl</emme2_batch_file_name>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
    <scenario executable="True" name="psrc_luv_test" type="scenario">
      <parent type="scenario_name">PSRC_baseline</parent>
      <description type="string">Subregional simulation for LUV (11-40), including TM skims</description>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="delete_city_from_households" type="model_choice">True</selectable>
        <selectable name="delete_city_from_jobs" type="model_choice">True</selectable>
        <selectable name="real_estate_price_model" type="model_choice">False</selectable>
        <selectable name="postprocess_real_estate_price_model" type="model_choice">False</selectable>
        <selectable name="expected_sales_unit_price_component_model" type="model_choice">False</selectable>
        <selectable name="postprocess_expected_sales_unit_price_component_model" type="model_choice">False</selectable>
	<selectable name="cap_residential_development_model" type="model_choice">True</selectable>
	<selectable name="cap_nonresidential_development_model" type="model_choice">True</selectable>
        <selectable name="development_proposal_choice_model_luv2" type="model_choice">True</selectable>
        <selectable name="development_proposal_choice_model" type="model_choice">False</selectable>
        <selectable name="building_construction_model" type="model_choice">False</selectable>
        <selectable name="increase_HU_density" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_households" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">False</selectable>
        <selectable name="jobs_event_model" type="model_choice">True</selectable>
        <selectable name="households_event_model" type="model_choice">True</selectable>
        <selectable name="household_transition_model" type="model_choice">True</selectable>
        <selectable name="set_inmigrants_model" type="model_choice">False</selectable>
        <selectable name="employment_transition_model" type="model_choice">False</selectable>
        <selectable name="job_person_consistency_keeper" type="model_choice">False</selectable>
        <selectable name="household_relocation_model" type="model_choice">False</selectable>
        <selectable name="household_location_choice_model" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_households_if_lower_accessibility" type="model_choice">False</selectable>
        <selectable name="employment_relocation_model" type="model_choice">False</selectable>
        <selectable name="employment_location_choice_model" type="model_choice">False<group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable name="governmental_employment_location_choice_model" type="model_choice">False</selectable>
        <selectable name="distribute_unplaced_mining_utilities_jobs_model" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">False</selectable>
        <selectable name="work_at_home_choice_model" type="model_choice">False</selectable>
        <selectable name="workplace_choice_model_for_resident" type="model_choice">False</selectable>
      </models_to_run>
      <models_in_year type="dictionary">
        <models_in_year_category key_name="year" key_value="models_list" type="category_with_special_keys">
          <yearset type="dictionary">
	  <year type="integer">2014</year>
	   <models_list type="list">["assign_work_at_home_to_workers", "work_at_home_choice_model_by_tractcity",  "work_at_home_choice_model_by_subarea"]</models_list>
	   </yearset>
	   <yearset type="dictionary">
            <year type="integer">2015</year>
            <models_list type="list">["assign_city_to_jobs", "employment_transition_model", "work_at_home_choice_model_by_subarea"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2020</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2025</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2030</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2035</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "set_inmigrants_model", "employment_transition_model", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2040</year>
            <models_list type="list">["expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model", "employment_transition_model", "development_proposal_choice_model_by_subarea", "building_construction_model",  "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
        </models_in_year_category>
      </models_in_year>
      <base_year type="integer">2014</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2014</firstyear>
        <lastyear type="integer">2015</lastyear>
      </years_to_run>
      <seed convert_blank_to_none="True" type="integer">1</seed>
      <flush_variables type="boolean">True</flush_variables>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfigurationNoDB</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel\base_year_2014_inputs</argument>
          <!--<argument name="existing_cache_to_copy" type="directory">/Volumes/e$/opusgit/urbansim_data/data/psrc_parcel/base_year_2014_inputs/luv_scenario_test</argument>-->
	  <!--<argument name="existing_cache_to_copy" type="directory">/Volumes/e$/opusgit/urbansim_data/data/psrc_parcel/base_year_2014_inputs/hana_test</argument>-->
        </argument>
      </creating_baseyear_cache_configuration>
      <travel_model_configuration inherit_parent_values="False" type="dictionary">
        <travel_model_base_directory type="string">d:\4K_V405</travel_model_base_directory>
        <!-- <emme2_batch_file_name type="string">run_model_common_tg_beta.bat 3700 3733 3750 3751 4000</emme2_batch_file_name> -->
        <emme_command type="string">emme -ng 127.0.0.1</emme_command>
        <locations_to_disaggregate type="list">['parcel', 'building']</locations_to_disaggregate>
        <travel_model_input_file_writer type="string">psrc_parcel.travel_model_input_file_writer_emme4</travel_model_input_file_writer>
        <models type="selectable_list">
          <selectable name="psrc_parcel.emme.models.get_cache_data_into_emme4" type="selectable">True</selectable>
          <selectable name="psrc_parcel.emme.models.run_travel_model" type="selectable">True</selectable>
          <selectable name="psrc_parcel.emme.models.run_export_skims" type="selectable">True</selectable>
          <selectable name="psrc_parcel.emme.models.get_emme4_data_from_h5_into_cache" type="selectable">True</selectable>
        </models>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2014</year>
            <bank type="list">['2015']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2015.ctl</emme2_batch_file_name>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <bank type="list">['2040']</bank>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <bank type="list">['2040']</bank>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2040</year>
            <bank type="list">['2040']</bank>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
  </scenario_manager>
  <results_manager>
    </results_manager>
</opus_project>
