<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <description type="string">Configuration for the PSRC parcel sub-regional project</description>
    <parent type="file">../psrc_parcel_just_friends_fair_dpcm.xml</parent>
    <expression_library type="dictionary">
    </expression_library>
  </general>
  <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model copyable="True" name="expected_sales_unit_price_component_model_relaxed_redevelopment" type="model">
        <dependencies type="list">['real_estate_price_model', 'postprocess_real_estate_price_model']</dependencies>
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.expected_sales_unit_price_comp_model</class_module>
            <class_name>ExpectedSalesUnitPriceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">ExpectedSalesUnitPriceModel</name>
            <argument model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string">building_type_id</argument>
            <argument model_dependency_type="variable" name="filter_attribute" parser_action="quote_string" type="string">urbansim_parcel.development_project_proposal.is_size_fit</argument>
            <argument name="outcome_attribute_name" parser_action="quote_string" type="string">ln_expected_sales_price_per_sqft</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="parcel_filter_for_new_development" parser_action="quote_string" type="string">has_vacant_land=numpy.logical_or(urbansim_parcel.parcel.vacant_land_area==parcel.parcel_sqft, urbansim_parcel.parcel.is_residential_land_use_type * (safe_array_divide(parcel.parcel_sqft, urbansim_parcel.parcel.used_land_area) &gt; 2.5 ) * ((parcel.aggregate(building.improvement_value, function=maximum) &lt; 200000)))</argument>
            <argument name="parcel_filter_for_redevelopment" parser_action="quote_string" type="string">capacity_opportunity_non_gov=((safe_array_divide(psrc_parcel.parcel.max_developable_capacity, urbansim_parcel.parcel.building_sqft)&gt;1.1)*(parcel.aggregate(urbansim_parcel.building.is_governmental)==0)*(numpy.logical_not(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)&lt;1))*(numpy.logical_or((safe_array_divide(psrc_parcel.parcel.max_developable_capacity, urbansim_parcel.parcel.building_sqft)&gt;6),(parcel.land_use_type_id&lt;&gt;15)))*(parcel.aggregate(building.job_capacity)&lt;500)*((safe_array_divide(urbansim_parcel.parcel.improvement_value,parcel.parcel_sqft))&lt;250))</argument>
            <argument convert_blank_to_none="True" name="template_filter" parser_action="quote_string" type="string"></argument>
            <argument hidden="True" name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">expected_sales_unit_price_component_model_specification</argument>
            <argument hidden="True" name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">expected_sales_unit_price_component_model_coefficients</argument>
            <argument convert_blank_to_none="True" hidden="True" name="spec_replace_module_variable_pair" type="string"></argument>
            <argument hidden="False" name="proposed_units_variable" parser_action="quote_string" type="string">psrc_parcel.development_project_proposal.units_proposed_plus_minimum_1DU_per_legal_lot_yield</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument hidden="False" name="accept_only_larger_proposals_for_redevelopment" type="boolean">True</argument>
            <output hidden="True" name="output" type="string">(development_project_proposal, development_project_proposal_component, specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="dataset" type="string">development_project_proposal_component</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
          </run>
        </structure>
      </model>
      <model name="development_proposal_choice_model_luv_years" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.development_proposal_sampling_model_by_subarea_for_refinement</class_module>
            <class_name>DevelopmentProposalSamplingModelBySubareaForRefinement</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">DevelopmentProposalSamplingModelBySubareaForRefinement</name>
            <argument model_dependency_type="dataset" name="subarea_name" parser_action="quote_string" type="string">city</argument>
            <argument model_dependency_type="dataset" name="intermediates_to_realestate" parser_action="quote_string" type="string">parcel</argument>
            <argument model_dependency_type="dataset" name="proposal_set" type="string">development_project_proposal</argument>
            <argument model_dependency_type="variable" name="weight_string" parser_action="quote_string" type="string">pricepsft = development_project_proposal.disaggregate((numpy.clip(safe_array_divide(parcel.land_value, parcel.parcel_sqft)*(1.0*(parcel.land_use_type_id &lt;&gt; 26) + 3.44*(parcel.land_use_type_id == 26)), 0, 1e8)))</argument>
            <!-- <argument model_dependency_type="variable" name="weight_string" parser_action="quote_string" type="string">psrc_parcel.development_project_proposal.expected_sales_price_per_sqft_luv</argument>-->
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter_attribute" parser_action="quote_string" type="string"></argument>
          </init>
          <run type="dictionary">
            <argument convert_blank_to_none="True" name="location_ids_to_process" type="string"></argument>
            <argument name="process_planned" parser_action="quote_string" type="boolean">True</argument>
            <argument name="modify_start_year" parser_action="quote_string" type="boolean">False</argument>
            <argument name="n" type="integer">50</argument>
            <argument name="year" type="string">year</argument>
            <argument name="current_year" type="string">year</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="within_parcel_selection_weight_string" parser_action="quote_string" type="string">urbansim_parcel.development_project_proposal.building_sqft</argument>
            <argument name="within_parcel_selection_compete_among_types" parser_action="quote_string" type="boolean">True</argument>
            <argument name="within_parcel_selection_threshold" type="integer">50</argument>
            <argument name="within_parcel_selection_n" type="integer">15</argument>
            <argument convert_blank_to_none="True" name="type" parser_action="quote_string" type="string"></argument>
            <argument name="between_parcel_selection_elimination_threshold" type="integer">30</argument>
            <argument name="targets_attributes_to_remove" type="string">["county_id"]</argument>
            <output hidden="True" name="output" type="string">(development_project_proposal, demolished_buildings)</output>
          </run>
        </structure>
      </model>
      <model name="increase_HU_density" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Increase HU Density in Centers</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <!--<argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.residential_units*building.disaggregate(psrc_parcel.parcel.modify_rgc_hh_capacity)).astype(int32)</argument>-->
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.residential_units*1.25).astype(int32)</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">residential_units</argument>
            <argument name="dataset_filter" parser_action="quote_string" type="string">(building.year_built == building.year_built.max())*building.disaggregate(parcel.growth_center_id &gt;= 500)*building.disaggregate(parcel.growth_center_id &lt; 600) </argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="increase_existing_HU_density" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Increase Exising HU Density in Centers</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <!--<argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.residential_units*building.disaggregate(psrc_parcel.parcel.modify_rgc_hh_capacity)).astype(int32)</argument>-->
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.residential_units*1.25).astype(int32)</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">residential_units</argument>
            <argument name="dataset_filter" parser_action="quote_string" type="string">building.disaggregate(parcel.growth_center_id &gt;= 500)*building.disaggregate(parcel.growth_center_id &lt; 600) </argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="increase_job_capacity" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Increase Job Density in Centers</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <!--<argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.non_residential_sqft*building.disaggregate(psrc_parcel.parcel.modify_rgc_emp_capacity)).astype(int32)</argument>-->
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.non_residential_sqft*1.25).astype(int32)</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">non_residential_sqft</argument>
            <argument name="dataset_filter" parser_action="quote_string" type="string">(building.year_built == building.year_built.max())*building.disaggregate(parcel.growth_center_id &gt;= 500)*building.disaggregate(parcel.growth_center_id &lt; 600) </argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="increase_existing_job_capacity" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Increase Exising Job Density in Centers</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">building</argument>
            <!--<argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.job_capacity*building.disaggregate(psrc_parcel.parcel.modify_rgc_emp_capacity)).astype(int32)</argument>-->
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(building.job_capacity*1.25).astype(int32)</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">job_capacity</argument>
            <argument name="dataset_filter" parser_action="quote_string" type="string">building.disaggregate(parcel.growth_center_id &gt;= 500)*building.disaggregate(parcel.growth_center_id &lt; 600) </argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="assign_city_to_households" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Assign city_id Attribute to Households</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">household</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">psrc_parcel.household.city_id</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">city_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="assign_city_to_jobs" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Assign city_id Attribute to Jobs</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">job</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">psrc_parcel.job.city_id</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">city_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="delete_city_from_households" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.delete_attribute_model</class_module>
            <class_name type="string">DeleteAttributeModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeleteAttributeModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Delete city_id Attribute from Households</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">household</argument>
            <argument name="attribute" parser_action="quote_string" type="string">city_id</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="delete_city_from_jobs" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.delete_attribute_model</class_module>
            <class_name type="string">DeleteAttributeModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">DeleteAttributeModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Delete city_id Attribute from Jobs</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">job</argument>
            <argument name="attribute" parser_action="quote_string" type="string">city_id</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="household_transition_model_by_subarea" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument name="dataset" type="string">household</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Transition Model by Subarea</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">HTMS</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="control_total_table" parser_action="quote_string" type="string">annual_household_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">total_number_of_households</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'building_id':-1}</argument>
            <argument name="sync_dataset" type="string">person</argument>
            <argument name="reset_sync_dataset_attribute_value" type="string">{'job_id':-1}</argument>
            <argument model_dependency_type="variable" name="sampling_threshold" parser_action="quote_string" type="string">safe_array_divide(control_total.number_of_agents(household), control_total.total_number_of_households) &gt; 0.3</argument>
            <argument name="sampling_hierarchy" type="string">['city_id', 'county_id']</argument>
          </run>
        </structure>
      </model>
      <model name="employment_transition_model_by_subarea" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument name="dataset" type="string">job</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Employment Transition Model by Subarea</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">ETMS</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="control_total_table" parser_action="quote_string" type="string">annual_employment_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <output hidden="True" name="output" type="string">etm_index</output>
            <argument name="year" type="string">year</argument>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">total_number_of_jobs</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'building_id':-1}</argument>
            <argument model_dependency_type="variable" name="sampling_threshold" parser_action="quote_string" type="string">safe_array_divide(control_total.number_of_agents(job), control_total.total_number_of_jobs) &gt; 0.3</argument>
            <argument name="sampling_hierarchy" type="string">['city_id', 'county_id']</argument>
          </run>
        </structure>
      </model>
      <model name="household_relocation_model_by_subarea" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.agent_relocation_model</class_module>
            <class_name>AgentRelocationModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="location_id_name" parser_action="quote_string" type="string">building_id</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Relocation Model with Zero Rates</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">AgentRelocationModel</name>
            <argument convert_blank_to_none="True" name="probabilities" parser_action="quote_string" type="string"></argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">hrm_resources_subarea</output>
            <argument name="rate_storage" type="string">None</argument>
            <argument convert_blank_to_none="True" name="rate_table" parser_action="quote_string" type="string"></argument>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">hrm_index</output>
            <argument name="resources" type="string">hrm_resources_subarea</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
          </run>
        </structure>
      </model>
      <model name="employment_relocation_model_by_subarea" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.agent_relocation_model</class_module>
            <class_name>AgentRelocationModel</class_name>
          </import>
          <init type="dictionary">
            <argument name="location_id_name" parser_action="quote_string" type="string">building_id</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Employment Relocation Model</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <name name="name" type="string">AgentRelocationModel</name>
            <argument convert_blank_to_none="True" name="probabilities" parser_action="quote_string" type="string"></argument>
          </init>
          <prepare_for_run type="dictionary">
            <output name="output" type="string">erm_resources_subarea</output>
            <argument name="rate_storage" type="string">None</argument>
            <argument convert_blank_to_none="True" name="rate_table" parser_action="quote_string" type="string"></argument>
            <argument name="probability_attribute" parser_action="quote_string" type="string">job_relocation_probability</argument>
            <name name="name" type="string">prepare_for_run</name>
          </prepare_for_run>
          <run type="dictionary">
            <output name="output" type="string">erm_index</output>
            <argument name="resources" type="string">erm_resources_subarea</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
          </run>
        </structure>
      </model>
      <model name="household_location_choice_model_by_subarea" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.subarea_household_location_choice_model</class_module>
            <class_name>SubareaHouseholdLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaHouseholdLocationChoiceModel</name>
            <argument model_dependency_type="variable" name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string"></argument>
            <argument convert_blank_to_none="True" name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <!-- <argument name="number_of_units_string" parser_action="quote_string" type="string" convert_blank_to_none="True"/> -->
            <argument model_dependency_type="variable" name="number_of_units_string" parser_action="quote_string" type="string">residential_units</argument>
            <argument model_dependency_type="variable" name="number_of_agents_string" parser_action="quote_string" type="string">number_of_households</argument>
            <argument name="location_id_string" parser_action="quote_string" type="string">building_id</argument>
            <argument model_dependency_type="variable" name="simulation_weight_string" parser_action="quote_string" type="string">urbansim_parcel.building.vacant_residential_units</argument>
            <argument model_dependency_type="variable" name="capacity_string" parser_action="quote_string" type="string">vacant_residential_units</argument>
            <argument name="sample_size_locations" type="integer">200</argument>
            <argument model_dependency_type="variable" name="submodel_string" parser_action="quote_string" type="string">inmigrant_code=household.is_inmigrant+1</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim_parcel</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="run_config" type="dictionary">
              <key name="lottery_max_iterations" type="integer">20</key>
              <key name="include_mnl_bias_correction_term" type="boolean">False</key>
              <key name="accept_unavailability_of_choices" type="boolean">True</key>
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">household_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">household_location_choice_model_specification</argument>
            <output hidden="True" name="output" type="string">(_specification, _coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument hidden="True" name="agents_index" type="string">hrm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':5000}</argument>
            <argument name="flush_after_each_subarea" type="boolean">True</argument>
            <argument name="run_no_area" type="boolean">False</argument>
            <argument name="maximum_runs" type="integer">2</argument>
            <argument hidden="True" name="coefficients" type="string">_coefficients</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">_specification</argument>
          </run>
        </structure>
      </model>
      <model name="employment_location_choice_model_mpds" type="model">
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
          <seed convert_blank_to_none="True" type="integer">1</seed>
        </estimation_config>
        <structure type="dictionary">
          <estimate type="dictionary">
            <argument name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">index</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
          </estimate>
          <group_by_attribute type="tuple">
            <argument name="grouping_table" type="string">home_based_status</argument>
            <argument name="grouping_column" type="string">name</argument>
          </group_by_attribute>
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.employment_location_choice_model</class_module>
            <class_name>EmploymentLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">EmploymentLocationChoiceModel</name>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="estimation" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation_with_diagnose</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="location_set" type="string">building</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string">job.sector_id</argument>
            <argument name="sample_size_locations" type="integer">30</argument>
            <argument name="capacity_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>
            <!--<argument name="estimation_weight_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>-->
            <argument name="estimation_weight_string" parser_action="quote_string" type="string">psrc_parcel.building.fraction_of_SSS_jobs_of_sector_SUBMODEL_combined </argument>
            <!--<argument name="simulation_weight_string" parser_action="quote_string" type="string">(urbansim_parcel.building.fraction_of_jobs_of_sector_SUBMODEL+(urbansim_parcel.building.number_of_jobs == 0)*psrc_parcel.building.fraction_of_jobs_of_sector_SUBMODEL_static)* (psrc_parcel.building.vacant_SSS_job_space &gt; 0) </argument>-->
            <argument name="simulation_weight_string" parser_action="quote_string" type="string">(3*(building.year_built &gt; 2000) + (building.year_built &lt;= 2000))*(((numpy.logical_not(psrc_parcel.building.has_vacancy_for_new_sector) * urbansim_parcel.building.fraction_of_jobs_of_sector_SUBMODEL)+ (psrc_parcel.building.has_vacancy_for_new_sector * psrc_parcel.building.fraction_of_jobs_of_sector_SUBMODEL_static))*(psrc_parcel.building.vacant_SSS_job_space &gt; 0)) </argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string"></argument>
            <argument name="estimation_size_agents" type="float">1.</argument>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument name="number_of_units_string" parser_action="quote_string" type="string">total_SSS_job_space</argument>
            <argument name="run_config" type="dictionary">
              <key convert_blank_to_none="True" name="agent_units_string" type="string"></key>
              <key name="lottery_max_iterations" type="integer">10</key>
              <key name="sample_alternatives_by_submodel" type="boolean">True</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key name="sample_alternatives_by_submodel" type="boolean">True</key>
            </argument>
            <argument name="variable_package" parser_action="quote_string" type="string">psrc_parcel</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <output hidden="True" name="output" type="string">(specification, index)</output>
            <argument name="agent_set" type="string">job</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string">jobs_for_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="portion_to_unplace" type="float">0</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string">numpy.logical_and(job.building_id&gt;0, job.disaggregate(building.non_residential_sqft) &gt; 0)</argument>
            <argument name="join_datasets" type="boolean">True</argument>
          </prepare_for_estimate>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
            <argument name="agent_filter" parser_action="quote_string" type="string">job.sector_id &lt; 18</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">employment_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">erm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <argument name="maximum_runs" type="integer">3</argument>
          </run>
        </structure>
      </model>
      <model name="employment_location_choice_model_by_subarea" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim.models.subarea_employment_location_choice_model</class_module>
            <class_name>SubareaEmploymentLocationChoiceModel</class_name>
          </import>
          <group_by_attribute type="tuple">
            <argument model_dependency_type="table" name="grouping_table" type="string">home_based_status</argument>
            <argument name="grouping_column" type="string">name</argument>
          </group_by_attribute>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaEmploymentLocationChoiceModel</name>
            <argument model_dependency_type="variable" name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument name="agents_grouping_attribute" parser_action="quote_string" type="string">job.home_based_status</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">psrc_parcel.building.vacant_non_home_based_job_space &gt; 0</argument>
            <argument convert_blank_to_none="True" name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <!-- <argument name="number_of_units_string" parser_action="quote_string" type="string" convert_blank_to_none="True"/> -->
            <argument model_dependency_type="variable" name="number_of_units_string" parser_action="quote_string" type="string">total_SSS_job_space</argument>
            <argument model_dependency_type="variable" name="number_of_agents_string" parser_action="quote_string" type="string">number_of_SSS_jobs</argument>
            <argument name="sample_size_locations" type="integer">200</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument name="submodel_string" parser_action="quote_string" type="string">job.sector_id</argument>
            <argument model_dependency_type="variable" name="capacity_string" parser_action="quote_string" type="string">vacant_SSS_job_space</argument>
            <argument name="simulation_weight_string" parser_action="quote_string" type="string">((numpy.logical_not(psrc_parcel.building.has_vacancy_for_new_sector) * urbansim_parcel.building.fraction_of_jobs_of_sector_SUBMODEL)+(psrc_parcel.building.has_vacancy_for_new_sector * psrc_parcel.building.fraction_of_jobs_of_lum_sector_SUBMODEL_static))*safe_array_divide(psrc_parcel.building.vacant_SSS_job_space, psrc_parcel.building.total_SSS_job_space)</argument>
            <argument name="compute_capacity_flag" type="boolean">True</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">psrc_parcel</argument>
            <argument name="run_config" type="dictionary">
              <key convert_blank_to_none="True" name="agent_units_string" type="string"></key>
              <key name="lottery_max_iterations" type="integer">10</key>
              <key name="sample_alternatives_by_submodel" type="boolean">True</key>
              <key name="accept_unavailability_of_choices" type="boolean">True</key>
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="agent_filter" parser_action="quote_string" type="string">job.sector_id &lt; 12</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">employment_location_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">employment_location_choice_model_specification</argument>
            <output hidden="True" name="output" type="string">(specification, coefficients)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument hidden="True" name="agents_index" type="string">erm_index</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':5000}</argument>
            <argument name="maximum_runs" type="integer">2</argument>
            <argument name="flush_after_each_subarea" type="boolean">True</argument>
            <argument name="run_no_area" type="boolean">False</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" inherit_parent_values="False" name="governmental_employment_location_choice_model_by_subarea" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.subarea_scaling_jobs_model</class_module>
            <class_name>SubareaScalingJobsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaScalingJobsModel</name>
            <argument name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">urbansim_parcel.building.is_governmental</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="debuglevel" type="string">2</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">numpy.logical_or(job.sector_id==12, job.sector_id==13)</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <output hidden="True" name="output" type="string">filtered_erm_index</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument name="agents_index" type="string">filtered_erm_index</argument>
            <argument name="run_no_area" type="boolean">False</argument>
          </run>
        </structure>
      </model>
      <model name="governmental_employment_location_choice_model" type="model">
        <structure type="dictionary">
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">numpy.logical_or(job.sector_id==12, job.sector_id==13)</argument>
            <argument name="agents_index" type="string">erm_index</argument>
            <output hidden="True" name="output" type="string">filtered_erm_index</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument hidden="True" name="agents_index" type="string">filtered_erm_index</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" name="scaling_unplaced_jobs" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.subarea_scaling_agents_model</class_module>
            <class_name>SubareaScalingAgentsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaScalingAgentsModel</name>
            <argument name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string">sector_id</argument>
            <argument model_dependency_type="variable" name="weights" parser_action="quote_string" type="string">building.disaggregate(5*(parcel.growth_center_id &gt;= 500) + (parcel.growth_center_id &lt; 500))</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="debuglevel" type="string">2</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">numpy.logical_and(urbansim_parcel.job.is_non_home_based, job.building_id&lt;=0)</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string"></argument>
            <output hidden="True" name="output" type="string">filtered_jobs_index_for_sam</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument name="agents_index" type="string">filtered_jobs_index_for_sam</argument>
            <argument name="run_no_area" type="boolean">False</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" name="scaling_unplaced_households" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.subarea_scaling_agents_model</class_module>
            <class_name>SubareaScalingAgentsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaScalingAgentsModel</name>
            <argument name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument name="filter" parser_action="quote_string" type="string"></argument>
            <argument model_dependency_type="variable" name="weights" parser_action="quote_string" type="string">building.disaggregate(5*(parcel.growth_center_id &gt;= 500) + (parcel.growth_center_id &lt; 500))</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="debuglevel" type="string">2</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">household.building_id &lt;= 0</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string"></argument>
            <output hidden="True" name="output" type="string">filtered_hhs_index_for_sam</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">household</argument>
            <argument name="agents_index" type="string">filtered_hhs_index_for_sam</argument>
            <argument name="run_no_area" type="boolean">False</argument>
          </run>
        </structure>
      </model>
      <model name="assign_work_at_home_to_workers" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
            <argument name="model_name" parser_action="quote_string" type="string">Assign work_at_home Attribute to Persons</argument>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">person</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">person.job_id &gt; 0</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">work_at_home</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model copyable="True" hidden="False" name="work_at_home_choice_model_by_subarea" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.work_at_home_choice_model</class_module>
            <class_name>WorkAtHomeChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">WorkAtHomeChoiceModel</name>
            <argument model_dependency_type="dataset" name="choice_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">psrc_parcel.job.is_untaken_home_based_job</argument>
            <argument name="match_number_of_jobs" type="boolean">False</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">work_at_home_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">work_at_home_choice_model_specification</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">urbansim_parcel.person.is_worker_without_job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <output name="output" type="string">(specification, coefficients, _index)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">_index</argument>
            <argument name="chunk_specification" type="string">{'nchunks':1}</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="run_choice_model" type="boolean">True</argument>
            <argument name="choose_job_only_in_residence_zone" type="boolean">True</argument>
            <argument name="residence_id" parser_action="quote_string" type="string">city_id</argument>
            <argument name="match_choice_attribute_to_jobs" type="boolean">True</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" name="work_at_home_choice_model_by_tractcity" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.work_at_home_choice_model</class_module>
            <class_name>WorkAtHomeChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">WorkAtHomeChoiceModel</name>
            <argument model_dependency_type="dataset" name="choice_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">psrc_parcel.job.is_untaken_home_based_job</argument>
            <argument name="match_number_of_jobs" type="boolean">False</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">work_at_home_choice_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">work_at_home_choice_model_specification</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">urbansim_parcel.person.is_worker_without_job</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <output name="output" type="string">(specification, coefficients, _index)</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">_index</argument>
            <argument name="chunk_specification" type="string">{'nchunks':1}</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="run_choice_model" type="boolean">True</argument>
            <argument name="choose_job_only_in_residence_zone" type="boolean">True</argument>
            <argument name="residence_id" parser_action="quote_string" type="string">tractcity_id</argument>
            <argument name="match_choice_attribute_to_jobs" type="boolean">True</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" name="scaling_unplaced_home_based_jobs" type="model">
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">urbansim_parcel.models.subarea_scaling_agents_model</class_module>
            <class_name>SubareaScalingAgentsModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">SubareaScalingAgentsModel</name>
            <argument name="subarea_id_name" parser_action="quote_string" type="string">city_id</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string"></argument>
            <argument convert_blank_to_none="True" name="filter" parser_action="quote_string" type="string">urbansim_parcel.building.number_of_households &gt; 0</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="debuglevel" type="string">2</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">numpy.logical_and(urbansim_parcel.job.is_home_based, job.building_id&lt;=0)</argument>
            <argument convert_blank_to_none="True" name="agents_index" type="string"></argument>
            <output hidden="True" name="output" type="string">filtered_jobs_index_for_sam</output>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="location_set" type="string">building</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">job</argument>
            <argument name="agents_index" type="string">filtered_jobs_index_for_sam</argument>
            <argument name="run_no_area" type="boolean">False</argument>
          </run>
        </structure>
      </model>
      <model name="jobs_event_model" type="model">
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="location_characteristics" type="string">['city_id', 'building_type_id']</argument>
          </run>
        </structure>
      </model>
      <model name="households_event_model" type="model">
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="location_characteristics" type="string">['city_id', 'building_type_id']</argument>
          </run>
        </structure>
      </model>
      <model name="employment_location_choice_model" type="model">
        <structure type="dictionary">
          <init type="dictionary">
            <!--<argument name="simulation_weight_string" parser_action="quote_string" type="string">((numpy.logical_not(psrc_parcel.building.has_vacancy_for_new_sector) * urbansim_parcel.building.fraction_of_jobs_of_sector_SUBMODEL)+ (psrc_parcel.building.has_vacancy_for_new_sector * psrc_parcel.building.fraction_of_jobs_of_sector_SUBMODEL_static))*psrc_parcel.building.vacant_SSS_job_space</argument>-->
            <argument name="simulation_weight_string" parser_action="quote_string" type="string">((numpy.logical_not(psrc_parcel.building.has_vacancy_for_new_sector) * urbansim_parcel.building.fraction_of_jobs_of_sector_SUBMODEL)+(psrc_parcel.building.has_vacancy_for_new_sector * psrc_parcel.building.fraction_of_jobs_of_lum_sector_SUBMODEL_static))*safe_array_divide(psrc_parcel.building.vacant_SSS_job_space, psrc_parcel.building.total_SSS_job_space)</argument>
          </init>
          <prepare_for_run type="dictionary">
            <argument name="agent_filter" parser_action="quote_string" type="string">job.sector_id &lt; 12</argument>
          </prepare_for_run>
        </structure>
      </model>
      <model name="home_school_for_younger_children_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.home_school_model</class_module>
            <class_name type="string">HomeSchoolModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">HomeSchoolModel</name>
            <argument name="choice_set" type="string">[0,1]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" model_dependency_type="variable" name="submodel_string" type="string"></argument>
            <argument model_dependency_type="variable" name="choice_attribute_name" parser_action="quote_string" type="string">home_school</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">hs_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"></argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, hs_index)</output>
            <argument convert_blank_to_none="True" model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agent_filter" parser_action="quote_string" type="string">is_student_not_oldest = psrc_parcel.person.has_older_sibling_in_school * (person.student==1)</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">home_school_for_younger_children_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">home_school_for_younger_children_model_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agent_filter" parser_action="quote_string" type="string">sfilter = psrc_parcel.person.has_older_sibling_in_school * numpy.logical_and(person.is_in_school, numpy.logical_or(person.stype == 2, person.stype == 6))</argument>
            <!--<argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(psrc_parcel.person.has_older_sibling, numpy.logical_and(person.is_in_school, numpy.logical_or(person.stype == 2, person.stype == 6))) </argument>-->
            <argument model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <equation equation_id="1" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec coefficient_name="constant" name="constant"></variable_spec>
                <!--  <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>
                 <variable_spec name="person.is_high_income" coefficient_name="is_high_income"/>
                 <variable_spec name="person.is_low_income" coefficient_name="is_low_income"/>
                <variable_spec name="person.age" coefficient_name="age"/>
                <variable_spec name="person.is_male" coefficient_name="is_male"/>
                <variable_spec name="person.lives_in_rural"/>
                <variable_spec name="person.timetocbd"/>
                <variable_spec name="person.has_nonworkers" coefficient_name="has_nonworkers"/>                                
                <variable_spec name="person.hhchild" coefficient_name="children"/>  
                <variable_spec name="person.has_older_sibl"/> 
                <variable_spec name="person.npriv_schools"/>
                <variable_spec name="person.zone_school_totscore"/>
                <variable_spec name="person.no_good_publ_schools"/>
                <variable_spec name="person.npubl_schools"/>
                <variable_spec name="person.hhchild_oldest" coefficient_name="children_if_oldest"/>  -->
                <variable_spec name="person.older_sibl_home"></variable_spec>
              </variable_list>
            </equation>
          </submodel>
        </specification>
      </model>
      <model name="home_school_for_oldest_child_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.home_school_model</class_module>
            <class_name type="string">HomeSchoolModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">HomeSchoolModel</name>
            <argument name="choice_set" type="string">[0,1]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" name="submodel_string" type="string"></argument>
            <argument model_dependency_type="variable" name="choice_attribute_name" parser_action="quote_string" type="string">home_school</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">hs_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"></argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, hs_index)</output>
            <argument convert_blank_to_none="True" model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agent_filter" parser_action="quote_string" type="string">is_oldest_student = (psrc_parcel.person.has_older_sibling_in_school==0) * (person.student==1)</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">home_school_for_oldest_child_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">home_school_for_oldest_child_model_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agent_filter" parser_action="quote_string" type="string">sfilter = (psrc_parcel.person.has_older_sibling_in_school==0) * numpy.logical_and(person.is_in_school, numpy.logical_or(person.stype == 2, person.stype == 6))</argument>
            <!--<argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(psrc_parcel.person.has_older_sibling, numpy.logical_and(person.is_in_school, numpy.logical_or(person.stype == 2, person.stype == 6))) </argument>-->
            <argument model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <equation equation_id="1" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec coefficient_name="constant" name="constant"></variable_spec>
                <!-- <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>
                 <variable_spec name="person.is_high_income" coefficient_name="is_high_income"/>
                 <variable_spec name="person.is_low_income" coefficient_name="is_low_income"/>
                <variable_spec name="person.age" coefficient_name="age"/>
                <variable_spec name="person.is_male" coefficient_name="is_male"/>
                <variable_spec name="person.lives_in_rural"/>
                <variable_spec name="person.timetocbd"/>                               
                <variable_spec name="person.has_older_sibl"/> 
                <variable_spec name="person.npriv_schools"/>
                <variable_spec name="person.zone_school_totscore"/>
                <variable_spec name="person.no_good_publ_schools"/>
                <variable_spec name="person.npubl_schools"/> 
                <variable_spec name="person.hhchild_oldest" coefficient_name="children_if_oldest"/>          
                <variable_spec name="person.older_sibl_home"/>                 
                <variable_spec name="person.schooldistr_totscore"/> -->
                <variable_spec coefficient_name="has_nonworkers" name="person.has_nonworkers"></variable_spec>
                <variable_spec coefficient_name="children" name="person.hhchild"></variable_spec>
              </variable_list>
            </equation>
          </submodel>
        </specification>
      </model>
      <model name="public_private_school_for_oldest_child_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_type_choice_model</class_module>
            <class_name type="string">SchoolTypeChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolTypeChoiceModel</name>
            <argument name="choice_set" type="string">[1,2]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" name="submodel_string" type="string"></argument>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string">school_type</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, pp_index)</output>
            <argument convert_blank_to_none="True" model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agent_filter" parser_action="quote_string" type="string">is_oldest_student = (psrc_parcel.person.has_older_sibling_in_school==0) * (person.student &lt; 3) * (person.home_school&lt;=0) * (person.age &lt;= 18)</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">public_private_school_for_oldest_child_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">public_private_school_for_oldest_child_model_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">pp_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"></argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = (psrc_parcel.person.has_older_sibling_in_school==0) * psrc_parcel.person.is_in_private_or_public_k12_school</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <equation equation_id="2" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec coefficient_name="constant" name="constant"></variable_spec>
                <!--<variable_spec name="person.hhnonworkers" coefficient_name="nonworkers"/>                
                <variable_spec name="person.has_older_sibl"/>
                
                <variable_spec name="person.faz_school_hasscore"/>
                <variable_spec name="person.age_if_older_sibl_priv"/>
                <variable_spec name="person.older_sibl_priv"/>  
                <variable_spec name="person.age" coefficient_name="age"/>
                <variable_spec name="person.is_male" coefficient_name="is_male"/>
                <variable_spec name="person.lives_in_rural"/>
                <variable_spec name="person.has_nonworkers" coefficient_name="has_nonworkers"/>               
                <variable_spec name="person.is_high_income"/>
                <variable_spec name="person.is_low_income" />
                <variable_spec name="person.hhchild" coefficient_name="children"/> 
                <variable_spec name="person.faz_school_totscore"/>                 
                <variable_spec name="person.faz_school_mathscore"/> 
                <variable_spec name="person.no_good_publ_s4000"/>
                <variable_spec name="person.no_good_publ_s3000"/>
                <variable_spec name="person.no_good_publ_s1000"/>
                <variable_spec name="person.no_publ_s4000"/>
                <variable_spec name="person.no_publ_s3000"/>
                <variable_spec name="person.no_publ_s1000"/>
                <variable_spec name="person.npriv_s1000"/>
                <variable_spec name="person.npriv_s3000"/>
                <variable_spec name="person.npubl_s4000"/>
                <variable_spec name="person.npubl_s1000"/>
                <variable_spec name="person.npubl_s3000"/>
                <variable_spec name="person.ngoodpubl_s4000"/>
                <variable_spec name="person.ngoodpubl_s1000"/>
                <variable_spec name="person.npubl15min"/>
                               
                <variable_spec name="person.zone_school_totscore"/>   -->
                <variable_spec name="person.schooldistr_readscore"></variable_spec>
                <variable_spec coefficient_name="lhhincome" name="person.lhhincome_imputed"></variable_spec>
                <variable_spec name="person.timetocbd"></variable_spec>
                <variable_spec name="person.npriv_s3000"></variable_spec>
                <!--   <variable_spec name="person.is_there_priv_s3000"/>
               <variable_spec name="person.npriv_s4000"/>
                 <variable_spec name="person.ngoodpubl_s3000"/> -->
              </variable_list>
            </equation>
          </submodel>
        </specification>
      </model>
      <model name="public_private_school_for_younger_children_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_type_choice_model</class_module>
            <class_name type="string">SchoolTypeChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolTypeChoiceModel</name>
            <argument name="choice_set" type="string">[1,2]</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" name="submodel_string" type="string"></argument>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string">person.school_type</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, pp_index)</output>
            <argument convert_blank_to_none="True" model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agent_filter" parser_action="quote_string" type="string">is_student_not_oldest = psrc_parcel.person.has_older_sibling_in_school * (person.student &lt; 3) * (person.home_school&lt;=0) * (person.age &lt;=18) </argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">public_private_school_for_younger_children_model_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">public_private_school_for_younger_children_model_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">pp_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"></argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = psrc_parcel.person.has_older_sibling_in_school * psrc_parcel.person.is_in_private_or_public_k12_school * (person.age &lt;=18) </argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <equation equation_id="2" name="private" type="submodel_equation">
              <variable_list type="variable_list">
                <variable_spec coefficient_name="constant" name="constant"></variable_spec>
                <!--<variable_spec name="person.hhnonworkers" coefficient_name="nonworkers"/>                
                <variable_spec name="person.has_older_sibl"/>                
                <variable_spec name="person.faz_school_hasscore"/>
                <variable_spec name="person.age_if_older_sibl_priv"/>
                <variable_spec name="person.age" coefficient_name="age"/>
                <variable_spec name="person.is_male" coefficient_name="is_male"/>
                <variable_spec name="person.lives_in_rural"/>
                <variable_spec name="person.has_nonworkers" coefficient_name="has_nonworkers"/>               
                <variable_spec name="person.is_high_income"/>
                <variable_spec name="person.is_low_income" />
                <variable_spec name="person.hhchild" coefficient_name="children"/> 
                <variable_spec name="person.faz_school_totscore"/>                 
                <variable_spec name="person.faz_school_mathscore"/> 
                <variable_spec name="person.no_good_publ_s3000"/>
                <variable_spec name="person.no_good_publ_s1000"/>
                <variable_spec name="person.no_good_publ_s4000"/>
                <variable_spec name="person.no_publ_s4000"/>
                <variable_spec name="person.no_publ_s3000"/>
                <variable_spec name="person.no_publ_s1000"/>
                <variable_spec name="person.npriv_s1000"/>
                <variable_spec name="person.npriv_s3000"/>
                <variable_spec name="person.npriv_s4000"/>
                <variable_spec name="person.npubl_s4000"/>
                <variable_spec name="person.npubl_s1000"/>
                <variable_spec name="person.npubl_s3000"/>
                <variable_spec name="person.ngoodpubl_s4000"/>
                <variable_spec name="person.ngoodpubl_s1000"/>
                <variable_spec name="person.npubl15min"/>
                               
                <variable_spec name="person.zone_school_totscore"/>   
                <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>   
                <variable_spec name="person.timetocbd"/>
               <variable_spec name="person.ngoodpubl_s3000"/>
                -->
                <variable_spec name="person.older_sibl_priv"></variable_spec>
              </variable_list>
            </equation>
          </submodel>
        </specification>
      </model>
      <model name="postprocess_public_private_school_for_oldest_child_model" type="model">
        <dependencies type="list">['public_private_school_for_oldest_child_model']</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">person</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(person.school_type==2)* (psrc_parcel.person.has_older_sibling + (psrc_parcel.person.has_older_sibling==0))</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">is_in_private_k12_school</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
        <specification type="dictionary"></specification>
      </model>
      <model name="school_type_choice_model_nested" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_type_choice_model</class_module>
            <class_name type="string">SchoolTypeChoiceModelNested</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolTypeChoiceModelNested</name>
            <argument name="choice_set" type="string">[1,2,3]</argument>
            <argument name="nested_structure" type="string">{1: [3], 2: [1,2]}</argument>
            <!-- <argument name="nested_structure" type="string">{1: [2,3], 2: [1]}</argument>-->
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.hierarchical_linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.nl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">opus_core.random_choices</argument>
            <argument convert_blank_to_none="True" field_description="test description" name="submodel_string" type="string"></argument>
            <argument name="choice_attribute_name" parser_action="quote_string" type="string">school_type</argument>
            <argument name="interaction_pkg" parser_action="quote_string" type="string">opus_core</argument>
            <argument convert_blank_to_none="True" name="run_config" type="string"></argument>
            <argument name="estimate_config" type="dictionary">
              <key name="estimation_size_agents" type="float">1.0</key>
              <key name="starting_values" type="dictionary">
                <key name="__logsum_1" type="tuple">
                  <initvalue type="float">1</initvalue>
                  <doestimate type="boolean">False</doestimate>
                </key>
                <key name="__logsum_2" type="tuple">
                  <initvalue type="float">1</initvalue>
                  <doestimate type="boolean">True</doestimate>
                </key>
              </key>
            </argument>
            <argument name="debuglevel" type="integer">0</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </init>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="agent_set" type="string">person</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string"></argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients, cm_index)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string"></argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_nested_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">school_type_choice_model_nested_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bfgs_nl_estimation</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(psrc_parcel.person.has_older_sibling==0, numpy.logical_and(person.is_in_school, numpy.logical_or(person.stype == 2, person.stype == 6))) </argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_type_choice_model_nested_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <nest name="public-private" nest_id="2">
              <equation equation_id="1" name="public" type="submodel_equation">
                <variable_list type="variable_list">
                  <variable_spec coefficient_name="constant" name="constant"></variable_spec>
                  <!--<variable_spec name="person.timetocbd" coefficient_name="timetocbd"/>
                <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome_1"/> -->
                </variable_list>
              </equation>
              <equation equation_id="2" name="private" type="submodel_equation">
                <variable_list type="variable_list">
                  <variable_spec coefficient_name="constant" name="constant"></variable_spec>
                  <variable_spec coefficient_name="lhhincome_2" name="person.lhhincome_imputed"></variable_spec>
                  <variable_spec coefficient_name="timetocbd_2" name="person.timetocbd"></variable_spec>
                  <!--<variable_spec name="person.valid_inc" coefficient_name="valid_inc_2"/>
                <variable_spec name="person.hhworkers" coefficient_name="workers"/>
                <variable_spec name="person.age" coefficient_name="age_2"/>
                <variable_spec name="person.is_male" coefficient_name="is_male_2"/>!-->
                </variable_list>
              </equation>
            </nest>
            <nest name="home school" nest_id="1">
              <equation equation_id="3" name="home school">
                <variable_list type="variable_list">
                  <!-- <variable_spec name="constant" coefficient_name="constant_3"/>!-->
                  <variable_spec coefficient_name="children_3" name="person.hhchild"></variable_spec>
                  <!--<variable_spec name="person.is_male" coefficient_name="is_male_3"/>
                  <variable_spec name="person.hhnonworkers" coefficient_name="hhnonworkers_3"/>!-->
                  <!-- <variable_spec name="person.timetocbd" coefficient_name="timetocbd_3"/>!-->
                </variable_list>
              </equation>
            </nest>
          </submodel>
        </specification>
        <specification_test type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <nest name="public" nest_id="2">
              <equation equation_id="1" name="public" type="submodel_equation">
                <variable_list type="variable_list">
                  <variable_spec coefficient_name="constant" name="constant"></variable_spec>
                  <variable_spec coefficient_name="timetocbd_1" name="person.timetocbd"></variable_spec>
                  <variable_spec coefficient_name="lhhincome_1" name="person.lhhincome_imputed"></variable_spec>
                </variable_list>
              </equation>
            </nest>
            <nest name="private - home school" nest_id="1">
              <equation equation_id="2" name="private" type="submodel_equation">
                <variable_list type="variable_list">
                  <!-- <variable_spec name="constant" coefficient_name="constant"/>-->
                  <variable_spec coefficient_name="lhhincome_2" name="person.lhhincome_imputed"></variable_spec>
                  <variable_spec coefficient_name="timetocbd_2" name="person.timetocbd"></variable_spec>
                  <!--<variable_spec name="person.hhworkers" coefficient_name="workers"/>!-->
                  <!--<variable_spec name="person.age" coefficient_name="age"/>!-->
                  <!--<variable_spec name="person.is_male" coefficient_name="is_male_2"/>-->
                  <!--<variable_spec name="person.timetocbd" coefficient_name="timetocbd_2"/>
                <variable_spec name="person.older_sibl_priv" coefficient_name="older_sibl_priv_2"/>
                <variable_spec name="person.has_older_sibl" coefficient_name="has_older_sibl_2"/>-->
                </variable_list>
              </equation>
              <equation equation_id="3" name="home school">
                <variable_list type="variable_list">
                  <variable_spec coefficient_name="constant" name="constant"></variable_spec>
                  <variable_spec coefficient_name="children_3" name="person.hhchild"></variable_spec>
                  <!-- <variable_spec name="person.valid_hhchild" coefficient_name="valid_children_3"/>
                  <variable_spec name="person.is_male" coefficient_name="is_male_3"/>!-->
                  <!-- <variable_spec name="person.timetocbd" coefficient_name="timetocbd_3"/>
                  <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>
                  <variable_spec name="person.has_nonworkers" coefficient_name="has_nonworkers_3"/>
                  <variable_spec name="person.age" coefficient_name="age"/>!-->
                </variable_list>
              </equation>
            </nest>
          </submodel>
        </specification_test>
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
      </model>
      <model name="school_choice_model_public" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_choice_model</class_module>
            <class_name type="string">SchoolChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolChoiceModel</name>
            <argument model_dependency_type="dataset" name="location_set" type="string">school</argument>
            <!-- <argument name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">school.public * (school.school_district_id == GROUP)</argument>-->
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">school.public * psrc_parcel.school.is_in_category_SUBMODEL * (school.school_district_id == GROUP)</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.upc.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.mnl_probabilities</argument>
            <!-- <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.lottery_choices</argument> -->
            <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.random_choices_from_index</argument>
            <!-- <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>-->
            <argument convert_blank_to_none="True" name="sampler" parser_action="quote_string" type="string"></argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string">psrc_parcel.person.age_category</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="availability" parser_action="quote_string" type="string">(psrc_parcel.person.school_district_id == school.school_district_id) * psrc_parcel.school.is_in_category_SUBMODEL</argument>
            <argument name="run_config" type="dictionary">
              <!-- <key name="sample_size_locations" type="integer">7</key> -->
              <key name="compute_capacity_flag" type="boolean">False</key>
              <key name="capacity_string" type="string">15*clip_to_zero(school.student_count - school.number_of_agents(person))</key>
              <key convert_blank_to_none="True" name="filter_by_groups" type="boolean">True</key>
              <key convert_blank_to_none="True" name="group_definition_for_filtering_alternatives" type="string">psrc_parcel.person.school_district_id</key>
              <key name="lottery_max_iterations" type="integer">10</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <!-- <key name="weights_for_estimation_string" type="string" convert_blank_to_none="True">school.student_count * (psrc_parcel.person.school_district_id == school.school_district_id)</key> -->
              <!-- <key name="weights_for_estimation_string" type="string" convert_blank_to_none="True" model_dependency_type="variable">psrc_parcel.person.school_district_id == school.school_district_id</key>-->
              <!-- <key name="sample_size_locations" type="integer">7</key> -->
              <key convert_blank_to_none="True" name="filter_by_groups" type="boolean">True</key>
              <key convert_blank_to_none="True" name="group_definition_for_filtering_alternatives" type="string">psrc_parcel.person.school_district_id</key>
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients)</output>
            <argument convert_blank_to_none="True" model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_choice_model_public_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">school_choice_model_public_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">is_student_in_public_school = (person.student &lt; 3) * (person.school_type==1) * ((psrc_parcel.person.age_category==2) + (psrc_parcel.person.age_category==3) + (psrc_parcel.person.age_category==4))</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agents_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(numpy.logical_and(person.stype == 2, psrc_parcel.person.is_in_public_school), psrc_parcel.person.school_district_id == person.disaggregate(school.school_district_id))</argument>
            <!--<argument convert_blank_to_none="True" name="agent_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(person.stype == 2, psrc_parcel.person.is_in_public_school)</argument>-->
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_choice_model_public_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="elementary" submodel_id="2" type="submodel">
            <variable_list type="variable_list">
              <!--  <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>-->
              <!--  <variable_spec name="person_x_school.travel_distance_to_school"/>-->
              <variable_spec name="person_x_school.sq_walking_time_to_school"></variable_spec>
              <!--   <variable_spec name="person_x_school.sq_distance_to_school"/>  -->
              <!--    <variable_spec name="school.totscore"/> 
                <variable_spec name="school.valid_totscore"/>
              <variable_spec name="person_x_school.lhhincome_x_totscore"/>  -->
              <!-- <variable_spec name="school.mathscore"/>
                <variable_spec name="school.valid_mathscore"/>
                <variable_spec name="school.readscore"/>-->
              <!--    <variable_spec name="person_x_school.lhhincome_x_readscore"/>               
             <variable_spec name="school.notvalid_readscore"/>-->
              <!--  <variable_spec name="school.otherscore"/>
             <variable_spec name="person_x_school.age_x_otherscore"/>  -->
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="middle" submodel_id="3" type="submodel">
            <variable_list type="variable_list">
              <variable_spec name="person_x_school.walking_time_to_school"></variable_spec>
              <!-- 	<variable_spec name="person_x_school.travel_distance_to_school"/>
         <variable_spec name="person_x_school.sq_distance_to_school"/> -->
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="high" submodel_id="4" type="submodel">
            <variable_list type="variable_list">
              <variable_spec name="person_x_school.sq_walking_time_to_school"></variable_spec>
              <!--	<variable_spec name="person_x_school.travel_distance_to_school"/>
          <variable_spec name="person_x_school.sq_distance_to_school"/> -->
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="school_choice_model_public_no_schools_in_district" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_choice_model</class_module>
            <class_name type="string">SchoolChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolChoiceModel</name>
            <argument model_dependency_type="dataset" name="location_set" type="string">school</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">school.public * psrc_parcel.school.is_in_category_SUBMODEL</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.upc.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.upc.mnl_probabilities</argument>
            <!-- <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.lottery_choices</argument> -->
            <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.random_choices_from_index</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string">psrc_parcel.person.age_category</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="availability" parser_action="quote_string" type="string">psrc_parcel.school.is_in_category_SUBMODEL</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">50</key>
              <key name="compute_capacity_flag" type="boolean">False</key>
              <key name="capacity_string" type="string">15*clip_to_zero(school.student_count - school.number_of_agents(person))</key>
              <key name="weights_for_simulation_string" type="string">clip_to_zero(school.student_count + 1 - school.number_of_agents(person))</key>
              <key name="lottery_max_iterations" type="integer">10</key>
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients)</output>
            <argument convert_blank_to_none="True" model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_choice_model_public_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">school_choice_model_public_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">is_student_in_public_school_without_school = (person.student &lt; 3) * (person.school_type==1) * (person.school_id &lt; 0) * ((psrc_parcel.person.age_category==2) + (psrc_parcel.person.age_category==3) + (psrc_parcel.person.age_category==4))</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':10000}</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
        </structure>
      </model>
      <model name="school_choice_model_private_for_oldest_child" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.school_choice_model</class_module>
            <class_name type="string">SchoolChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SchoolChoiceModel</name>
            <argument model_dependency_type="dataset" name="location_set" type="string">school</argument>
            <argument model_dependency_type="variable" name="filter" parser_action="quote_string" type="string">(school.public==0)*psrc_parcel.school.is_in_category_GROUP</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <!-- <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.lottery_choices</argument> -->
            <argument name="choices" parser_action="quote_string" type="string">opus_core.upc.random_choices_from_index</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <!-- <argument name="sampler" parser_action="quote_string" type="string" convert_blank_to_none="True"></argument> -->
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string"></argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">100</key>
              <key name="sample_alternatives_by_group" type="boolean">True</key>
              <key convert_blank_to_none="True" name="group_definition_for_sampling_alternatives" type="string">psrc_parcel.person.age_category</key>
              <key name="compute_capacity_flag" type="boolean">False</key>
              <key name="capacity_string" type="string">15*clip_to_zero(school.student_count - school.number_of_agents(person))</key>
              <key name="lottery_max_iterations" type="integer">10</key>
              <key name="number_of_units_string" type="string">number_of_students=school.number_of_agents(person)</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <!--  <key name="weights_for_estimation_string" type="string" convert_blank_to_none="True">school.student_count</key>-->
              <key convert_blank_to_none="True" name="weights_for_estimation_string" type="string">school.student_count</key>
              <key name="sample_size_locations" type="integer">100</key>
              <key name="sample_alternatives_by_group" type="boolean">True</key>
              <key convert_blank_to_none="True" name="group_definition_for_sampling_alternatives" type="string">psrc_parcel.person.age_category</key>
              <!--<key name="agent_category_definition" type="list">['person.disaggregate(parcel.school_district_id, intermediates=[building, household])']</key>
              <key name="choice_category_definition" type="list">['school.disaggregate(parcel.school_district_id)']</key>
              <key name="agent_filter_attribute" type="string">person.disaggregate(parcel.school_district_id, intermediates=[building, household])&gt;0</key>-->
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients)</output>
            <argument convert_blank_to_none="True" model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_choice_model_private_for_oldest_child_specification</argument>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string">school_choice_model_private_for_oldest_child_coefficients</argument>
            <argument name="cache_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="specification" type="string">specification</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agents_filter" parser_action="quote_string" type="string">is_student_in_private_school = (person.student &lt; 3) * (person.school_type==2) * ((psrc_parcel.person.age_category==2) + (psrc_parcel.person.age_category==3) + (psrc_parcel.person.age_category==4)) * (psrc_parcel.person.has_older_sibling_own_age_category_in_private_school==0)</argument>
            <argument convert_blank_to_none="True" name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <estimate type="dictionary">
            <output name="output" type="string">(coefficients, dummy)</output>
            <argument name="specification" type="string">specification</argument>
            <argument name="agent_set" type="string">est_dataset</argument>
            <argument name="agents_index" type="string">cm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </estimate>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(specification, cm_index, est_dataset)</output>
            <argument convert_blank_to_none="True" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agents_filter" parser_action="quote_string" type="string">sfilter = numpy.logical_and(numpy.logical_and(person.stype == 2, psrc_parcel.person.is_in_private_school), psrc_parcel.person.has_older_sibling_own_age_category_in_private_school==0) * ((psrc_parcel.person.age_category==2) + (psrc_parcel.person.age_category==3) + (psrc_parcel.person.age_category==4))</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument name="estimation_storage" type="string">base_cache_storage</argument>
            <argument name="households_for_estimation_table" parser_action="quote_string" type="string">households_for_estimation</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string">school_choice_model_private_specification</argument>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="private" submodel_id="-2" type="submodel">
            <variable_list type="variable_list">
              <!--  <variable_spec name="person.lhhincome_imputed" coefficient_name="lhhincome"/>-->
              <!--  
                <variable_spec name="person_x_school.high_income_x_wealthshare"/>               
                <variable_spec name="person_x_school.income_x_wealthshare"/>   -->
              <!-- <variable_spec name="person_x_school.walking_time_to_school"/>
				<variable_spec name="person_x_school.travel_distance_to_school"/> -->
              <!--	<variable_spec name="school.povertyshare"/>
			<variable_spec name="person_x_school.income_x_povertyshare"/> -->
              <variable_spec name="person_x_school.same_school_district"></variable_spec>
              <variable_spec name="person_x_school.traveldist_if_out_distr"></variable_spec>
              <variable_spec name="person_x_school.walktime_if_same_distr"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="school_choice_model_private_for_younger_siblings" type="model">
        <dependencies type="list">['school_choice_model_private_for_oldest_child']</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">person</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">psrc_parcel.person.school_of_older_sibling_own_age_category_private</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">school_id</argument>
            <argument model_dependency_type="variable" name="dataset_filter" parser_action="quote_string" type="string">is_student_in_private_school_younger = (person.student &lt; 3) * (person.school_type==2) * ((psrc_parcel.person.age_category==2) + (psrc_parcel.person.age_category==3) + (psrc_parcel.person.age_category==4)) * psrc_parcel.person.has_older_sibling_own_age_category_in_private_school</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
      </model>
      <model name="school_choice_model_preschool" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">person</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">person.disaggregate(psrc_parcel.parcel.nearest_school_of_category_1, intermediates=[building])</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">school_id</argument>
            <!-- <argument name="dataset_filter" parser_action="quote_string" type="string" model_dependency_type="variable">is_student_in_preschool = (psrc_parcel.person.age_category==1) * person.disaggregate(urbansim_parcel.household.number_of_adults==urbansim_parcel.household.number_of_non_home_based_workers)</argument>-->
            <argument model_dependency_type="variable" name="dataset_filter" parser_action="quote_string" type="string">is_student_in_preschool = (psrc_parcel.person.age_category==1) * numpy.logical_or(person.student==1, person.student==2)</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
      </model>
      <model name="initiate_school_id_in_persons" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">person</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">(0 * person.age - 1).astype(int32)</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">school_id</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
      </model>
      <model name="school_choice_model_public_distance_2" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">person</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">person.disaggregate(psrc_parcel.parcel.nearest_public_school_of_category_2, intermediates=[building])</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">school_id</argument>
            <argument model_dependency_type="variable" name="dataset_filter" parser_action="quote_string" type="string">is_student_in_public_school_2 = (person.student &lt; 3) * (person.school_type==1) * (psrc_parcel.person.age_category==2)</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
      </model>
      <model name="school_choice_model_public_distance_3" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">person</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">person.disaggregate(psrc_parcel.parcel.nearest_public_school_of_category_3, intermediates=[building])</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">school_id</argument>
            <argument model_dependency_type="variable" name="dataset_filter" parser_action="quote_string" type="string">is_student_in_public_school_3 = (person.student &lt; 3) * (person.school_type==1) * (psrc_parcel.person.age_category==3)</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
      </model>
      <model name="school_choice_model_public_distance_4" type="model">
        <dependencies type="list">[]</dependencies>
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.simple_model</class_module>
            <class_name type="string">SimpleModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SimpleModel</name>
          </init>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="dataset" type="string">person</argument>
            <argument model_dependency_type="variable" name="expression" parser_action="quote_string" type="string">person.disaggregate(psrc_parcel.parcel.nearest_public_school_of_category_4, intermediates=[building])</argument>
            <argument name="outcome_attribute" parser_action="quote_string" type="string">school_id</argument>
            <argument model_dependency_type="variable" name="dataset_filter" parser_action="quote_string" type="string">is_student_in_public_school_4 = (person.student &lt; 3) * (person.school_type==1) * (psrc_parcel.person.age_category==4)</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
      </model>
      <model copyable="True" hidden="False" inherit_parent_values="False" name="college_location_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.person_location_choice_model</class_module>
            <class_name type="string">PersonLocationChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">PersonLocationChoiceModel</name>
            <argument model_dependency_type="dataset" name="location_set" type="string">school</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="utilities" parser_action="quote_string" type="string">opus_core.linear_utilities</argument>
            <argument name="probabilities" parser_action="quote_string" type="string">opus_core.mnl_probabilities</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="filter" parser_action="quote_string" type="string"></argument>
            <argument convert_blank_to_none="True" name="submodel_string" parser_action="quote_string" type="string"></argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
            <argument name="model_name" parser_action="quote_string" type="string">College Location Model</argument>
            <argument name="short_name" parser_action="quote_string" type="string">CollegeLM</argument>
            <argument name="variable_package" parser_action="quote_string" type="string">urbansim</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="estimate_config" type="dictionary">
              <key convert_blank_to_none="True" name="weights_for_estimation_string" type="string">psrc_parcel.school.sampling_by_residence_large_area_GROUP * psrc_parcel.school.is_in_category_5</key>
              <key name="sample_size_locations" type="integer">100</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"></key>
              <key name="estimation_size_agents" type="float">1.0</key>
              <key name="sample_alternatives_by_group" type="boolean">True</key>
              <key model_dependency_type="variable" name="group_definition_for_sampling_alternatives" type="string">urbansim_parcel.person.large_area_id</key>
            </argument>
            <argument name="run_config" type="dictionary">
              <key convert_blank_to_none="True" name="weights_for_simulation_string" type="string">psrc_parcel.school.sampling_by_residence_large_area_GROUP * psrc_parcel.school.is_in_category_5</key>
              <key name="sample_size_locations" type="integer">100</key>
              <key convert_blank_to_none="True" name="sample_proportion_locations" type="integer"></key>
              <key name="compute_capacity_flag" type="boolean">True</key>
              <!--  <key name="capacity_string" type="string" convert_blank_to_none="True">clip_to_zero(15*school.staff - school.number_of_agents(person))</key> -->
              <key convert_blank_to_none="True" name="capacity_string" type="string">clip_to_zero(1.15* school.fte2010 - school.number_of_agents(person))</key>
              <!--  <key name="number_of_units_string" type="string" convert_blank_to_none="True">15*school.staff</key>  -->
              <!--  <key name="number_of_units_string" type="string" convert_blank_to_none="True">1.15* school.fte2010</key> -->
              <key convert_blank_to_none="True" name="number_of_units_string" type="string">school.fte2010</key>
              <key convert_blank_to_none="True" name="number_of_agents_string" type="string">school.number_of_agents(person)</key>
              <key name="lottery_max_iterations" type="integer">3</key>
              <key name="sample_alternatives_by_group" type="boolean">True</key>
              <key model_dependency_type="variable" name="group_definition_for_sampling_alternatives" type="string">urbansim_parcel.person.large_area_id</key>
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(collcm_specification, collcm_coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="coefficients_table" parser_action="quote_string" type="string">college_location_model_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument model_dependency_type="table" name="specification_table" parser_action="quote_string" type="string">college_location_model_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agents_filter" parser_action="quote_string" type="string">is_student_in_college_with_residence = (person.student &lt; 3) * (person.student &gt; 0) * (psrc_parcel.person.age_category==5) * (urbansim_parcel.person.building_id &gt; 0)</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':50000}</argument>
            <argument name="coefficients" type="string">collcm_coefficients</argument>
            <argument name="specification" type="string">collcm_specification</argument>
            <argument name="maximum_runs" type="integer">5</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <name name="name" type="string">prepare_for_estimate</name>
            <output name="output" type="string">(collcm_specification, collcm_index, colagents)</output>
            <argument model_dependency_type="dataset" name="agent_set" type="string">person</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument convert_blank_to_none="True" model_dependency_type="table" name="agents_for_estimation_table" parser_action="quote_string" type="string">persons_for_estimation</argument>
            <argument convert_blank_to_none="True" model_dependency_type="variable" name="agent_filter" parser_action="quote_string" type="string">is_student_in_college = ((person.stype == 4) + (person.stype == 5)) * (psrc_parcel.person.age_category==5)</argument>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <output name="output" type="string">(collcm_coefficients, dummy)</output>
            <argument name="agent_set" type="string">colagents</argument>
            <argument name="agents_index" type="string">collcm_index</argument>
            <argument name="procedure" parser_action="quote_string" type="string">opus_core.bhhh_mnl_estimation</argument>
            <argument name="debuglevel" type="string">debuglevel</argument>
            <argument name="specification" type="string">collcm_specification</argument>
          </estimate>
        </structure>
        <specification inherit_parent_values="False" type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
            <variable_list type="variable_list">
              <variable_spec fixed_value="-5" name="person_x_school.ln_travel_distance_to_school"></variable_spec>
              <variable_spec fixed_value="1" name="school.ln_staff"></variable_spec>
            </variable_list>
          </submodel>
        </specification>
      </model>
    </models>
    <estimation_config config_name="estimation_config" name="Estimation Configuration" type="configuration">
      <seed type="integer">1</seed>
      <cache_directory field_description="Directory for base_year cache, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data" field_identifier="Cache Directory" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/base_year_estimation_1K_luv_ct</cache_directory>
      <base_year field_identifier="Base Year" type="integer">2006</base_year>
      <years type="tuple">
        <firstyear field_identifier="Base Year" type="integer">2006</firstyear>
        <lastyear field_identifier="Base Year" type="integer">2006</lastyear>
      </years>
    </estimation_config>
    <travel_model_configuration inherit_parent_values="False" type="dictionary">
      <matrix_variable_map type="dictionary">
        <results type="dictionary">
          <aau1tm type="string">am_single_vehicle_to_work_travel_time</aau1tm>
          <aau1tl type="string">am_single_vehicle_to_work_toll</aau1tl>
          <aau1cs type="string">single_vehicle_to_work_travel_cost</aau1cs>
          <aau1ds type="string">single_vehicle_to_work_travel_distance</aau1ds>
          <awlktm type="string">am_walk_time_in_minutes</awlktm>
          <avehda type="string">am_pk_period_drive_alone_vehicle_trips</avehda>
          <atrtwa type="string">am_total_transit_time_walk</atrtwa>
          <lsum1 type="string">logsum_hbw_am_income_1</lsum1>
          <lsum2 type="string">logsum_hbw_am_income_2</lsum2>
          <lsum3 type="string">logsum_hbw_am_income_3</lsum3>
          <lsum4 type="string">logsum_hbw_am_income_4</lsum4>
        </results>
        <!-- <skims.auto.am type="dictionary">
          <aau1tm type="string">am_single_vehicle_to_work_travel_time</aau1tm>
          <aau1tl type="string">am_single_vehicle_to_work_toll</aau1tl>
         <aau2tm type="string">am_double_vehicle_to_work_travel_time</aau2tm> 
          <aau3tm type="string">am_threeplus_vehicle_to_work_travel_time</aau3tm>  
          <aau1cs type="string">single_vehicle_to_work_tyear_2015_log.txtravel_cost</aau1cs>
          <aau1ds type="string">single_vehicle_to_work_travel_distance</aau1ds>
         </skims.auto.am> 
         <skims.nonmotorized.am type="dictionary"> 
         <abketm type="string">am_bike_to_work_travel_time</abketm>
          <awlktm type="string">am_walk_time_in_minutes</awlktm>
		 </skims.nonmotorized.am>
		 <triptables.nonmotorized.all type="dictionary">
		   <abike type="string">am_biking_person_trips</abike>
           <awalk type="string">am_walking_person_trips</awalk>
		 </triptables.nonmotorized.all>
		 <triptables.autos.am type="dictionary">
		   <avehda type="string">am_pk_period_drive_alone_vehicle_trips</avehda>
		</triptables.autos.am>
		 <skims.transit.am.all_mode  type="dictionary">
          <atrtwa type="string">am_total_transit_time_walk</atrtwa>
         </skims.transit.am.all_mode>
 		<triptables.transit.walkaccess type="dictionary">		
          <atrnwa type="string">am_transit_person_trip_table</atrnwa>
   	    </triptables.transit.walkaccess>
   	    <modechoice.hbwork_inc1 type="dictionary">
         <lsum1 type="string">logsum_hbw_am_income_1</lsum1>
        </modechoice.hbwork_inc1>
        <modechoice.hbwork_inc2 type="dictionary">
          <lsum2 type="string">logsum_hbw_am_income_2</lsum2>
        </modechoice.hbwork_inc2>  
        <modechoice.hbwork_inc3 type="dictionary">
          <lsum3 type="string">logsum_hbw_am_income_3</lsum3>
        </modechoice.hbwork_inc3>  
        <modechoice.hbwork_inc4 type="dictionary">
          <lsum4 type="string">logsum_hbw_am_income_4</lsum4>
        </modechoice.hbwork_inc4> -->
      </matrix_variable_map>
    </travel_model_configuration>
  </model_manager>
  <scenario_manager>
    <scenario executable="True" name="psrc_stc_regional_dm_sc_integration" type="scenario">
      <parent type="scenario_name">PSRC_baseline</parent>
      <description type="string">Stay the course scenario</description>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="delete_city_from_households" type="model_choice">True</selectable>
        <selectable name="delete_city_from_jobs" type="model_choice">True</selectable>
        <selectable name="real_estate_price_model" type="model_choice">True</selectable>
        <selectable name="postprocess_real_estate_price_model" type="model_choice">False</selectable>
        <selectable name="expected_sales_unit_price_component_model" type="model_choice">True</selectable>
        <selectable name="postprocess_expected_sales_unit_price_component_model" type="model_choice">True</selectable>
        <selectable name="development_proposal_choice_model_luv2" type="model_choice">False</selectable>
        <selectable name="development_proposal_choice_model" type="model_choice">True</selectable>
        <selectable name="development_proposal_choice_model_by_subarea" type="model_choice">False</selectable>
        <selectable name="building_construction_model" type="model_choice">True</selectable>
        <selectable name="increase_HU_density" type="model_choice">True</selectable>
        <selectable name="increase_job_capacity" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_households" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">True</selectable>
        <selectable name="jobs_event_model" type="model_choice">False</selectable>
        <selectable name="households_event_model" type="model_choice">False</selectable>
        <selectable name="household_transition_model" type="model_choice">True</selectable>
        <selectable name="set_inmigrants_model" type="model_choice">True</selectable>
        <selectable name="employment_transition_model" type="model_choice">True</selectable>
        <selectable name="job_person_consistency_keeper" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="household_location_choice_model" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_households_if_lower_accessibility" type="model_choice">True</selectable>
        <selectable name="employment_relocation_model" type="model_choice">True</selectable>
        <selectable name="employment_location_choice_model" type="model_choice">True<group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable name="governmental_employment_location_choice_model" type="model_choice">True</selectable>
        <selectable name="distribute_unplaced_mining_utilities_jobs_model" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">True</selectable>
        <selectable name="work_at_home_choice_model" type="model_choice">True</selectable>
        <selectable name="workplace_choice_model_for_resident" type="model_choice">True</selectable>
        <selectable name="home_school_for_oldest_child_model" type="model_choice">False</selectable>
        <selectable name="home_school_for_younger_children_model" type="model_choice">False</selectable>
        <selectable name="public_private_school_for_oldest_child_model" type="model_choice">False</selectable>
        <selectable name="postprocess_public_private_school_for_oldest_child_model" type="model_choice">False</selectable>
        <selectable name="public_private_school_for_younger_children_model" type="model_choice">False</selectable>
        <selectable name="school_choice_model_public" type="model_choice">False</selectable>
        <selectable name="school_choice_model_public_no_schools_in_district" type="model_choice">False</selectable>
        <selectable name="initiate_school_id_in_persons" type="model_choice">False</selectable>
        <selectable name="school_choice_model_public_distance_2" type="model_choice">False</selectable>
        <selectable name="school_choice_model_public_distance_3" type="model_choice">False</selectable>
        <selectable name="school_choice_model_public_distance_4" type="model_choice">False</selectable>
        <selectable name="school_choice_model_private_for_oldest_child" type="model_choice">False</selectable>
        <selectable name="school_choice_model_private_for_younger_siblings" type="model_choice">False</selectable>
        <selectable name="school_choice_model_preschool" type="model_choice">False</selectable>
        <selectable name="college_location_model" type="model_choice">False</selectable>
      </models_to_run>
      <models_in_year type="dictionary">
        <models_in_year_category key_name="year" key_value="models_list" type="category_with_special_keys">
          <yearset type="dictionary">
            <year type="integer">2014</year>
            <models_list type="list">["increase_existing_HU_density", "increase_existing_job_capacity", "assign_work_at_home_to_workers", "work_at_home_choice_model_by_tractcity",  "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2017</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2020</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2025</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs","home_school_for_oldest_child_model","home_school_for_younger_children_model","public_private_school_for_oldest_child_model",
        	"postprocess_public_private_school_for_oldest_child_model","public_private_school_for_younger_children_model","initiate_school_id_in_persons",
        	"school_choice_model_public_distance_2","school_choice_model_public_distance_3","school_choice_model_public_distance_4",
        	"school_choice_model_private_for_oldest_child","school_choice_model_private_for_younger_siblings","school_choice_model_preschool",
        	"college_location_model"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2030</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2035</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2040</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs","home_school_for_oldest_child_model","home_school_for_younger_children_model","public_private_school_for_oldest_child_model",
        	"postprocess_public_private_school_for_oldest_child_model","public_private_school_for_younger_children_model","initiate_school_id_in_persons",
        	"school_choice_model_public_distance_2","school_choice_model_public_distance_3","school_choice_model_public_distance_4",
        	"school_choice_model_private_for_oldest_child","school_choice_model_private_for_younger_siblings","school_choice_model_preschool",
        	"college_location_model"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2045</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2050</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs","home_school_for_oldest_child_model","home_school_for_younger_children_model","public_private_school_for_oldest_child_model",
        	"postprocess_public_private_school_for_oldest_child_model","public_private_school_for_younger_children_model","initiate_school_id_in_persons",
        	"school_choice_model_public_distance_2","school_choice_model_public_distance_3","school_choice_model_public_distance_4",
        	"school_choice_model_private_for_oldest_child","school_choice_model_private_for_younger_siblings","school_choice_model_preschool",
        	"college_location_model"]</models_list>
          </yearset>
        </models_in_year_category>
      </models_in_year>
      <base_year type="integer">2014</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2014</firstyear>
        <lastyear type="integer">2050</lastyear>
      </years_to_run>
      <seed convert_blank_to_none="True" type="integer">1</seed>
      <flush_variables type="boolean">True</flush_variables>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfigurationNoDB</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/inputs</argument>
          <!--<argument name="existing_cache_to_copy" type="directory">D:/opus/data/psrc_parcel/base_year_data_1K_luv_ct</argument>-->
        </argument>
      </creating_baseyear_cache_configuration>
      <travel_model_configuration inherit_parent_values="False" type="dictionary">
        <urbansim_to_tm_variable_mapping type="dictionary">
          <households type="dictionary">
            <variable name="hhno" type="string">(household.household_id).astype(int32)</variable>
            <variable name="hhsize" type="string">(household.persons).astype(int32)</variable>
            <variable name="hhincome" type="string">(household.income / 1.005**(2040-2040)).astype(int32)</variable>
            <!-- The income variable is divided by a factor to account for real income growth. The exponent is the difference between the end year (the first number) and the start year (the second number). To not use RIG, make the end year the same as the start year. -->
            <variable name="hownrent" type="string">(numpy.logical_or(household.tenure == 1, household.tenure == 2) + 2*(household.tenure == 3) + 9*(household.tenure &gt; 3)).astype(int32)</variable>
            <variable name="hhparcel" type="string">(urbansim_parcel.household.parcel_id).astype(int32)</variable>
            <variable name="hhtaz" type="string">(urbansim_parcel.household.zone_id).astype(int32)</variable>
            <variable name="hrestype" type="string">(household.disaggregate(1*urbansim.building.is_single_family_residential + 2*urbansim.building.is_multi_family_residential + 3*urbansim.building.is_condo_residential + 4*urbansim.building.is_mobile_home)).astype(int32)</variable>
            <variable name="hhexpfac" type="string">(household.household_id &gt; 0).astype(int32)</variable>
            <variable name="__filter__" type="string"> (urbansim_parcel.household.parcel_id &gt; 0)*(household.number_of_agents(person) &gt; 0) </variable>
            <variable name="__out_table_name__" type="string">Household</variable>
          </households>
          <persons type="dictionary">
            <variable name="hhno" type="string">(person.household_id).astype(int32)</variable>
            <variable name="pno" type="string">(person.member_id).astype(int32)</variable>
            <variable name="pptyp" type="string">(1*(person.employment_status==1) + 2*(person.employment_status==2)*(person.student==0) + 3*(person.employment_status &lt; 1)*(person.student==0)*(person.age &gt; 64) + 4*(person.employment_status &lt; 1)*(person.student==0)*(person.age &gt; 15)*(person.age &lt; 65) + 5*(person.employment_status!=1)*(person.student==1)*(person.age &gt; 18) + 6*(person.employment_status!=1)*(person.student==1)*(person.age &gt; 15)*(person.age &lt; 19) + 7*(person.age &gt; 4)*(person.age &lt; 16) + 8*(person.age &lt; 5)).astype(int32)</variable>
            <variable name="pagey" type="string">(person.age).astype(int32)</variable>
            <variable name="pgend" type="string">(person.sex).astype(int32)</variable>
            <variable name="pwtyp" type="string">(1*(person.employment_status==1)*(urbansim_parcel.person.is_worker_with_job==1) + 2*(person.employment_status==2)*(urbansim_parcel.person.is_worker_with_job==1)).astype(int32)</variable>
            <variable name="pwpcl" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="pwtaz" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="pstyp" type="string">(person.student*(numpy.logical_or(person.student==1, person.student==2))).astype(int32)</variable>
            <variable name="pspcl" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="pstaz" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="ptpass" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="ppaidprk" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="psexpfac" type="string">(person.person_id &gt; 0).astype(int32)</variable>
            <variable name="pdairy" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="puwarrp" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="puwdepp" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="puwmode" type="string">(-1 * (person.person_id &gt; 0)).astype(int32)</variable>
            <variable name="__filter__" type="string">urbansim_parcel.person.parcel_id &gt; 0</variable>
            <variable name="__out_table_name__" type="string">Person</variable>
          </persons>
          <parcels type="dictionary">
            <variable name="parcelid" type="string">parcel.parcel_id</variable>
            <variable name="xcoord_p" type="string">parcel.x_coord_sp</variable>
            <variable name="ycoord_p" type="string">parcel.y_coord_sp</variable>
            <variable name="sqft_p" type="string">parcel.parcel_sqft</variable>
            <variable name="taz_p" type="string">parcel.zone_id</variable>
            <variable name="lutype_p" type="string">parcel.land_use_type_id</variable>
            <variable name="hh_p" type="string">(urbansim_parcel.parcel.number_of_households).astype(int32)</variable>
            <variable name="stugrd_p" type="string">(parcel.aggregate((psrc_parcel.person.student &lt; 3) * ((psrc_parcel.person.age_category==1) +  (psrc_parcel.person.age_category==2) + (psrc_parcel.person.age_category==3)), intermediates=[school])).astype(int32)</variable>
            <variable name="stuhgh_p" type="string">(parcel.aggregate((psrc_parcel.person.student &lt; 3) * (psrc_parcel.person.age_category==4), intermediates=[school])).astype(int32)</variable>
            <variable name="stuuni_p" type="string">(parcel.aggregate((psrc_parcel.person.student &lt; 3) * (psrc_parcel.person.age_category==5), intermediates=[school])).astype(int32)</variable>
            <variable name="empedu_p" type="string">(parcel.aggregate((job.sector_id==8) + (job.sector_id==13), intermediates=[building])).astype(int32)</variable>
            <variable name="empfoo_p" type="string">(parcel.aggregate(job.sector_id==10, intermediates=[building])).astype(int32)</variable>
            <variable name="empgov_p" type="string">(parcel.aggregate(job.sector_id==12, intermediates=[building])).astype(int32)</variable>
            <variable name="empind_p" type="string">(parcel.aggregate((job.sector_id==3) + (job.sector_id==4), intermediates=[building])).astype(int32)</variable>
            <variable name="empmed_p" type="string">(parcel.aggregate(job.sector_id==9, intermediates=[building])).astype(int32)</variable>
            <variable name="empofc_p" type="string">(parcel.aggregate(job.sector_id==7, intermediates=[building])).astype(int32)</variable>
            <variable name="empret_p" type="string">(parcel.aggregate(job.sector_id==5, intermediates=[building])).astype(int32)</variable>
            <variable name="empsvc_p" type="string">(parcel.aggregate(job.sector_id==11, intermediates=[building])).astype(int32)</variable>
            <variable name="empoth_p" type="string">(parcel.aggregate((job.sector_id==1) + (job.sector_id==2), intermediates=[building])).astype(int32)</variable>
            <variable name="emprsc_p" type="string">(parcel.aggregate(job.sector_id &gt; 13, intermediates=[building])).astype(int32)</variable> # zeros
            <variable name="emptot_p" type="string">(urbansim_parcel.parcel.number_of_jobs).astype(int32)</variable>
            <variable name="parkdy_p" type="string">(parcel.parking_space_daily).astype(int32)</variable>
            <variable name="parkhr_p" type="string">(parcel.parking_space_hourly).astype(int32)</variable>
            <variable name="ppricdyp" type="string">(parcel.parking_price_daily * 100).astype(int32)</variable>
            <variable name="pprichrp" type="string">(parcel.parking_price_hourly * 100).astype(int32)</variable>
            <variable name="nparks" type="string">(1*(parcel.land_use_type_id==19)).astype(int32)</variable>
            <variable name="aparks" type="string">(1*(parcel.land_use_type_id==19) * (parcel_sqft)).astype(int32)</variable>
          </parcels>
        </urbansim_to_tm_variable_mapping>
        <meta_data type="dictionary">
          <households type="dictionary">
            <column name="hrestype" type="dictionary">
              <item name="lookup" type="array">['1: Single-family', '2: Multi-family', '3: Condo', '4: Mobile home']</item>
            </column>
            <column name="hownrent" type="dictionary">
              <item name="lookup" type="array">['1: Owned', '2: Rented', '3: Other', '9: Missing']</item>
            </column>
          </households>
          <persons type="dictionary">
            <column name="pgend" type="dictionary">
              <item name="lookup" type="array">['1: Male', '2: Female', '9: Missing']</item>
            </column>
            <column name="pstyp" type="dictionary">
              <item name="lookup" type="array">['0: Not a student', '1: Full-time student', '2: Part-time student']</item>
            </column>
            <column name="pwtyp" type="dictionary">
              <item name="lookup" type="array">['0: Not a worker', '1: Full-time worker', '2: Part-time worker']</item>
            </column>
            <column name="pptyp" type="dictionary">
              <item name="lookup" type="array">['1: Full-time worker', '2: Part-time worker', '3: Non-working adult age 65+', '4: Non-working adult age &lt; 65', '5: University student', '6: High-school student age 15+', '7: Child age 5-15', '8: Child age 0-4']</item>
            </column>
          </persons>
        </meta_data>
        <daysim_file type="dictionary">
          <format type="string">hdf5g</format>
          <!-- <format type="string">csv</format>  -->
          <hdf5_compression convert_blank_to_none="True" type="string">gzip</hdf5_compression>
          <name type="string">soundcast_inputs.h5</name>
          <!-- <name type="string">hh_and_persons</name> -->
        </daysim_file>
        <matrix_variable_map type="dictionary">
          <results type="dictionary">
            <aau1tm type="string">am_single_vehicle_to_work_travel_time</aau1tm>
            <aau1tl type="string">am_single_vehicle_to_work_toll</aau1tl>
            <aau1cs type="string">single_vehicle_to_work_travel_cost</aau1cs>
            <aau1ds type="string">single_vehicle_to_work_travel_distance</aau1ds>
            <awlktm type="string">am_walk_time_in_minutes</awlktm>
            <avehda type="string">am_pk_period_drive_alone_vehicle_trips</avehda>
            <atrtwa type="string">am_total_transit_time_walk</atrtwa>
            <lsum1 type="string">logsum_hbw_am_income_1</lsum1>
            <lsum2 type="string">logsum_hbw_am_income_2</lsum2>
            <lsum3 type="string">logsum_hbw_am_income_3</lsum3>
            <lsum4 type="string">logsum_hbw_am_income_4</lsum4>
          </results>
        </matrix_variable_map>
        <travel_model_base_directory type="string">e:\soundcast_root</travel_model_base_directory>
        <!-- <emme2_batch_file_name type="string">run_model_common_tg_beta.bat 3700 3733 3750 3751 4000</emme2_batch_file_name> -->
        <emme_command type="string">emme -ng 127.0.0.1</emme_command>
        <locations_to_disaggregate type="list">['parcel', 'building']</locations_to_disaggregate>
        <travel_model_input_file_writer type="string">psrc_parcel.travel_model_input_file_writer_emme4</travel_model_input_file_writer>
        <models type="selectable_list">
          <selectable name="inprocess.hana.opus_daysim.models.get_cache_data_into_daysim" type="selectable">True</selectable>
          <selectable name="psrc_parcel.emme.models.get_cache_data_into_emme4" type="selectable">False</selectable>
          <selectable name="psrc_parcel.emme.models.run_travel_model" type="selectable">True</selectable>
          <selectable name="psrc_parcel.emme.models.run_export_skims" type="selectable">False</selectable>
          <selectable name="psrc_parcel.emme.models.get_emme4_data_from_h5_into_cache" type="selectable">True</selectable>
        </models>
        <daysim_base_directory parser_action="prefix_with_opus_data_path" type="directory">E:/opusgit/urbansim_data/data/psrc_parcel/2014SoundCastData</daysim_base_directory>
        <years_to_run key_name="year" type="category_with_special_keys">
          <!--           <run_description type="dictionary">
            <daysim_exchange_dir type="string">urbansim_outputs/2014</daysim_exchange_dir>
            <year type="integer">2014</year>
            <bank type="list">['2014']</bank>
            <emme2_batch_file_name type="string">run_soundcast_2014.bat</emme2_batch_file_name>
          </run_description> -->
          <run_description type="dictionary">
            <daysim_exchange_dir type="string">urbansim_outputs/2025</daysim_exchange_dir>
            <year type="integer">2025</year>
            <bank type="list">['2025']</bank>
            <emme2_batch_file_name type="string">run_soundcast_2025.bat</emme2_batch_file_name>
          </run_description>
          <run_description type="dictionary">
            <daysim_exchange_dir type="string">urbansim_outputs/2040</daysim_exchange_dir>
            <year type="integer">2040</year>
            <bank type="list">['2040']</bank>
            <emme2_batch_file_name type="string">run_soundcast_2040.bat</emme2_batch_file_name>
          </run_description>
          <run_description type="dictionary">
            <daysim_exchange_dir type="string">urbansim_outputs/2050</daysim_exchange_dir>
            <year type="integer">2050</year>
            <bank type="list">['2050']</bank>
            <emme2_batch_file_name type="string">run_soundcast_2050.bat</emme2_batch_file_name>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
    <scenario executable="True" name="psrc_stc_regional_dm" type="scenario">
      <parent type="scenario_name">PSRC_baseline</parent>
      <description type="string">Stay the course scenario</description>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="delete_city_from_households" type="model_choice">True</selectable>
        <selectable name="delete_city_from_jobs" type="model_choice">True</selectable>
        <selectable name="real_estate_price_model" type="model_choice">True</selectable>
        <selectable name="postprocess_real_estate_price_model" type="model_choice">False</selectable>
        <selectable name="expected_sales_unit_price_component_model" type="model_choice">True</selectable>
        <selectable name="postprocess_expected_sales_unit_price_component_model" type="model_choice">True</selectable>
        <selectable name="development_proposal_choice_model_luv2" type="model_choice">False</selectable>
        <selectable name="development_proposal_choice_model" type="model_choice">True</selectable>
        <selectable name="development_proposal_choice_model_by_subarea" type="model_choice">False</selectable>
        <selectable name="building_construction_model" type="model_choice">True</selectable>
        <selectable name="increase_HU_density" type="model_choice">True</selectable>
        <selectable name="increase_job_capacity" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_households" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">True</selectable>
        <selectable name="jobs_event_model" type="model_choice">False</selectable>
        <selectable name="households_event_model" type="model_choice">False</selectable>
        <selectable name="household_transition_model" type="model_choice">True</selectable>
        <selectable name="set_inmigrants_model" type="model_choice">True</selectable>
        <selectable name="employment_transition_model" type="model_choice">True</selectable>
        <selectable name="job_person_consistency_keeper" type="model_choice">True</selectable>
        <selectable name="household_relocation_model" type="model_choice">True</selectable>
        <selectable name="household_location_choice_model" type="model_choice">True</selectable>
        <selectable name="modify_workers_jobs_after_moving_households_if_lower_accessibility" type="model_choice">True</selectable>
        <selectable name="employment_relocation_model" type="model_choice">True</selectable>
        <selectable name="employment_location_choice_model" type="model_choice">True<group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable name="governmental_employment_location_choice_model" type="model_choice">True</selectable>
        <selectable name="distribute_unplaced_mining_utilities_jobs_model" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">True</selectable>
        <selectable name="work_at_home_choice_model" type="model_choice">True</selectable>
        <selectable name="workplace_choice_model_for_resident" type="model_choice">True</selectable>
      </models_to_run>
      <models_in_year type="dictionary">
        <models_in_year_category key_name="year" key_value="models_list" type="category_with_special_keys">
          <yearset type="dictionary">
            <year type="integer">2014</year>
            <models_list type="list">["increase_existing_HU_density", "increase_existing_job_capacity", "assign_work_at_home_to_workers", "work_at_home_choice_model_by_tractcity",  "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2017</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2020</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2025</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2030</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2035</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2040</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2045</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2050</year>
            <models_list type="list">["real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model", "building_construction_model", "increase_HU_density", "increase_job_capacity", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
        </models_in_year_category>
      </models_in_year>
      <base_year type="integer">2014</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2014</firstyear>
        <lastyear type="integer">2050</lastyear>
      </years_to_run>
      <seed convert_blank_to_none="True" type="integer">1</seed>
      <flush_variables type="boolean">True</flush_variables>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfigurationNoDB</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/inputs</argument>
          <!--<argument name="existing_cache_to_copy" type="directory">D:/opus/data/psrc_parcel/base_year_data_1K_luv_ct</argument>-->
        </argument>
      </creating_baseyear_cache_configuration>
      <travel_model_configuration inherit_parent_values="False" type="dictionary">
        <travel_model_base_directory type="string">e:\4k_V405\STC</travel_model_base_directory>
        <!-- <emme2_batch_file_name type="string">run_model_common_tg_beta.bat 3700 3733 3750 3751 4000</emme2_batch_file_name> -->
        <emme_command type="string">emme -ng 127.0.0.1</emme_command>
        <locations_to_disaggregate type="list">['parcel', 'building']</locations_to_disaggregate>
        <travel_model_input_file_writer type="string">psrc_parcel.travel_model_input_file_writer_emme4</travel_model_input_file_writer>
        <models type="selectable_list">
          <selectable name="psrc_parcel.emme.models.get_cache_data_into_emme4" type="selectable">False</selectable>
          <selectable name="psrc_parcel.emme.models.run_travel_model" type="selectable">False</selectable>
          <selectable name="psrc_parcel.emme.models.run_export_skims" type="selectable">False</selectable>
          <selectable name="psrc_parcel.emme.models.get_emme4_data_from_h5_into_cache" type="selectable">True</selectable>
        </models>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2015</year>
            <bank type="list">['2014']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2014.ctl</emme2_batch_file_name>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <bank type="list">['2025']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2025.ctl</emme2_batch_file_name>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <bank type="list">['2040']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2040.ctl</emme2_batch_file_name>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2040</year>
            <bank type="list">['2040']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2040.ctl</emme2_batch_file_name>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
    <scenario executable="True" name="psrc_luv_test" type="scenario">
      <parent type="scenario_name">PSRC_baseline</parent>
      <description type="string">Subregional simulation for LUV (11-40), including TM skims</description>
      <models_to_run config_name="models" type="selectable_list">
        <selectable name="delete_city_from_households" type="model_choice">True</selectable>
        <selectable name="delete_city_from_jobs" type="model_choice">True</selectable>
        <selectable name="real_estate_price_model" type="model_choice">False</selectable>
        <selectable name="postprocess_real_estate_price_model" type="model_choice">False</selectable>
        <selectable name="expected_sales_unit_price_component_model" type="model_choice">False</selectable>
        <selectable name="postprocess_expected_sales_unit_price_component_model" type="model_choice">False</selectable>
        <selectable name="development_proposal_choice_model_luv2" type="model_choice">True</selectable>
        <selectable name="development_proposal_choice_model" type="model_choice">False</selectable>
        <selectable name="building_construction_model" type="model_choice">False</selectable>
        <selectable name="increase_HU_density" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_households" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">False</selectable>
        <selectable name="jobs_event_model" type="model_choice">True</selectable>
        <selectable name="households_event_model" type="model_choice">True</selectable>
        <selectable name="household_transition_model" type="model_choice">True</selectable>
        <selectable name="set_inmigrants_model" type="model_choice">False</selectable>
        <selectable name="employment_transition_model" type="model_choice">False</selectable>
        <selectable name="job_person_consistency_keeper" type="model_choice">False</selectable>
        <selectable name="household_relocation_model" type="model_choice">False</selectable>
        <selectable name="household_location_choice_model" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_households_if_lower_accessibility" type="model_choice">False</selectable>
        <selectable name="employment_relocation_model" type="model_choice">False</selectable>
        <selectable name="employment_location_choice_model" type="model_choice">False<group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable name="governmental_employment_location_choice_model" type="model_choice">False</selectable>
        <selectable name="distribute_unplaced_mining_utilities_jobs_model" type="model_choice">False</selectable>
        <selectable name="modify_workers_jobs_after_moving_jobs" type="model_choice">False</selectable>
        <selectable name="work_at_home_choice_model" type="model_choice">False</selectable>
        <selectable name="workplace_choice_model_for_resident" type="model_choice">False</selectable>
      </models_to_run>
      <models_in_year type="dictionary">
        <models_in_year_category key_name="year" key_value="models_list" type="category_with_special_keys">
          <yearset type="dictionary">
            <year type="integer">2014</year>
            <models_list type="list">["assign_work_at_home_to_workers", "work_at_home_choice_model_by_tractcity",  "work_at_home_choice_model_by_subarea"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2015</year>
            <models_list type="list">["employment_transition_model", "assign_city_to_jobs", "employment_transition_model_by_subarea", "household_transition_model", "assign_city_to_households", "household_transition_model_by_subarea", "work_at_home_choice_model_by_subarea"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2020</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2025</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2030</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2035</year>
            <models_list type="list">["real_estate_price_model", "postprocess_real_estate_price_model", "expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "set_inmigrants_model", "employment_transition_model_by_subarea", "job_person_consistency_keeper", "development_proposal_choice_model_by_subarea", "building_construction_model", "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
          <yearset type="dictionary">
            <year type="integer">2040</year>
            <models_list type="list">["expected_sales_unit_price_component_model_relaxed_redevelopment", "postprocess_expected_sales_unit_price_component_model", "delete_city_from_households", "delete_city_from_jobs", "assign_city_to_households", "assign_city_to_jobs", "household_transition_model_by_subarea", "employment_transition_model_by_subarea", "development_proposal_choice_model_by_subarea", "building_construction_model",  "increase_HU_density", "modify_workers_jobs_after_moving_households", "modify_workers_jobs_after_moving_jobs", "household_relocation_model_by_subarea", "household_location_choice_model_by_subarea", "employment_relocation_model_by_subarea", {"employment_location_choice_model_by_subarea": {"group_members":"non_home_based"}}, "governmental_employment_location_choice_model_by_subarea", "scaling_unplaced_jobs", "scaling_unplaced_households", "work_at_home_choice_model_by_subarea", "workplace_choice_model_for_resident", "scaling_unplaced_home_based_jobs", "delete_city_from_households", "delete_city_from_jobs"]</models_list>
          </yearset>
        </models_in_year_category>
      </models_in_year>
      <base_year type="integer">2014</base_year>
      <years_to_run config_name="years" type="tuple">
        <firstyear type="integer">2015</firstyear>
        <lastyear type="integer">2015</lastyear>
      </years_to_run>
      <seed convert_blank_to_none="True" type="integer">1</seed>
      <flush_variables type="boolean">True</flush_variables>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfigurationNoDB</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel\base_year_2014_inputs/luv_flu_updated</argument>
          <!--<argument name="existing_cache_to_copy" type="directory">/Volumes/e$/opusgit/urbansim_data/data/psrc_parcel/base_year_2014_inputs/luv_scenario_test</argument>-->
          <!--<argument name="existing_cache_to_copy" type="directory">/Volumes/e$/opusgit/urbansim_data/data/psrc_parcel/base_year_2014_inputs/hana_test</argument>-->
        </argument>
      </creating_baseyear_cache_configuration>
      <travel_model_configuration inherit_parent_values="False" type="dictionary">
        <travel_model_base_directory type="string">d:\4K_V405</travel_model_base_directory>
        <!-- <emme2_batch_file_name type="string">run_model_common_tg_beta.bat 3700 3733 3750 3751 4000</emme2_batch_file_name> -->
        <emme_command type="string">emme -ng 127.0.0.1</emme_command>
        <locations_to_disaggregate type="list">['parcel', 'building']</locations_to_disaggregate>
        <travel_model_input_file_writer type="string">psrc_parcel.travel_model_input_file_writer_emme4</travel_model_input_file_writer>
        <models type="selectable_list">
          <selectable name="psrc_parcel.emme.models.get_cache_data_into_emme4" type="selectable">True</selectable>
          <selectable name="psrc_parcel.emme.models.run_travel_model" type="selectable">True</selectable>
          <selectable name="psrc_parcel.emme.models.run_export_skims" type="selectable">True</selectable>
          <selectable name="psrc_parcel.emme.models.get_emme4_data_from_h5_into_cache" type="selectable">True</selectable>
        </models>
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2014</year>
            <bank type="list">['2014']</bank>
            <emme2_batch_file_name type="string">psrc_4k.bat 4k_2015.ctl</emme2_batch_file_name>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2025</year>
            <bank type="list">['2040']</bank>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2035</year>
            <bank type="list">['2040']</bank>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2040</year>
            <bank type="list">['2040']</bank>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
    </scenario>
  </scenario_manager>
  <results_manager>
    </results_manager>
</opus_project>
