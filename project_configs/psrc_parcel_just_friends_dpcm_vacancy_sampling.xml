<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <description type="string">Configuration for the PSRC parcel project</description>
    <parent type="file">psrc_parcel_just_friends_fair_dpcm.xml</parent>
  </general>
  <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model inherit_parent_values="False" name="development_proposal_choice_model" type="model">
        <dependencies type="list">['real_estate_price_model', 'postprocess_real_estate_price_model', "expected_sales_unit_price_component_model", "postprocess_expected_sales_unit_price_component_model"]</dependencies>
        <structure type="dictionary">
          <import hidden="True" name="import" type="dictionary">
            <class_module type="string">psrc_parcel.models.development_project_proposal_sampling_model_with_minimum</class_module>
            <class_name>DevelopmentProjectProposalSamplingModel</class_name>
          </import>
          <init type="dictionary">
            <name hidden="True" name="name" type="string">DevelopmentProjectProposalSamplingModel</name>
            <argument name="proposal_set" type="string">development_project_proposal</argument>
            <!--<argument model_dependency_type="variable" name="weight_string" parser_action="quote_string" type="string">pricepsft = development_project_proposal.disaggregate((numpy.clip(safe_array_divide(parcel.land_value, parcel.parcel_sqft)*(1.0*(parcel.land_use_type_id &lt;&gt; 26) + 3.44*(parcel.land_use_type_id == 26)), 0, 1e8)))</argument>-->
            <!--<argument model_dependency_type="variable" name="weight_string" parser_action="quote_string" type="string">faz_vacancy = psrc_parcel.development_project_proposal.fraction_residential * development_project_proposal.disaggregate(clip_to_zero(1 - safe_array_divide(faz.aggregate(urbansim_parcel.zone.number_of_households), faz.aggregate(building.residential_units, intermediates=[parcel,zone])))) + psrc_parcel.development_project_proposal.fraction_non_residential * development_project_proposal.disaggregate(clip_to_zero(1 - safe_array_divide(faz.aggregate(urbansim_parcel.building.number_of_non_home_based_jobs, intermediates = [parcel, zone]), faz.aggregate(psrc_parcel.building.job_capacity_computed_if_necessary, intermediates=[parcel,zone]))))</argument>-->
            <argument model_dependency_type="variable" name="weight_string" parser_action="quote_string" type="string">taz_vacancy = psrc_parcel.development_project_proposal.fraction_residential * development_project_proposal.disaggregate(0.001 + safe_array_divide(urbansim_parcel.zone.number_of_households, zone.aggregate(building.residential_units, intermediates=[parcel]))) + psrc_parcel.development_project_proposal.fraction_non_residential * development_project_proposal.disaggregate(0.001 + safe_array_divide(zone.aggregate(urbansim_parcel.building.number_of_non_home_based_jobs, intermediates = [parcel]), zone.aggregate(psrc_parcel.building.job_capacity_computed_if_necessary, intermediates=[parcel])))</argument>
          </init>
          <run type="dictionary">
            <argument name="n" type="integer">50</argument>
            <argument convert_blank_to_none="True" name="within_parcel_selection_weight_string" parser_action="quote_string" type="string">urbansim_parcel.development_project_proposal.building_sqft</argument>
            <argument name="within_parcel_selection_compete_among_types" parser_action="quote_string" type="boolean">True</argument>
            <argument name="within_parcel_selection_threshold" type="integer">50</argument>
            <argument name="within_parcel_selection_n" type="integer">15</argument>
            <argument name="within_parcel_selection_MU_same_weight" type="boolean">False</argument>
            <argument name="within_parcel_selection_transpose_interpcl_weight" type="boolean">False</argument>
            <argument name="within_parcel_selection_include_no_demand_proposals" type="boolean">True</argument>
            <argument name="between_parcel_selection_elimination_threshold" type="boolean">30</argument>
            <output hidden="True" name="output" type="string">(development_project_proposal, demolished_buildings)</output>
          </run>
        </structure>
      </model>
    </models>
  </model_manager>
  <scenario_manager>
    <scenario executable="True" name="Just_Friends" type="scenario">
      <seed convert_blank_to_none="True" type="integer">1</seed>
      <creating_baseyear_cache_configuration type="class">
        <argument name="baseyear_cache" type="class">
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">psrc_parcel/land_use_baseline_run125_inputs_regvacrate</argument>
          <!--<argument name="existing_cache_to_copy" type="directory">/Volumes/d$/opusgit/urbansim_data/data/psrc_parcel/base_year_2014_inputs/land_use_baseline</argument>-->
          <!--<argument name="existing_cache_to_copy" type="directory">D:/opus/data/psrc_parcel/base_year_data_1K_luv_ct</argument>-->
        </argument>
      </creating_baseyear_cache_configuration>
    </scenario>
  </scenario_manager>
  <results_manager>
    </results_manager>
</opus_project>
