<opus_project>
  <xml_version>2.0</xml_version>
  <general>
    <project_name type="string" hidden="True">mag_zone</project_name>
    <description type="string">UrbanSim zone baseline</description>
    <parent type="file">mag_zone/configs/mag_zone.xml</parent>
    <dataset_pool_configuration type="class">
      <class_name type="string" hidden="True">DatasetPoolConfiguration</class_name>
      <class_module type="string" hidden="True">opus_core.configurations.dataset_pool_configuration</class_module>
      <argument name="package_order" type="list">['mag_zone', 'urbansim_zone', 'urbansim', 'opus_core']</argument>
    </dataset_pool_configuration>
    <available_datasets type="list">['building','household_x_building','household','zone','faz','large_area','gridcell','city','county','alldata']</available_datasets>
    <expression_library type="dictionary">
      <variable use="both" source="expression" name="alldata.employment" type="variable_definition">alldata.aggregate_all(job.job_id&gt;0)</variable>
      <!--
      <variable use="both" source="expression" name="alldata.retail_employment" type="variable_definition">alldata.aggregate_all(numpy.in1d(job.sector_id, (7,18)))</variable>
      -->
      <variable use="both" source="expression" name="alldata.retail_employment" type="variable_definition">alldata.aggregate_all(mag_zone.job.sector_group=='retail')</variable>
      <variable use="both" source="expression" name="alldata.percent_retail_employment" type="variable_definition">alldata.aggregate_all(mag_zone.job.sector_group=='retail')/(alldata.aggregate_all(job.job_id&gt;0)).astype('f')</variable>
      <variable use="both" source="expression" name="alldata.industrial_employment" type="variable_definition">alldata.aggregate_all(mag_zone.job.sector_group=='individual')</variable>
      <variable use="both" source="expression" name="alldata.percent_industrial_employment" type="variable_definition">alldata.aggregate_all(mag_zone.job.sector_group=='individual')/(alldata.aggregate_all(job.job_id&gt;0)).astype('f')</variable>
      <variable use="both" source="expression" name="alldata.total_non_residential_sqft" type="variable_definition">alldata.aggregate_all(building.non_residential_sqft)</variable>
      <variable use="both" source="expression" name="alldata.households" type="variable_definition">alldata.aggregate_all(household.household_id &gt;0)</variable>
      <variable use="both" source="expression" name="alldata.population" type="variable_definition">alldata.aggregate_all(mag_zone.household.persons)</variable>
      <variable use="both" source="expression" name="alldata.total_single_family_dwelling_units" type="variable_definition">alldata.aggregate_all(building.residential_units*(building.building_type_id==1))</variable>
      <variable use="both" source="expression" name="alldata.total_multi_family_dwelling_units" type="variable_definition">alldata.aggregate_all(building.residential_units*(building.building_type_id==2))</variable>
      <variable use="both" source="expression" name="alldata.total_dwelling_units" type="variable_definition">alldata.aggregate_all(building.residential_units)</variable>
      <variable use="both" source="expression" name="alldata.median_age_of_head" type="variable_definition">alldata.aggregate_all(household.age_of_head, function=median)</variable>
      <variable use="both" source="expression" name="alldata.median_household_size" type="variable_definition">alldata.aggregate_all(mag_zone.household.persons, function=median)</variable>
      <variable use="both" source="expression" name="alldata.avg_household_size" type="variable_definition">alldata.aggregate_all(mag_zone.household.persons, function=mean)</variable>
      <variable use="both" source="expression" name="alldata.population_age_lt_18" type="variable_definition">alldata.aggregate_all(person.age&lt;18)</variable>
      <variable use="both" source="expression" name="alldata.percent_population_age_lt_18" type="variable_definition">alldata.aggregate_all(person.age&lt;18)/(alldata.aggregate_all(mag_zone.household.persons)).astype('f')</variable>
      <variable use="both" source="expression" name="alldata.population_age_65_plus" type="variable_definition">alldata.aggregate_all(person.age&gt;64)</variable>
      <variable use="both" source="expression" name="alldata.percent_population_age_65_plus" type="variable_definition">alldata.aggregate_all(person.age&gt;64)/(alldata.aggregate_all(mag_zone.household.persons)).astype('f')</variable>
      <variable use="both" source="expression" name="alldata.median_age" type="variable_definition">alldata.aggregate_all((person.age).astype('f'), function=median)</variable>
      <variable use="both" source="expression" name="alldata.single_person_households" type="variable_definition">alldata.aggregate_all(mag_zone.household.persons==1)</variable>
      <variable use="both" source="expression" name="alldata.households_with_children" type="variable_definition">alldata.aggregate_all(household.children&gt;=1)</variable>
      <variable use="both" source="expression" name="alldata.households_with_zero_worker" type="variable_definition">alldata.aggregate_all(household.workers&lt;=0)</variable>
      <variable use="both" source="expression" name="alldata.avg_peak_travel_time_to_work" type="variable_definition">alldata.aggregate_all((mag_zone.person.peak_travel_time_from_home_to_work)*(mag_zone.person.peak_travel_time_from_home_to_work!=-1))/alldata.aggregate_all(mag_zone.person.peak_travel_time_from_home_to_work!=-1)</variable>
      <variable use="both" source="expression" name="county.employment" type="variable_definition">county.aggregate(job.job_id&gt;0,intermediates=[building,zone])</variable>
      <variable use="both" source="expression" name="county.retail_employment" type="variable_definition">county.aggregate(numpy.in1d(job.sector_id, (7,18)),intermediates=[building,zone])</variable>
      <variable use="both" source="expression" name="county.county_non_residential_sqft" type="variable_definition">county.aggregate(building.non_residential_sqft,intermediates=[zone])</variable>
      <variable use="both" source="expression" name="county.households" type="variable_definition">county.aggregate(household.household_id &gt;0,intermediates=[building,zone])</variable>
      <variable use="both" source="expression" name="county.population" type="variable_definition">county.aggregate(mag_zone.household.persons, intermediates=[building,zone])</variable>
      <variable use="both" source="expression" name="county.county_single_family_dwelling_units" type="variable_definition">county.aggregate(building.residential_units*(building.building_type_id==1),intermediates=[zone])</variable>
      <variable use="both" source="expression" name="county.county_multi_family_dwelling_units" type="variable_definition">county.aggregate(building.residential_units*(building.building_type_id==2),intermediates=[zone])</variable>
      <variable use="both" source="expression" name="county.county_total_dwelling_units" type="variable_definition">county.aggregate(building.residential_units)</variable>
      <variable use="both" source="expression" name="county.median_age_of_head" type="variable_definition">county.aggregate(household.age_of_head, function=median)</variable>
      <variable use="both" source="expression" name="county.median_household_size" type="variable_definition">county.aggregate(mag_zone.household.persons, function=median)</variable>
      <variable use="both" source="expression" name="county.avg_household_size" type="variable_definition">county.aggregate(mag_zone.household.persons, function=mean)</variable>
      <variable use="both" source="expression" name="county.population_age_lt_18" type="variable_definition">county.aggregate((person.age&lt;18))</variable>
      <variable use="both" source="expression" name="county.population_age_65_plus" type="variable_definition">county.aggregate((person.age&gt;64))</variable>
      <variable use="both" source="expression" name="county.median_age" type="variable_definition">county.aggregate((person.age).astype('f'), function=median)</variable>

      <variable use="both" source="expression" name="zone.zone_population_age_0_to_4" type="variable_definition">zone.aggregate((person.age&lt;5),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_20_to_44" type="variable_definition">zone.aggregate((person.age&gt;19)*(person.age&lt;45),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_45_to_64" type="variable_definition">zone.aggregate((person.age&gt;44)*(person.age&lt;65),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_5_to_19" type="variable_definition">zone.aggregate((person.age&gt;5)*(person.age&lt;20),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_lt_18" type="variable_definition">zone.aggregate((person.age&lt;18),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="zone.zone_population_age_65_plus" type="variable_definition">zone.aggregate((person.age&gt;64),intermediates=[household,building])</variable>
      <variable use="both" source="expression" name="zone.percent_population_age_65_plus" type="variable_definition">safe_array_divide(zone.aggregate((person.age&gt;64),intermediates=[household,building]),zone.number_of_agents(person))</variable>
      <variable use="both" source="expression" name="zone.percent_single_person_households" type="variable_definition">safe_array_divide(zone.aggregate((mag_zone.household.persons==1),intermediates=[building]),zone.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="zone.percent_single_person_households" type="variable_definition">safe_array_divide(zone.aggregate((mag_zone.household.persons==1),intermediates=[building]),zone.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="zone.percent_households_with_children" type="variable_definition">safe_array_divide(zone.aggregate((household.children&gt;=1),intermediates=[building]),zone.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="zone.percent_households_with_zero_worker" type="variable_definition">safe_array_divide(zone.aggregate((household.workers&lt;=0),intermediates=[building]),zone.number_of_agents(household))</variable>
      <variable use="both" source="expression" name="zone.employment" type="variable_definition">zone.number_of_agents(job)</variable>
      <variable use="both" source="expression" name="zone.population" type="variable_definition">zone.aggregate(mag_zone.household.persons)</variable>
      <variable use="both" source="expression" name="zone.households" type="variable_definition">zone.number_of_agents(household)</variable>
      <variable use="both" source="expression" name="zone.some_industrial_employment" type="variable_definition">zone.aggregate(numpy.in1d(job.sector_id, (2,4,5,6,8)))</variable>
      <variable use="both" source="expression" name="zone.some_retail_employment" type="variable_definition">zone.aggregate(numpy.in1d(job.sector_id, (7,18)))</variable>
      <variable use="both" source="expression" name="zone.percent_retail_employment" type="variable_definition">safe_array_divide(zone.aggregate(numpy.in1d(job.sector_id, (7,18))),zone.number_of_agents(job))</variable>
      <variable use="both" source="expression" name="zone.retail_employment" type="variable_definition">zone.aggregate(numpy.in1d(job.sector_id, (7,18)))</variable>
      <!--
      <variable use="both" source="expression" name="zone.high_employment" type="variable_definition">zone.aggregate(numpy.in1d(job.sector_id, (7,18)))</variable>
      -->

      <variable use="both" source="expression" name="person_x_job.peak_travel_time_from_home_to_work" type="variable_definition">mag_zone.person_x_job.peak_travel_time_from_home_to_work</variable>
      <variable use="both" source="expression" name="person_x_job.peak_travel_distance_from_home_to_work_in_miles" type="variable_definition">mag_zone.person_x_job.peak_travel_distance_from_home_to_work_in_miles</variable>
      <!--
      <variable use="both" source="expression" name="household_x_building.peak_travel_distance_from_home_to_work_in_miles" type="variable_definition">mag_zone.household_x_building.peak_travel_distance_from_home_to_work_in_miles</variable>
      <variable use="both" source="expression" name="household_x_building.peak_travel_time_from_home_to_work" type="variable_definition">mag_zone.household_x_building.peak_travel_time_from_home_to_work</variable>
      <variable use="both" source="expression" name="household_x_building.generalized_peak_travel_time_from_home_to_work" type="variable_definition">mag_zone.household_x_building.generalized_peak_travel_time_from_home_to_work</variable>
      <variable use="both" source="expression" name="household_x_building.peak_travel_distance_from_home_to_work_avg_in_miles" type="variable_definition">mag_zone.household_x_building.peak_travel_distance_from_home_to_work_in_miles</variable>
      -->
      <variable use="both" source="expression" name="household_x_building.peak_travel_time_from_home_to_work_avg" type="variable_definition">mag_zone.household_x_building.peak_travel_time_from_home_to_work_avg</variable>
      <variable use="both" source="expression" name="household_x_building.generalized_peak_travel_time_from_home_to_work_avg" type="variable_definition">mag_zone.household_x_building.generalized_peak_travel_time_from_home_to_work_avg</variable>
      <variable use="both" source="expression" name="person_x_job.generalized_peak_travel_time_from_home_to_work" type="variable_definition">mag_zone.person_x_job.peak_travel_time_from_home_to_work + person.disaggregate(household.value_of_time_per_distance) * mag_zone.person_x_job.peak_travel_distance_from_home_to_work_in_miles</variable>
      <variable use="both" source="expression" name="building.ln_sqft" type="variable_definition">ln_bounded(building.non_residential_sqft)</variable>
      <variable use="both" source="expression" name="building.year_built" type="variable_definition">building.year_built</variable>
      <variable use="both" source="expression" name="building.ln_units" type="variable_definition">ln_bounded(building.residential_units)</variable>
      <variable use="both" source="expression" name="household_x_building.income_x_avg_val" type="variable_definition">building.average_value_per_unit/household.income</variable>
      <variable use="model variable" source="expression" name="zone.zone_avg_value_per_sqft_whse" type="variable_definition">zone.aggregate(where(building.building_type_id==10,building.average_value_per_unit,0), function=mean)</variable>
      <variable use="model variable" source="expression" name="zone.zone_avg_value_per_sqft_retail" type="variable_definition">zone.aggregate(where(building.building_type_id==7,building.average_value_per_unit,0), function=mean)</variable>
      <variable use="model variable" source="expression" name="zone.zone_avg_value_per_sqft_office" type="variable_definition">zone.aggregate(where(building.building_type_id==5,building.average_value_per_unit,0), function=mean)</variable>
      <variable use="both" source="expression" name="development_project_x_zone.ln_res_units_x_emp_30_min" type="variable_definition">development_project.residential_units*ln(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)</variable>
      <variable use="both" source="expression" name="zone.zone_ln_sf_unit_price" type="variable_definition">ln(zone.aggregate(where(building.building_type_id==1,building.average_value_per_unit,0), function=mean))</variable>
      <variable use="both" source="expression" name="zone.zone_ln_mf_unit_price" type="variable_definition">ln(zone.aggregate(where(building.building_type_id==2,building.average_value_per_unit,0), function=mean))</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_avg_value_per_sqft_whse" type="variable_definition">ln(zone.aggregate(where(building.building_type_id==10,building.average_value_per_unit,0), function=mean))</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_avg_value_per_sqft_retail" type="variable_definition">ln(zone.aggregate(where(building.building_type_id==7,building.average_value_per_unit,0), function=mean))</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_avg_value_per_sqft_office" type="variable_definition">ln(zone.aggregate(where(building.building_type_id==5,building.average_value_per_unit,0), function=mean))</variable>
      <variable use="both" source="expression" name="zone.zone_ln_emp_10_min" type="variable_definition">ln(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone)</variable>
      <variable use="both" source="expression" name="zone.zone_pop_density" type="variable_definition">zone.aggregate(mag_zone.household.persons)/zone.acres</variable>
      <variable use="both" source="expression" name="zone.zone_job_density" type="variable_definition">zone.number_of_agents(job)/zone.acres</variable>
      <variable use="both" source="expression" name="zone.zone_ln_time_cbd" type="variable_definition">ln(zone.travel_time_to_cbd)</variable>
      <variable use="both" source="expression" name="zone.zone_ln_res_units" type="variable_definition">ln(zone.aggregate(building.residential_units))</variable>
      <variable use="both" source="expression" name="zone.zone_ln_emp_15_min" type="variable_definition">ln(urbansim_parcel.zone.employment_within_15_minutes_travel_time_hbw_am_drive_alone)</variable>
      <variable use="both" source="expression" name="development_project_x_building.ln_res_units_x_zone_dev_acre" type="variable_definition">development_project.residential_units*ln(building.disaggregate(zone.dev_acre))</variable>
      <variable use="both" source="primary attribute" name="zone.zone_time_cbd" type="variable_definition">zone.travel_time_to_cbd</variable>
      <variable use="both" source="expression" name="zone.zone_mf_unit_price" type="variable_definition">zone.aggregate(where(building.building_type_id==2,building.average_value_per_unit,0), function=mean)</variable>
      <variable use="both" source="expression" name="zone.zone_sf_unit_price" type="variable_definition">zone.aggregate(where(building.building_type_id==1,building.average_value_per_unit,0), function=mean)</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_mf_units" type="variable_definition">ln(zone.aggregate(where(building.building_type_id==3,building.residential_units,0)))</variable>
      <variable use="indicator" source="expression" name="zone.zone_avg_cars" type="variable_definition">zone.aggregate(household.cars)/zone.number_of_agents(household)</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_avg_income" type="variable_definition">ln(zone.aggregate(household.income, function=mean))</variable>
      <variable use="both" source="expression" name="zone.zone_ln_emp_30_min" type="variable_definition">ln(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)</variable>
      <variable use="both" source="expression" name="zone.zone_ln_dev_acre" type="variable_definition">ln(zone.dev_acre)</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_totacres" type="variable_definition">ln(zone.totacres)</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_pop" type="variable_definition">ln(zone.aggregate(mag_zone.household.persons))</variable>
      <variable use="indicator" source="expression" name="zone.zone_tot_cars" type="variable_definition">zone.aggregate(household.cars)</variable>
      <variable use="model variable" source="expression" name="zone.zone_tot_income" type="variable_definition">zone.aggregate(household.income)</variable>
      <variable use="model variable" source="expression" name="zone.zone_tot_pop" type="variable_definition">zone.aggregate(mag_zone.household.persons)</variable>
      <variable use="model variable" source="Python class" name="zone.zone_retail_emp_45_min" type="variable_definition">urbansim_parcel.zone.sector_5_employment_within_45_minutes_travel_time_hbw_am_drive_alone</variable>
      <variable use="model variable" source="Python class" name="zone.zone_retail_emp_15_min" type="variable_definition">urbansim_parcel.zone.sector_5_employment_within_15_minutes_travel_time_hbw_am_drive_alone</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_retail_emp_30_min" type="variable_definition">ln(urbansim_parcel.zone.sector_5_employment_within_30_minutes_travel_time_hbw_am_drive_alone)</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_sf_units" type="variable_definition">ln(zone.aggregate(where(building.building_type_id==1,building.residential_units,0)))</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_average_value_per_res_unit" type="variable_definition">ln(zone.aggregate(building.average_value_per_unit*building.disaggregate(building_type.is_residential==1), function=mean))</variable>
      <variable use="model variable" source="Python class" name="zone.zone_retail_emp_30_min" type="variable_definition">urbansim_parcel.zone.sector_5_employment_within_30_minutes_travel_time_hbw_am_drive_alone</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_Rd_density" type="variable_definition">ln(zone.rd_density)</variable>
      <variable use="model variable" source="primary attribute" name="zone.zone_rd_density" type="variable_definition">zone.rd_density</variable>
      <variable use="indicator" source="primary attribute" name="zone.zone_schl_district" type="variable_definition">zone.schl_district</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_average_value_per_sqft" type="variable_definition">ln(zone.aggregate(building.average_value_per_unit*building.disaggregate(building_type.is_residential==0), function=mean))</variable>
      <variable use="model variable" source="Python class" name="zone.zone_services_emp_25_min" type="variable_definition">urbansim_parcel.zone.sector_6_employment_within_25_minutes_travel_time_hbw_am_drive_alone</variable>
      <variable use="model variable" source="expression" name="zone.zone_ln_jobs" type="variable_definition">ln(zone.number_of_agents(job))</variable>
      <variable use="both" source="expression" name="building.ln_inv_far" type="variable_definition">ln(building.land_area/building.non_residential_sqft)</variable>
      <variable use="both" source="expression" name="building.ln_pop_zone" type="variable_definition">ln(building.disaggregate(zone.aggregate(mag_zone.household.persons)))</variable>
      <variable use="both" source="expression" name="building.ln_non_residential_sqft" type="variable_definition">ln(building.non_residential_sqft)</variable>
      <variable use="model variable" source="primary attribute" name="building.unit_price" type="variable_definition">building.average_value_per_unit</variable>
      <variable use="both" source="expression" name="building.is_office" type="variable_definition">building.building_type_id==5</variable>
      <variable use="both" source="expression" name="building.is_warehouse" type="variable_definition">building.building_type_id==10</variable>
      <variable use="both" source="expression" name="building.is_school" type="variable_definition">building.building_type_id==8</variable>
      <variable use="both" source="expression" name="building.is_retail" type="variable_definition">building.building_type_id==7</variable>
      <variable use="both" source="expression" name="building.is_government" type="variable_definition">building.building_type_id==1</variable>
      <variable use="both" source="expression" name="building.ln_land_per_unit" type="variable_definition">ln(building.land_area/building.residential_units)</variable>
      <variable use="both" source="expression" name="household_x_building.price_income_ratio_l1" type="variable_definition">safe_array_divide(building.average_value_per_unit,household.income)&lt;1</variable>
      <variable use="both" source="expression" name="household_x_building.price_income_ratio_g5" type="variable_definition">safe_array_divide(building.average_value_per_unit,household.income)&gt;5</variable>
      <variable use="both" source="expression" name="household_x_building.ln_persons_land_per_unit" type="variable_definition">ln(mag_zone.household.persons*building.land_area/building.residential_units)</variable>
      <variable use="both" source="expression" name="household_x_building.ln_persons_sqft_per_unit" type="variable_definition">ln(mag_zone.household.persons*building.sqft_per_unit)</variable>
      <variable use="model variable" source="expression" name="building.ln_avg_hh_income" type="variable_definition">ln(building.aggregate(household.income, function=mean))</variable>
      <variable use="both" source="expression" name="household_x_building.ln_inc_avg_inc" type="variable_definition">ln(household.income*building.aggregate(household.income, function=mean))</variable>
      <variable use="both" source="expression" name="building.land_per_unit" type="variable_definition">building.land_area/building.residential_units</variable>
      <variable use="both" source="expression" name="household_x_building.persons_land_per_unit" type="variable_definition">mag_zone.household.persons*building.land_area/building.residential_units</variable>
      <variable use="both" source="expression" name="household_x_building.ln_income_sqft_per_unit" type="variable_definition">ln(household.income*building.sqft_per_unit)</variable>
      <variable use="model variable" source="expression" name="household_x_building.wkrs_hhs_ln_jobs_30_min" type="variable_definition">safe_array_divide(household.workers,mag_zone.household.persons)*ln_bounded(building.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable use="model variable" source="expression" name="building.ln_jobs_within_30_min" type="variable_definition">ln(building.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable use="model variable" source="expression" name="household_x_building.income_schl_dist1" type="variable_definition">household.income/10000*building.disaggregate(zone.schl_district==1)</variable>
      <variable use="both" source="expression" name="household_x_building.persons_sqft_per_unit" type="variable_definition">mag_zone.household.persons*building.sqft_per_unit</variable>
      <variable use="both" source="expression" name="household_x_building.income_sqft_per_unit" type="variable_definition">household.income/10000*building.sqft_per_unit</variable>
      <variable use="both" source="expression" name="household_x_building.price_income_ratio" type="variable_definition">safe_array_divide(building.average_value_per_unit,household.income)</variable>
      <variable use="both" source="expression" name="household_x_building.income_single_family" type="variable_definition">household.income/10000*building.building_type_id==1</variable>
      <variable use="both" source="expression" name="household_x_building.persons_x_single_family" type="variable_definition">mag_zone.household.persons*building.building_type_id==1</variable>
      <variable use="both" source="expression" name="building.ln_number_jobs_retail" type="variable_definition">ln(building.disaggregate(urbansim.zone.number_of_jobs_of_sector_5))</variable>
      <variable use="model variable" source="expression" name="building.ln_jobs_within_15_min" type="variable_definition">ln(building.disaggregate(urbansim_parcel.zone.employment_within_15_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable use="both" source="expression" name="building.ln_pop_density_zone" type="variable_definition">ln(building.aggregate(mag_zone.household.persons)/building.disaggregate(zone.aggregate(building.land_area)))</variable>
      <variable use="model variable" source="expression" name="building.cbd_time_sq" type="variable_definition">building.disaggregate(zone.travel_time_to_cbd)**2</variable>
      <variable use="model variable" source="expression" name="building.ln_cbd_time" type="variable_definition">ln(building.disaggregate(zone.travel_time_to_cbd))</variable>
      <variable use="model variable" source="expression" name="building.ln_avg_hh_income_zonal" type="variable_definition">ln(building.disaggregate(zone.aggregate(household.income, function=mean)))</variable>
      <variable use="model variable" source="primary attribute" name="building.ln_avg_val_per_unit" type="variable_definition">ln(building.average_value_per_unit)</variable>
      <variable use="both" source="expression" name="building.ln_residential_units" type="variable_definition">ln(building.residential_units)</variable>
      <variable use="both" source="expression" name="building.is_single_family" type="variable_definition">building.building_type_id == 1</variable>
      <variable use="both" source="expression" name="building.ln_job_density_zone" type="variable_definition">ln(building.disaggregate(zone.number_of_agents(job))/building.disaggregate(zone.aggregate(building.land_area)))</variable>
      <variable use="model variable" source="primary attribute" name="building.avg_value_per_unit" type="variable_definition">building.average_value_per_unit</variable>
      <variable use="model variable" source="expression" name="building.avg_hh_income" type="variable_definition">building.aggregate(household.income, function=mean)</variable>
      <variable use="model variable" source="expression" name="building.avg_hh_income_zonal" type="variable_definition">building.disaggregate(zone.aggregate(household.income, function=mean))</variable>
      <variable use="model variable" source="expression" name="building.inv_jobs" type="variable_definition">safe_array_divide(1,(building.number_of_agents(job)),0)</variable>
      <variable use="model variable" source="expression" name="building.ln_jobs" type="variable_definition">ln(building.number_of_agents(job))</variable>
      <variable use="model variable" source="expression" name="building.ln_jobs_in_zone" type="variable_definition">ln(building.disaggregate(zone.number_of_agents(job)))</variable>
      <variable use="model variable" source="expression" name="building.ln_dev_acre_in_zone" type="variable_definition">ln(building.disaggregate(zone.dev_acre))</variable>
      <variable use="both" source="expression" name="building.zone_ln_emp_30_min" type="variable_definition">ln(building.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))</variable>
      <variable use="both" source="expression" name="building.zone_retail_emp_15_min" type="variable_definition">building.disaggregate(urbansim_parcel.zone.sector_5_employment_within_15_minutes_travel_time_hbw_am_drive_alone)</variable>
      <variable use="both" source="expression" name="building.zone_retail_emp_45_min" type="variable_definition">building.disaggregate(urbansim_parcel.zone.sector_5_employment_within_45_minutes_travel_time_hbw_am_drive_alone)</variable>
      <variable use="model variable" source="expression" name="building.cbd_time" type="variable_definition">building.disaggregate(zone.travel_time_to_cbd)</variable>
      <variable use="model variable" source="expression" name="building.rd_density" type="variable_definition">building.disaggregate(zone.rd_density)</variable>
      <variable use="model variable" source="expression" name="building.schl_dist1" type="variable_definition">building.disaggregate(zone.schl_district==1)</variable>
      <variable use="both" source="expression" name="building.ln_sf_unit_price" type="variable_definition">ln((building.building_type_id==1) * (building.average_value_per_unit))</variable>
      <variable use="both" source="expression" name="building.ln_sf_units" type="variable_definition">ln((building.building_type_id==1) * (building.residential_units))</variable>
      <variable use="both" source="expression" name="building.ln_mf_unit_price" type="variable_definition">ln((building.building_type_id==2) * (building.average_value_per_unit))</variable>
      <variable use="both" source="expression" name="building.ln_mf_units" type="variable_definition">ln((building.building_type_id==2) * (building.residential_units))</variable>
      <variable use="both" source="expression" name="building.ln_average_value_per_sqft" type="variable_definition">ln(building.average_value_per_unit * building.disaggregate(building_type.is_residential==0))</variable>
      <variable use="both" source="expression" name="building.ln_avg_value_per_sqft_whse" type="variable_definition">ln((building.building_type_id==10)*(building.average_value_per_unit))</variable>
      <variable use="both" source="expression" name="building.ln_avg_value_per_sqft_retail" type="variable_definition">ln((building.building_type_id==7)*(building.average_value_per_unit))</variable>
      <variable use="both" source="expression" name="building.ln_avg_value_per_sqft_office" type="variable_definition">ln((building.building_type_id==5)*(building.average_value_per_unit))</variable>
      <variable use="both" source="expression" name="person.htaz" type="variable_definition">person.disaggregate(building.zone_id, intermediates=[household])</variable>
      <variable use="both" source="expression" name="person.wtaz" type="variable_definition">mag_zone.person.wtaz</variable>
      <variable use="both" source="primary" name="person.student_status" type="variable_definition">person.student_status</variable>
      <variable use="both" source="primary" name="person.schtaz" type="variable_definition">person.schtaz</variable>
      <variable use="both" source="primary" name="person.employment_status" type="variable_definition">person.employment_status</variable>
      <variable use="both" source="primary" name="person.age" type="variable_definition">person.age</variable>
      <variable use="both" source="expression" name="person.presch" type="variable_definition">(person.age &lt;= 5).astype('i')</variable>
      <variable use="both" source="expression" name="person.nadlt" type="variable_definition">(person.age &gt; 5)*(person.age &lt; 18)</variable>
    </expression_library>
  </general>
  <model_manager>
    <models config_name="model_system" hidden="False" name="Models" setexpanded="True" type="dictionary">
      <model name="employment_status_sync_model" type="model">
        <structure>
          <import name="import" type="dictionary">
            <class_module type="string">mag_zone.models.employment_status_sync_model</class_module>
            <class_name type="string">EmploymentStatusSyncModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">EmploymentStatusSyncModel</name>
          </init>
          <run type="dictionary">
            <argument name="household" type="string">household</argument>
            <argument name="person" type="string">person</argument>
            <argument name="work_eligible" parser_action="quote_string" type="string">person.age&gt;15</argument>
            <argument name="full_time_ratio" type="float">0.64351</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
        </structure>
      </model>
      <model name="household_transition_model_with_persons" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim.models.transition_model</class_module>
            <class_name>TransitionModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">TransitionModel</name>
            <argument name="dataset" type="string">household</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Household Transition Model with Persons</argument>
            <argument name="model_short_name" parser_action="quote_string" type="string">HTM</argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <argument name="control_total_table" parser_action="quote_string" type="string">annual_household_control_totals</argument>
            <argument name="control_total_storage" type="string">base_cache_storage</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="year" type="string">year</argument>
            <argument name="target_attribute_name" parser_action="quote_string" type="string">total_number_of_households</argument>
            <argument name="reset_dataset_attribute_value" type="string">{'building_id':-1,}</argument>
            <argument name="sync_dataset" type="string">person</argument>
            <argument name="reset_sync_dataset_attribute_value" type="string">{'job_id':-1, 'schtaz':-1}</argument>
          </run>
        </structure>
      </model>
      <model name="household_transition_model" type="model">
        <structure type="dictionary">
          <run type="dictionary">
            <argument name="target_attribute_name" parser_action="quote_string" type="string">number_of_households</argument>
          </run>
        </structure>
      </model>
      <model name="employment_location_choice_model" type="model">
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <init type="dictionary">
            <argument name="estimate_config" type="string">Resources({'estimation_size_agents':0.1})</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string"/>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string"/>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel_group name="non_home_based" type="submodel_group">
            <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel">
              <description type="string">No submodel</description>
              <variable_list type="variable_list">
                <variable_spec name="building.ln_sqft"/>
              </variable_list>
            </submodel>
          </submodel_group>
        </specification>
      </model>
      <model name="household_location_choice_model" type="model">
        <estimation_config name="Estimation Configuration" parser_action="skip">
          <config_override config_name="models" name="Models to run before estimation" type="list">[]</config_override>
        </estimation_config>
        <structure type="dictionary">
          <init type="dictionary">
            <argument name="estimate_config" type="string">Resources({'estimation_size_agents':0.1})</argument>
          </init>
          <prepare_for_estimate type="dictionary">
            <argument name="index_to_unplace" type="string">None</argument>
            <argument name="join_datasets" type="boolean">False</argument>
            <argument convert_blank_to_none="True" name="agents_for_estimation_table" parser_action="quote_string" type="string"/>
            <argument convert_blank_to_none="True" name="agents_for_estimation_storage" type="string"/>
          </prepare_for_estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel" inherit_parent_values="False">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="household_x_building.generalized_peak_travel_time_from_home_to_work_avg"/>
              <variable_spec name="household_x_building.income_x_avg_val"/>
              <variable_spec name="building.ln_units"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="residential_development_project_location_choice_model" type="model">
        <specification type="dictionary">
          <submodel hidden="Children" name="sf_residential" submodel_id="1" type="submodel">
            <description type="string">sf residential</description>
            <variable_list type="variable_list">
              <variable_spec name="building.ln_sf_units"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="mf_residential" submodel_id="2" type="submodel">
            <description type="string">mf residential</description>
            <variable_list type="variable_list">
              <variable_spec name="building.ln_mf_units"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="real_estate_price_model" type="model">
        <specification type="dictionary" inherit_parent_values="False">
          <submodel hidden="Children" name="commercial" submodel_id="1" type="submodel">
            <description type="string">Commercial</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"/>
              <variable_spec name="building.ln_sqft"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="governmental" submodel_id="2" type="submodel">
            <description type="string">Governmental</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"/>
              <variable_spec name="building.ln_sqft"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="industrial" submodel_id="3" type="submodel">
            <description type="string">Industrial</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"/>
              <variable_spec name="building.year_built"/>
            </variable_list>
          </submodel>
          <submodel hidden="Children" name="residential" submodel_id="4" type="submodel">
            <description type="string">Residential</description>
            <variable_list type="variable_list">
              <variable_spec name="constant"/>
              <variable_spec name="building.ln_units"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="workplace_choice_model_for_resident" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.workplace_choice_model</class_module>
            <class_name>WorkplaceChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">WorkplaceChoiceModel</name>
            <argument name="location_set" type="string" model_dependency_type="dataset">job</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Non-home-based Workplace Choice Model for residents</argument>
            <argument name="short_name" parser_action="quote_string" type="string">NHBWCM</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="submodel_string" type="string">None</argument>
            <argument name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">urbansim_parcel.job.is_untaken_non_home_based_job</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="location_id_string" parser_action="quote_string" type="string">job_id</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">30</key>
              <key name="weights_for_estimation_string" type="string" model_dependency_type="variable">is_placed_job=(urbansim_zone.job.zone_id &gt; 0).astype(int32)</key>
              <key name="compute_capacity_flag" type="string">True</key>
              <key name="capacity_string" type="string" model_dependency_type="variable">urbansim_parcel.job.is_untaken_non_home_based_job</key>
              <key name="lottery_max_iterations" type="integer">10</key>
              <key name="number_of_units_string" type="string" model_dependency_type="variable">(job.home_based_status==0).astype(int32)</key>
              <key name="number_of_agents_string" type="string" model_dependency_type="variable">job.number_of_agents(person)</key>
              <key name="accept_unavailability_of_choices" type="string">True</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key name="estimation" type="string">opus_core.bhhh_mnl_estimation</key>
              <key name="sample_size_locations" type="integer">30</key>
              <key name="weights_for_estimation_string" type="string" model_dependency_type="variable">is_placed_job=(urbansim_zone.job.zone_id &gt; 0).astype(int32)</key>
              <key name="compute_capacity_flag" type="string">True</key>
              <key name="capacity_string" type="string" model_dependency_type="variable">urbansim_parcel.job.is_untaken_non_home_based_job</key>
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">workplace_choice_model_for_resident_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">workplace_choice_model_for_resident_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="agents_index" type="string">None</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string" model_dependency_type="variable">(person.employment_status==1)*(person.job_id &lt;=0)</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':500000}</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
          <prepare_for_estimate type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_estimate</name>
            <argument name="agent_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="household_set" type="string" model_dependency_type="dataset">household</argument>
            <argument name="join_datasets" type="string">True</argument>
            <argument name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">person.job_id &gt; 0</argument>
            <argument name="agents_for_estimation_storage" type="string">base_cache_storage</argument>
            <argument name="agents_for_estimation_table" parser_action="quote_string" type="string" model_dependency_type="table">persons</argument>
            <argument name="data_objects" type="string">datasets</argument>
            <output hidden="True" name="output" type="string">(specification, agents_index)</output>
          </prepare_for_estimate>
          <estimate type="dictionary">
            <argument name="agent_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="agents_index" type="string">agents_index</argument>
            <argument hidden="True" name="data_objects" type="string">datasets</argument>
            <argument hidden="True" name="debuglevel" type="string">debuglevel</argument>
            <argument hidden="True" name="specification" type="string">specification</argument>
            <output hidden="True" name="output" type="string">(coefficients, _)</output>
          </estimate>
        </structure>
        <specification type="dictionary">
          <submodel hidden="Children" name="submodel" submodel_id="-2" type="submodel" inherit_parent_values="False">
            <description type="string">No submodel</description>
            <variable_list type="variable_list">
              <variable_spec name="person_x_job.generalized_peak_travel_time_from_home_to_work"/>
            </variable_list>
          </submodel>
        </specification>
      </model>
      <model name="setup_alternative_employment_scenario" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">opus_core.models.swap_datasets</class_module>
            <class_name type="string">SwapDatasets</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">SwapDatasets</name>
          </init>
          <run type="dictionary">
            <argument name="suffix" type="string">"_employment_scenario"</argument>
            <argument name="alt_location" type="string">base_cache_storage</argument>
          </run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <model name="school_assignment_model" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.monte_carlo_assignment_model</class_module>
            <class_name type="string">MonteCarloAssignmentModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">MonteCarloAssignmentModel</name>
            <argument name="model_name" type="string">"School Assignment Model"</argument>
          </init>
          <run type="dictionary">
            <argument name="individual_dataset" type="string" parser_action="quote_string">person</argument>
            <argument name="fraction_dataset" type="string" parser_action="quote_string">school</argument>
            <argument name="id_name1" type="string" parser_action="quote_string">id_name1</argument>
            <argument name="id_name2" type="string" parser_action="quote_string">schtaz</argument>
            <argument name="fraction_attribute_name" type="string" parser_action="quote_string">total_mean</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="expressions_to_compute" type="string">["id_name1=((person.student_status==1)*(person.schtaz &lt;= 0)).astype('i4')","id_name1=(school.taz&gt;0).astype('i4')", 'schtaz=school.taz']</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </prepare_for_run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <model name="school_assignment_initialization" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.monte_carlo_assignment_model</class_module>
            <class_name type="string">MonteCarloAssignmentModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">MonteCarloAssignmentModel</name>
            <argument name="model_name" type="string">"School Assignment Model"</argument>
          </init>
          <run type="dictionary">
            <argument name="individual_dataset" type="string" parser_action="quote_string">person</argument>
            <argument name="fraction_dataset" type="string" parser_action="quote_string">school</argument>
            <argument name="id_name1" type="string" parser_action="quote_string">id_name1</argument>
            <argument name="id_name2" type="string" parser_action="quote_string">schtaz</argument>
            <argument name="fraction_attribute_name" type="string" parser_action="quote_string">total_mean</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="expressions_to_compute" type="string">["id_name1=(person.student_status==1).astype('i4')","id_name1=(school.taz&gt;0).astype('i4')", 'schtaz=school.taz']</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </prepare_for_run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <model name="workplace_choice_initialization" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module>urbansim_parcel.models.workplace_choice_model</class_module>
            <class_name>WorkplaceChoiceModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">WorkplaceChoiceModel</name>
            <argument name="location_set" type="string" model_dependency_type="dataset">job</argument>
            <argument name="model_name" parser_action="quote_string" type="string">Non-home-based Workplace Choice Model for residents</argument>
            <argument name="short_name" parser_action="quote_string" type="string">NHBWCM</argument>
            <argument name="choices" parser_action="quote_string" type="string">urbansim.lottery_choices</argument>
            <argument name="submodel_string" type="string">None</argument>
            <argument name="filter" parser_action="quote_string" type="string" model_dependency_type="variable">urbansim_parcel.job.is_untaken_non_home_based_job</argument>
            <argument name="sampler" parser_action="quote_string" type="string">opus_core.samplers.weighted_sampler</argument>
            <argument name="location_id_string" parser_action="quote_string" type="string">job_id</argument>
            <argument name="run_config" type="dictionary">
              <key name="sample_size_locations" type="integer">30</key>
              <key name="weights_for_estimation_string" type="string" model_dependency_type="variable">is_placed_job=(urbansim_zone.job.zone_id &gt; 0).astype(int32)</key>
              <key name="compute_capacity_flag" type="string">True</key>
              <key name="capacity_string" type="string" model_dependency_type="variable">urbansim_parcel.job.is_untaken_non_home_based_job</key>
              <key name="lottery_max_iterations" type="integer">10</key>
              <key name="number_of_units_string" type="string" model_dependency_type="variable">(job.home_based_status==0).astype(int32)</key>
              <key name="number_of_agents_string" type="string" model_dependency_type="variable">job.number_of_agents(person)</key>
              <key name="accept_unavailability_of_choices" type="string">True</key>
            </argument>
            <argument name="estimate_config" type="dictionary">
              <key name="estimation" type="string">opus_core.bhhh_mnl_estimation</key>
              <key name="sample_size_locations" type="integer">30</key>
              <key name="weights_for_estimation_string" type="string" model_dependency_type="variable">is_placed_job=(urbansim_zone.job.zone_id &gt; 0).astype(int32)</key>
              <key name="compute_capacity_flag" type="string">True</key>
              <key name="capacity_string" type="string" model_dependency_type="variable">urbansim_parcel.job.is_untaken_non_home_based_job</key>
            </argument>
          </init>
          <prepare_for_run type="dictionary">
            <name name="name" type="string">prepare_for_run</name>
            <output name="output" type="string">(specification, coefficients)</output>
            <argument name="coefficients_storage" type="string">base_cache_storage</argument>
            <argument name="coefficients_table" parser_action="quote_string" type="string" model_dependency_type="table">workplace_choice_model_for_resident_coefficients</argument>
            <argument name="specification_storage" type="string">base_cache_storage</argument>
            <argument name="specification_table" parser_action="quote_string" type="string" model_dependency_type="table">workplace_choice_model_for_resident_specification</argument>
          </prepare_for_run>
          <run type="dictionary">
            <argument name="agent_set" type="string" model_dependency_type="dataset">person</argument>
            <argument name="agents_index" type="string">None</argument>
            <argument name="agents_filter" parser_action="quote_string" type="string" model_dependency_type="variable">(person.employment_status==1)</argument>
            <argument name="coefficients" type="string">coefficients</argument>
            <argument name="specification" type="string">specification</argument>
            <argument name="chunk_specification" type="string">{'records_per_chunk':500000}</argument>
            <argument name="data_objects" type="string">datasets</argument>
          </run>
        </structure>
      </model>
      <model name="distribute_unplaced_households" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.monte_carlo_assignment_model</class_module>
            <class_name type="string">MonteCarloAssignmentModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">MonteCarloAssignmentModel</name>
            <argument name="model_name" type="string">"Distribute Unplaced Households"</argument>
          </init>
          <run type="dictionary">
            <argument name="individual_dataset" type="string" parser_action="quote_string">household</argument>
            <argument name="fraction_dataset" type="string" parser_action="quote_string">building</argument>
            <argument name="id_name1" type="string" parser_action="quote_string">is_unassigned_hh</argument>
            <argument name="id_name2" type="string" parser_action="quote_string">building_id</argument>
            <argument name="fraction_attribute_name" type="string" parser_action="quote_string">residential_units</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="expressions_to_compute" type="string">["is_unassigned_hh=(household.building_id &lt;= 0).astype('i4')", "is_unassigned_hh=(building.building_id&gt;0).astype('i4')"]</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </prepare_for_run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <model name="distribute_unplaced_jobs" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.monte_carlo_assignment_model</class_module>
            <class_name type="string">MonteCarloAssignmentModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">MonteCarloAssignmentModel</name>
            <argument name="model_name" type="string">"Distribute Unplaced Jobs"</argument>
          </init>
          <run type="dictionary">
            <argument name="individual_dataset" type="string" parser_action="quote_string">job</argument>
            <argument name="fraction_dataset" type="string" parser_action="quote_string">building</argument>
            <argument name="id_name1" type="string" parser_action="quote_string">is_unplaced_job</argument>
            <argument name="id_name2" type="string" parser_action="quote_string">building_id</argument>
            <argument name="fraction_attribute_name" type="string" parser_action="quote_string">number_of_jobs</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="expressions_to_compute" type="string">["is_unplaced_job=(job.building_id &lt;= 0).astype('i4')", "is_unplaced_job=(building.building_id&gt;0).astype('i4')", 'urbansim_zone.building.number_of_non_home_based_jobs']</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </prepare_for_run>
        </structure>
        <specification type="dictionary"/>
      </model>
      <!--
      <model name="distribute_unassigned_workers" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.monte_carlo_assignment_model</class_module>
            <class_name type="string">MonteCarloAssignmentModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">MonteCarloAssignmentModel</name>
            <argument name="model_name" type="string">"Distribute Unassigned Workers"</argument>
          </init>
          <run type="dictionary">
            <argument name="individual_dataset" type="string" parser_action="quote_string">person</argument>
            <argument name="fraction_dataset" type="string" parser_action="quote_string">job</argument>
            <argument name="id_name1" type="string" parser_action="quote_string">id_name1</argument>
            <argument name="id_name2" type="string" parser_action="quote_string">job_id</argument>
            <argument name="fraction_attribute_name" type="string" parser_action="quote_string">number_of_jobs</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="expressions_to_compute" type="string">["id_name1=((person.employment_status==1)*(person.job_id &lt;=0)).astype('i4')", "id_name1=(job.building_id&gt;0).astype('i4')", 'number_of_jobs=job.disaggregate(urbansim_zone.building.number_of_non_home_based_jobs)']</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </prepare_for_run>
        </structure>
        <specification type="dictionary"/>
      </model>
      -->
      <model name="distribute_unassigned_workers" type="model">
        <structure type="dictionary">
          <import name="import" type="dictionary">
            <class_module type="string">urbansim.models.monte_carlo_assignment_model</class_module>
            <class_name type="string">MonteCarloAssignmentModel</class_name>
          </import>
          <init type="dictionary">
            <name name="name" type="string">MonteCarloAssignmentModel</name>
            <argument name="model_name" type="string">"Distribute Unassigned Workers"</argument>
          </init>
          <run type="dictionary">
            <argument name="individual_dataset" type="string" parser_action="quote_string">person</argument>
            <argument name="fraction_dataset" type="string" parser_action="quote_string">job</argument>
            <argument name="id_name1" type="string" parser_action="quote_string">is_unassigned_worker</argument>
            <argument name="id_name2" type="string" parser_action="quote_string">job_id</argument>
            <argument name="fraction_attribute_name" type="string" parser_action="quote_string">number_of_jobs</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </run>
          <prepare_for_run type="dictionary">
            <name hidden="True" name="name" type="string">prepare_for_run</name>
            <argument name="expressions_to_compute" type="string">["is_unassigned_worker=((person.employment_status==1)*(person.job_id &lt;=0)).astype('i4')", "is_unassigned_worker=(job.building_id&gt;0).astype('i4')", 'number_of_jobs=job.disaggregate(urbansim_zone.building.number_of_non_home_based_jobs)']</argument>
            <argument name="dataset_pool" type="string">dataset_pool</argument>
          </prepare_for_run>
        </structure>
        <specification type="dictionary"/>
      </model>
    </models>
    <templates name="Model Templates" parser_action="skip" hidden="True"/>
    <estimation_config config_name="estimation_config" name="Estimation Configuration" type="configuration">
      <save_estimation_results type="boolean">True</save_estimation_results>
      <cache_directory parser_action="prefix_with_opus_data_path" type="directory" field_identifier="Cache Directory" field_description="Directory for base_year cache, relative to OPUS_DATA_PATH or OPUS_HOME/data, e.g. seattle_parcel/base_year_data">mag_zone/base_year_data</cache_directory>
      <estimation_database_configuration type="class">
        <class_name type="string" hidden="True">EstimationDatabaseConfiguration</class_name>
        <class_module type="string" hidden="True">opus_core.database_management.configurations.estimation_database_configuration</class_module>
        <argument name="database_name" type="string">mag_zone</argument>
      </estimation_database_configuration>
      <scenario_database_configuration type="class">
        <class_name type="string">ScenarioDatabaseConfiguration</class_name>
        <class_module type="string">opus_core.database_management.configurations.scenario_database_configuration</class_module>
        <argument name="database_name" type="string">mag_zone</argument>
      </scenario_database_configuration>
      <datasets_to_cache_after_each_model type="list">[]</datasets_to_cache_after_each_model>
      <low_memory_mode type="boolean">False</low_memory_mode>
      <base_year type="integer" field_identifier="Base Year">2009</base_year>
      <years type="tuple">
        <firstyear type="integer" field_identifier="Base Year">2009</firstyear>
        <lastyear type="integer" field_identifier="Base Year">2009</lastyear>
      </years>
      <seed type="integer">1</seed>
      <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
        <selectable name="building" type="selectable">True</selectable>
        <selectable name="zone" type="selectable">True</selectable>
        <selectable name="household" type="selectable">True</selectable>
        <selectable name="job" type="selectable">True</selectable>
        <selectable name="development_event_history" type="selectable">True</selectable>
        <selectable name="target_vacancy" type="selectable">True</selectable>
        <selectable name="job_building_type" type="selectable">False</selectable>
        <selectable name="building_type" type="selectable">True</selectable>
      </datasets_to_preload>
      <dataset_pool_configuration type="class">
        <class_name type="string" hidden="True">DatasetPoolConfiguration</class_name>
        <class_module type="string" hidden="True">opus_core.configurations.dataset_pool_configuration</class_module>
        <argument name="package_order" type="list">['mag_zone', 'urbansim_zone', 'urbansim', 'opus_core']</argument>
      </dataset_pool_configuration>
    </estimation_config>
    <travel_model_configuration type="dictionary">
      <project_path type="string">/workspace/projects/mag_zone_dynamic/</project_path>
      <openamos_path type="string">/workspace/openamos/core/openamos_run.py</openamos_path>
      <openamos_convergence_file type="string">/workspace/projects/mag_zone_dynamic/convergence/openamos_convergence.txt</openamos_convergence_file>
      <openamos_configuration type="string">/workspace/openamos/configs/mag_zone/config_before_malta.xml</openamos_configuration>
      <database_server_configuration type="string">simtravel_database_server</database_server_configuration>
      <database_name type="string">public</database_name>
      <malta_path type="string">/workspace/malta/malta</malta_path>
      <malta_project type="string">/workspace/malta/input_OpenAMOS_iteration.dat</malta_project>
      <malta_convergence_file type="string">/workspace/projects/mag_zone_dynamic/convergence/malta_convergence.txt</malta_convergence_file>
      <openamos_configuration_after_iterations type="string">/workspace/openamos/configs/mag_zone/config_after_malta.xml</openamos_configuration_after_iterations>
      <max_iterations type="integer">2</max_iterations>
      <models type="selectable_list">
        <selectable name="mag_zone.simtravel.export_urbansim_data_to_openamos" type="selectable">True</selectable>
        <selectable name="mag_zone.simtravel.iterative_run" type="selectable">True</selectable>
        <selectable name="mag_zone.simtravel.import_openamos_data" type="selectable">True</selectable>
      </models>
    </travel_model_configuration>
  </model_manager>
  <results_manager>
    </results_manager>
  <scenario_manager followers="debuglevel,base_year,cache_directory">
    <scenario executable="True" name="initialize_base_year_data" type="scenario">
      <parent type="scenario_name">mag_zone_baseline</parent>
      <models_to_run setexpanded="True" config_name="models" type="selectable_list">
        <selectable type="selectable" name="distribute_unplaced_households">True</selectable>
        <selectable type="selectable" name="distribute_unplaced_jobs">True</selectable>
        <selectable type="selectable" name="workplace_choice_initialization">True</selectable>
        <selectable type="selectable" name="distribute_unassigned_workers">True</selectable>
        <selectable type="selectable" name="school_assignment_initialization">True</selectable>
      </models_to_run>
      <years_to_run setexpanded="True" config_name="years" type="tuple">
        <firstyear type="integer">2010</firstyear>
        <lastyear type="integer">2010</lastyear>
      </years_to_run>
      <travel_model_configuration type="dictionary">
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2010</year>
            <year_argument type="list">[]</year_argument>
          </run_description>
       </years_to_run>
      <models type="selectable_list">
        <selectable name="mag_zone.simtravel.export_urbansim_data_to_openamos" type="selectable">True</selectable>
      </models>
      </travel_model_configuration>
    </scenario>
    <!--
    <scenario executable="True" name="initialize_school_assignment" type="scenario">
      <parent type="scenario_name">mag_zone_baseline</parent>
      <models_to_run setexpanded="True" config_name="models" type="selectable_list">
        <selectable type="selectable" name="school_assignment_model_initialization">True</selectable>
      </models_to_run>
      <years_to_run setexpanded="True" config_name="years" type="tuple">
        <firstyear type="integer">2009</firstyear>
        <lastyear type="integer">2019</lastyear>
      </years_to_run>
    </scenario>
    -->
    <scenario executable="True" name="test_demo_models" type="scenario">
      <parent type="scenario_name">mag_zone_baseline</parent>
      <models_to_run setexpanded="True" config_name="models" type="selectable_list">
        <selectable return_value="aging_model" type="selectable" name="aging_model_1">True</selectable>
	<!--
        <selectable return_value="fertility_model" type="selectable" name="fertility_model_1">True</selectable>
        <selectable return_value="mortality_model" type="selectable" name="mortality_model_1">True</selectable>
        <selectable return_value="education_model" type="selectable" name="education_model_1">True</selectable>
        <selectable return_value="marriage_model" type="selectable" name="marriage_model_1">True</selectable>
        <selectable return_value="cohabitation_model" type="selectable" name="cohabitation_model_1">True</selectable>
        <selectable return_value="divorce_model" type="selectable" name="divorce_model_1">True</selectable>
        <selectable return_value="breakup_model" type="selectable" name="breakup_model_1">True</selectable>
        <selectable return_value="child_leaving_home_model" type="selectable" name="breakup_model_1">True</selectable>
        <selectable return_value="roommate_model" type="selectable" name="breakup_model_1">True</selectable>
	-->
        <selectable return_value="household_workers_init_model" type="selectable" name="household_workers_init_model_1">True</selectable>
        <selectable return_value="household_workers_model" type="selectable" name="household_workers_model_1">True</selectable>
	<!--
        <selectable return_value="employment_status_sync_model" type="selectable" name="household_workers_model_1">True</selectable>
	-->
        <selectable return_value="income_regression_model" type="selectable" name="income_regression_model_1">True</selectable>
        <selectable return_value="zeroworker_income_model" type="selectable" name="zeroworker_income_model_1">True</selectable>
        <selectable name="household_transition_model_with_persons" type="selectable">True</selectable>
	<!--
        <selectable name="reset_age_for_immigrants" type="selectable">True</selectable>
	-->
      </models_to_run>
      <years_to_run setexpanded="True" config_name="years" type="tuple">
        <firstyear type="integer">2010</firstyear>
        <lastyear type="integer">2014</lastyear>
      </years_to_run>
    </scenario>
    <scenario executable="True" name="mag_zone_alt_emp" type="scenario">
      <parent type="scenario_name">mag_zone_baseline</parent>
      <models_in_year type="dictionary">
        <trigger_openamos key_name="year" key_value="models" type="category_with_special_keys">
          <doesnotmatter type="dictionary">
            <year type="integer">2009</year>
            <models type="list">['setup_alternative_employment_scenario']</models>
          </doesnotmatter>
        </trigger_openamos>
      </models_in_year>
      <years_to_run setexpanded="True" config_name="years" type="tuple">
        <firstyear type="integer">2009</firstyear>
        <lastyear type="integer">2019</lastyear>
      </years_to_run>
    </scenario>
    <scenario executable="True" name="test_baseline_w_demographics" type="scenario">
      <parent type="scenario_name">test_baseline_no_demographics</parent>
      <models_to_run setexpanded="True" config_name="models" type="selectable_list">
	<!--
        <selectable return_value="aging_model" type="selectable" name="aging_model_1">True</selectable>
        <selectable return_value="fertility_model" type="selectable" name="fertility_model_1">True</selectable>
        <selectable return_value="mortality_model" type="selectable" name="mortality_model_1">True</selectable>
        <selectable return_value="education_model" type="selectable" name="education_model_1">True</selectable>
        <selectable return_value="marriage_model" type="selectable" name="marriage_model_1">True</selectable>
        <selectable return_value="cohabitation_model" type="selectable" name="cohabitation_model_1">True</selectable>
        <selectable return_value="divorce_model" type="selectable" name="divorce_model_1">True</selectable>
        <selectable return_value="breakup_model" type="selectable" name="breakup_model_1">True</selectable>
        <selectable return_value="child_leaving_home_model" type="selectable" name="breakup_model_1">True</selectable>
        <selectable return_value="roommate_model" type="selectable" name="breakup_model_1">True</selectable>
        <selectable return_value="household_workers_init_model" type="selectable" name="household_workers_init_model_1">True</selectable>
        <selectable return_value="household_workers_model" type="selectable" name="household_workers_model_1">True</selectable>
        <selectable return_value="employment_status_sync_model" type="selectable" name="household_workers_model_1">False</selectable>
        <selectable return_value="income_regression_model" type="selectable" name="income_regression_model_1">True</selectable>
        <selectable return_value="zeroworker_income_model" type="selectable" name="zeroworker_income_model_1">True</selectable>
	-->
        <selectable name="real_estate_price_model" type="selectable">True</selectable>
        <selectable name="development_project_transition_model" type="selectable">True</selectable>
        <selectable name="residential_development_project_location_choice_model" type="selectable">True</selectable>
        <selectable name="non_residential_development_project_location_choice_model" type="selectable">True</selectable>
        <selectable name="add_projects_to_buildings" type="selectable">True</selectable>
        <selectable name="household_transition_model_with_persons" type="selectable">True</selectable>
        <selectable name="employment_transition_model" type="selectable">True</selectable>
        <selectable name="household_relocation_model" type="selectable">True</selectable>
        <selectable name="household_location_choice_model" type="selectable">True</selectable>
        <selectable type="selectable" name="distribute_unplaced_households">True</selectable>
        <selectable name="employment_relocation_model" type="selectable">True</selectable>
        <selectable name="employment_location_choice_model" type="selectable">True
		  <group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable type="selectable" name="distribute_unplaced_jobs">True</selectable>
        <selectable name="workplace_choice_model_for_resident" type="selectable">True</selectable>
        <selectable type="selectable" name="distribute_unassigned_workers">True</selectable>
        <selectable type="selectable" name="school_assignment_model">True</selectable>
      </models_to_run>
    </scenario>
    <scenario executable="True" name="test_baseline_no_demographics" type="scenario">
      <parent type="scenario_name">mag_zone_baseline</parent>
      <models_to_run setexpanded="True" config_name="models" type="selectable_list">
        <selectable return_value="aging_model" type="selectable" name="aging_model_1">False</selectable>
        <selectable return_value="fertility_model" type="selectable" name="fertility_model_1">False</selectable>
        <selectable return_value="mortality_model" type="selectable" name="mortality_model_1">False</selectable>
        <selectable return_value="education_model" type="selectable" name="education_model_1">False</selectable>
        <selectable return_value="marriage_model" type="selectable" name="marriage_model_1">False</selectable>
        <selectable return_value="cohabitation_model" type="selectable" name="cohabitation_model_1">False</selectable>
        <selectable return_value="divorce_model" type="selectable" name="divorce_model_1">False</selectable>
        <selectable return_value="breakup_model" type="selectable" name="breakup_model_1">False</selectable>
        <selectable return_value="child_leaving_home_model" type="selectable" name="breakup_model_1">False</selectable>
        <selectable return_value="roommate_model" type="selectable" name="breakup_model_1">False</selectable>
        <selectable return_value="household_workers_init_model" type="selectable" name="household_workers_init_model_1">False</selectable>
        <selectable return_value="household_workers_model" type="selectable" name="household_workers_model_1">False</selectable>
        <selectable return_value="employment_status_sync_model" type="selectable" name="household_workers_model_1">False</selectable>
        <selectable return_value="income_regression_model" type="selectable" name="income_regression_model_1">False</selectable>
        <selectable return_value="zeroworker_income_model" type="selectable" name="zeroworker_income_model_1">False</selectable>
        <selectable name="real_estate_price_model" type="selectable">True</selectable>
        <selectable name="development_project_transition_model" type="selectable">True</selectable>
        <selectable name="residential_development_project_location_choice_model" type="selectable">True</selectable>
        <selectable name="non_residential_development_project_location_choice_model" type="selectable">True</selectable>
        <selectable name="add_projects_to_buildings" type="selectable">True</selectable>
        <selectable name="household_transition_model_with_persons" type="selectable">True</selectable>
        <selectable name="employment_transition_model" type="selectable">True</selectable>
        <selectable name="household_relocation_model" type="selectable">True</selectable>
        <selectable name="household_location_choice_model" type="selectable">True</selectable>
        <selectable name="employment_relocation_model" type="selectable">True</selectable>
        <selectable name="employment_location_choice_model" type="selectable">True
		  <group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable name="distribute_unplaced_jobs_model" type="selectable">True</selectable>
        <selectable name="workplace_choice_model_for_resident" type="selectable">True</selectable>
      </models_to_run>
      <years_to_run setexpanded="True" config_name="years" type="tuple">
        <firstyear type="integer">2010</firstyear>
        <lastyear type="integer">2019</lastyear>
      </years_to_run>
      <travel_model_configuration type="dictionary" inherit_parent_values="False">
        <models type="selectable_list">
          <selectable name="mag_zone.simtravel.export_urbansim_data_to_openamos" type="selectable">False</selectable>
          <selectable name="mag_zone.simtravel.iterative_run" type="selectable">False</selectable>
          <selectable name="mag_zone.simtravel.import_openamos_data" type="selectable">False</selectable>
        </models>
      </travel_model_configuration>
    </scenario>
    <scenario setexpanded="True" copyable="True" executable="True" name="mag_zone_baseline" type="scenario">
      <models_to_run setexpanded="True" config_name="models" type="selectable_list">
	<!--
        <selectable return_value="aging_model" type="selectable" name="aging_model_1">True</selectable>
        <selectable return_value="fertility_model" type="selectable" name="fertility_model_1">True</selectable>
        <selectable return_value="mortality_model" type="selectable" name="mortality_model_1">True</selectable>
        <selectable return_value="education_model" type="selectable" name="education_model_1">True</selectable>
        <selectable return_value="marriage_model" type="selectable" name="marriage_model_1">True</selectable>
        <selectable return_value="cohabitation_model" type="selectable" name="cohabitation_model_1">True</selectable>
        <selectable return_value="divorce_model" type="selectable" name="divorce_model_1">True</selectable>
        <selectable return_value="breakup_model" type="selectable" name="breakup_model_1">True</selectable>
        <selectable return_value="child_leaving_home_model" type="selectable" name="breakup_model_1">True</selectable>
        <selectable return_value="roommate_model" type="selectable" name="breakup_model_1">True</selectable>
        <selectable return_value="household_workers_init_model" type="selectable" name="household_workers_init_model_1">True</selectable>
        <selectable return_value="household_workers_model" type="selectable" name="household_workers_model_1">True</selectable>
        <selectable return_value="employment_status_sync_model" type="selectable" name="household_workers_model_1">True</selectable>
        <selectable return_value="income_regression_model" type="selectable" name="income_regression_model_1">True</selectable>
        <selectable return_value="zeroworker_income_model" type="selectable" name="zeroworker_income_model_1">True</selectable>

	-->
        <selectable name="real_estate_price_model" type="selectable">True</selectable>
        <selectable name="development_project_transition_model" type="selectable">True</selectable>
        <selectable name="residential_development_project_location_choice_model" type="selectable">True</selectable>
        <selectable name="non_residential_development_project_location_choice_model" type="selectable">True</selectable>
        <selectable name="add_projects_to_buildings" type="selectable">True</selectable>
        <selectable name="household_transition_model_with_persons" type="selectable">True</selectable>
        <selectable name="employment_transition_model" type="selectable">True</selectable>
        <selectable name="household_relocation_model" type="selectable">True</selectable>
        <selectable name="household_location_choice_model" type="selectable">True</selectable>
        <selectable type="selectable" name="distribute_unplaced_households">True</selectable>
        <selectable name="employment_relocation_model" type="selectable">True</selectable>
        <selectable name="employment_location_choice_model" type="selectable">True
		  <group_members type="string">non_home_based</group_members>
        </selectable>
        <selectable type="selectable" name="distribute_unplaced_jobs">True</selectable>
        <selectable name="workplace_choice_model_for_resident" type="selectable">True</selectable>
        <selectable type="selectable" name="distribute_unassigned_workers">True</selectable>
        <selectable type="selectable" name="school_assignment_model">True</selectable>
      </models_to_run>
      <model_system type="string">urbansim.model_coordinators.model_system</model_system>
      <base_year type="integer">2009</base_year>
      <years_to_run setexpanded="True" config_name="years" type="tuple">
        <firstyear type="integer">2009</firstyear>
        <lastyear type="integer">2019</lastyear>
      </years_to_run>
      <seed type="integer" convert_blank_to_none="True">1</seed>
      <models_in_year type="dictionary">
        <trigger_openamos key_name="year" key_value="models" type="category_with_special_keys">
          <doesnotmatter type="dictionary">
            <year type="integer">2009</year>
            <models type="list">[]</models>
          </doesnotmatter>
        </trigger_openamos>
      </models_in_year>
      <travel_model_configuration type="dictionary">
        <years_to_run key_name="year" type="category_with_special_keys">
          <run_description type="dictionary">
            <year type="integer">2009</year>
            <year_argument type="list">[]</year_argument>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2014</year>
            <year_argument type="list">[]</year_argument>
          </run_description>
          <run_description type="dictionary">
            <year type="integer">2019</year>
            <year_argument type="list">[]</year_argument>
          </run_description>
        </years_to_run>
      </travel_model_configuration>
      <cache_directory parser_action="prefix_with_opus_data_path" type="directory">mag_zone/base_year_data</cache_directory>
      <creating_baseyear_cache_configuration type="class">
        <class_name hidden="True" type="string">CreatingBaseyearCacheConfiguration</class_name>
        <class_module hidden="True" type="string">urbansim.configurations.creating_baseyear_cache_configuration</class_module>
        <argument config_name="cache_directory_root" name="scenario_runs_directory" parser_action="prefix_with_opus_data_path" type="directory">mag_zone/runs</argument>
        <argument name="baseyear_cache" type="class">
          <class_name hidden="True" type="string">BaseyearCacheConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.baseyear_cache_configuration</class_module>
          <argument name="existing_cache_to_copy" parser_action="prefix_with_opus_data_path" type="directory">mag_zone/base_year_data</argument>
        </argument>
        <argument hidden="True" name="unroll_gridcells" type="boolean">False</argument>
        <argument name="advanced" type="category">
          <baseyear_database_configuration config_name="scenario_database_configuration" type="class">
            <class_name hidden="True" type="string">ScenarioDatabaseConfiguration</class_name>
            <class_module hidden="True" type="string">opus_core.database_management.configurations.scenario_database_configuration</class_module>
            <argument name="database_name" type="string">urbansim</argument>
          </baseyear_database_configuration>
          <cache_from_database type="boolean">False</cache_from_database>
          <cache_scenario_database type="string">urbansim.model_coordinators.cache_scenario_database</cache_scenario_database>
          <tables_to_cache type="selectable_list">
            <selectable name="annual_employment_control_totals" type="selectable">True</selectable>
            <selectable name="annual_household_control_totals" type="selectable">True</selectable>
            <selectable name="households" type="selectable">True</selectable>
            <selectable name="job_building_types" type="selectable">True</selectable>
            <selectable name="building_types" type="selectable">True</selectable>
            <selectable name="jobs" type="selectable">True</selectable>
            <selectable name="travel_data" type="selectable">True</selectable>
            <selectable name="zones" type="selectable">True</selectable>
            <selectable name="counties" type="selectable">True</selectable>
            <selectable name="commercial_development_location_choice_model_coefficients" type="selectable">True</selectable>
            <selectable name="commercial_development_location_choice_model_specification" type="selectable">True</selectable>
            <selectable name="commercial_employment_location_choice_model_coefficients" type="selectable">True</selectable>
            <selectable name="commercial_employment_location_choice_model_specification" type="selectable">True</selectable>
            <selectable name="home_based_employment_location_choice_model_specification" type="selectable">True</selectable>
            <selectable name="home_based_employment_location_choice_model_coefficients" type="selectable">True</selectable>
            <selectable name="industrial_employment_location_choice_model_coefficients" type="selectable">True</selectable>
            <selectable name="industrial_employment_location_choice_model_specification" type="selectable">True</selectable>
            <selectable name="industrial_development_location_choice_model_coefficients" type="selectable">True</selectable>
            <selectable name="industrial_development_location_choice_model_specification" type="selectable">True</selectable>
            <selectable name="residential_development_location_choice_model_coefficients" type="selectable">True</selectable>
            <selectable name="residential_development_location_choice_model_specification" type="selectable">True</selectable>
            <selectable name="urbansim_constants" type="selectable">True</selectable>
            <selectable name="household_location_choice_model_coefficients" type="selectable">True</selectable>
            <selectable name="household_location_choice_model_specification" type="selectable">True</selectable>
            <selectable name="household_characteristics_for_ht" type="selectable">True</selectable>
            <selectable name="annual_relocation_rates_for_households" type="selectable">True</selectable>
            <selectable name="annual_relocation_rates_for_jobs" type="selectable">True</selectable>
            <selectable name="base_year" type="selectable">True</selectable>
            <selectable name="cities" type="selectable">True</selectable>
            <selectable name="development_event_history" type="selectable">True</selectable>
            <selectable name="employment_adhoc_sector_group_definitions" type="selectable">True</selectable>
            <selectable name="employment_adhoc_sector_groups" type="selectable">True</selectable>
            <selectable name="employment_sectors" type="selectable">True</selectable>
            <selectable name="race_names" type="selectable">True</selectable>
            <selectable name="target_vacancies" type="selectable">True</selectable>
            <selectable name="jobs_for_estimation" type="selectable">True</selectable>
            <selectable name="households_for_estimation" type="selectable">True</selectable>
          </tables_to_cache>
          <tables_to_cache_nchunks type="dictionary">
            <parcels type="integer">1</parcels>
          </tables_to_cache_nchunks>
        </argument>
      </creating_baseyear_cache_configuration>
      <advanced type="category">
        <dataset_pool_configuration type="class">
          <class_name hidden="True" type="string">DatasetPoolConfiguration</class_name>
          <class_module hidden="True" type="string">opus_core.configurations.dataset_pool_configuration</class_module>
          <argument name="package_order" type="list">['mag_zone', 'urbansim_zone', 'urbansim', 'opus_core']</argument>
        </dataset_pool_configuration>
        <flush_dataset_to_cache_after_each_model type="boolean">False</flush_dataset_to_cache_after_each_model>
        <flush_variables type="boolean">False</flush_variables>
        <low_memory_run type="boolean">False</low_memory_run>
        <datasets_to_preload parser_action="list_to_dictionary" type="selectable_list">
          <selectable name="zone" type="selectable">True</selectable>
          <selectable name="household" type="selectable">True</selectable>
          <selectable name="person" type="selectable">True</selectable>
          <selectable name="building" type="selectable">True</selectable>
          <selectable name="parcel" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="person" type="selectable">False<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="job" type="selectable">True</selectable>
          <selectable name="building_type" type="selectable">True<package_name type="string">urbansim_parcel</package_name>
          </selectable>
          <selectable name="travel_data" type="selectable">False</selectable>
          <selectable name="target_vacancy" type="selectable">True</selectable>
          <selectable name="development_event_history" type="selectable">True</selectable>
          <selectable name="home_based_status" type="selectable">True</selectable>
        </datasets_to_preload>
      </advanced>
    </scenario>
  </scenario_manager>
  <debuglevel type="integer">4</debuglevel>
  <base_year type="integer"/>
  <cache_directory type="string"/>
  <results_manager>
    <indicator_batches name="Indicator Batches" setexpanded="True" type="group">
      <indicator_batch name="person_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="county_totals">
          <indicators>['htaz', 'student_status', 'schtaz', 'employment_status', 'wtaz', 'age', 'presch', 'nadlt']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">1</setting>
          </settings>
          <dataset_name>person</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="alldata_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="county_totals">
          <indicators>[ 'employment', 'percent_retail_employment', 'retail_employment', 'percent_industrial_employment', 'industrial_employment', 'households', 'population', 'median_age', 'avg_household_size', 'population_age_lt_18', 'percent_population_age_lt_18', 'percent_population_age_65_plus', 'population_age_65_plus', 'single_person_households', 'households_with_children', 'households_with_zero_worker', 'avg_peak_travel_time_to_work']</indicators>
          <!--
          <indicators>['county_non_residential_sqft', 'employment', 'retail_employment', 'county_total_dwelling_units', 'county_multi_family_dwelling_units', 'county_single_family_dwelling_units', 'households', 'population', 'median_age', 'avg_household_size', 'median_household_size', 'population_age_lt_18', 'population_age_65_plus']</indicators>
	  -->
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>alldata</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="county_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="county_totals">
          <indicators>[ 'employment', 'retail_employment', 'households', 'population', 'median_age', 'avg_household_size', 'median_household_size', 'population_age_lt_18', 'population_age_65_plus']</indicators>
          <!--
          <indicators>['county_non_residential_sqft', 'employment', 'retail_employment', 'county_total_dwelling_units', 'county_multi_family_dwelling_units', 'county_single_family_dwelling_units', 'households', 'population', 'median_age', 'avg_household_size', 'median_household_size', 'population_age_lt_18', 'population_age_65_plus']</indicators>
	  -->
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>county</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>
      <indicator_batch name="zone_indicators">
        <batch_visualization hidden="Children" type="batch_visualization" name="county_totals">
		<indicators>['households', 'population', 'zone_population_age_lt_18', 'zone_population_age_65_plus','zone_pop_density', 'zone_job_density', 'percent_population_age_65_plus', 'percent_single_person_households', 'percent_households_with_children', 'percent_households_with_zero_worker', 'employment', 'retail_employment', 'percent_retail_employment', 'population']</indicators>
          <output_type>tab</output_type>
          <settings>
            <setting name="output_style">3</setting>
          </settings>
          <dataset_name>zone</dataset_name>
          <visualization_type>tab</visualization_type>
        </batch_visualization>
      </indicator_batch>

    </indicator_batches>
  </results_manager>
</opus_project>

